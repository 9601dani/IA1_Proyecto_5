{
    "intents": [
        {
            "tag": "saludos",
            "patterns": [
                "Hola",
                "Buenos días",
                "Buenas tardes",
                "Buenas noches",
                "Alo"
            ],
            "responses": [
                "¡Hola! Como estas?",
                "¡Buenos días!, Cuentame en que te ayudo",
                "¡Qué gusto verte!, Dime en que te ayudo",
                "¿Cómo te puedo ayudar?",
                "¡Hola! ¿En qué puedo ayudarte?"
            ]
        },
        {
            "tag": "despedidas",
            "patterns": [
                "Adiós",
                "Hasta luego",
                "Nos vemos",
                "Hasta pronto",
                "Chao"
            ],
            "responses": [
                "¡Adiós! Espero haberte ayudado",
                "¡Hasta luego! Si tienes más preguntas, aquí estaré",
                "¡Nos vemos! Que tengas un buen día",
                "¡Hasta pronto! Siempre puedes regresar",
                "¡Chao! Que tengas un buen día"
            ]
        },
        {
            "tag": "agradecimientos",
            "patterns": [
                "Gracias",
                "Muchas gracias",
                "Gracias por tu ayuda",
                "Te agradezco",
                "Gracias, eres genial"
            ],
            "responses": [
                "¡De nada! Estoy aquí para ayudarte",
                "¡No hay de qué! Siempre a la orden",
                "¡Gracias a ti por confiar en mí",
                "¡Gracias a ti por preguntar!",
                "¡Gracias! Me alegra poder ayudarte"
            ]
        },
        {
            "tag": "sentimientos",
            "patterns": [
                "Estoy feliz",
                "Me siento triste",
                "Estoy emocionado",
                "Me siento solo",
                "Estoy aburrido"
            ],
            "responses": [
                "¡Qué bueno que estés feliz! ¿En qué puedo contribuir a tu felicidad?",
                "Lamento escuchar que te sientes triste. ¿Puedo ayudarte en algo?",
                "¡Qué emoción! ¿Qué te tiene tan emocionado?",
                "La soledad es difícil. ¿Quieres hablar de algo en particular?",
                "Estar aburrido es normal a veces. ¿Puedo sugerirte algo interesante?"
            ]
        },
        {
            "tag": "informacion",
            "patterns": [
                "¿Qué es un chatbot?",
                "¿Cómo funcionan los chatbots?",
                "¿Para qué sirve un chatbot?",
                "Dime algo sobre los chatbots",
                "Explícame qué es un chatbot"
            ],
            "responses": [
                "Un chatbot es un programa de computadora diseñado para simular conversaciones con seres humanos.",
                "Los chatbots utilizan inteligencia artificial para interpretar y responder a los mensajes de los usuarios."
            ]
        },
        {
            "tag": "superheroes",
            "patterns": [
                "¿Quién es tu superhéroe favorito?",
                "¿Te gustan los superhéroes?",
                "Dime algo de superhéroes"
            ],
            "responses": [
                "Me gusta Iron Man, ¡es muy inteligente!",
                "Batman siempre tiene un plan.",
                "¡Los superhéroes nos inspiran a ser mejores!"
            ]
        },
        {
            "tag": "variables",
            "patterns": [
                "¿Qué es una variable en programación?",
                "Explícame qué significa una variable.",
                "¿Para qué sirven las variables?",
                "¿Puedes definir una variable?",
                "¿Cómo se utilizan las variables en un programa?"
            ],
            "responses": [
                "Una variable es un contenedor para almacenar datos que pueden cambiar durante la ejecución del programa.",
                "En programación, una variable es un nombre que se asigna a un espacio en memoria para guardar valores.",
                "Las variables permiten a los desarrolladores almacenar, modificar y reutilizar información dentro de un programa.",
                "Es un identificador que se utiliza para guardar información temporalmente y que puede ser manipulada según se necesite.",
                "Piensa en una variable como una etiqueta que te ayuda a organizar y acceder a diferentes tipos de datos en un programa."
            ]
        },
        {
            "tag": "constantes",
            "patterns": [
                "¿Qué es una constante en programación?",
                "¿Cómo se define una constante?",
                "¿Para qué sirven las constantes?",
                "¿Qué diferencia hay entre una variable y una constante?",
                "Explícame qué significa constante en un programa."
            ],
            "responses": [
                "Una constante es un valor que no cambia durante la ejecución de un programa.",
                "Se utiliza una constante para representar valores fijos, como el número pi o una configuración específica.",
                "A diferencia de las variables, las constantes mantienen su valor sin modificaciones después de ser declaradas.",
                "Definir una constante ayuda a mejorar la legibilidad y prevenir errores accidentales en un programa.",
                "En muchos lenguajes, las constantes se declaran con palabras clave especiales, como 'const' o 'final'."
            ]
        },
        {
            "tag": "funciones",
            "patterns": [
                "¿Qué es una función en programación?",
                "Explícame cómo funcionan las funciones.",
                "¿Para qué sirven las funciones en un programa?",
                "¿Qué tipos de funciones existen?",
                "Dame un ejemplo de cómo se usa una función."
            ],
            "responses": [
                "Una función es un bloque de código reutilizable diseñado para realizar una tarea específica.",
                "Las funciones ayudan a estructurar el código, evitar duplicación y mejorar la mantenibilidad.",
                "Pueden recibir parámetros de entrada y devolver un resultado como salida.",
                "Existen funciones predefinidas en los lenguajes y funciones personalizadas creadas por los desarrolladores.",
                "Piensa en una función como una receta: recibe ingredientes (parámetros) y devuelve un plato final (resultado)."
            ]
        },
        {
            "tag": "clases",
            "patterns": [
                "¿Qué es una clase en programación?",
                "Explícame qué significa clase en la POO.",
                "¿Para qué sirven las clases en un programa?",
                "¿Qué define una clase?",
                "Dame un ejemplo de cómo se utiliza una clase."
            ],
            "responses": [
                "Una clase es un modelo o plantilla que define las propiedades y comportamientos de un objeto.",
                "En la programación orientada a objetos, las clases son fundamentales para organizar el código.",
                "Se utilizan para crear instancias de objetos, cada una con sus propios atributos y métodos.",
                "Una clase contiene atributos (datos) y métodos (funciones) que representan el estado y el comportamiento de un objeto.",
                "Por ejemplo, una clase 'Coche' puede tener atributos como 'color' y 'modelo', y métodos como 'acelerar' o 'frenar'."
            ]
        },
        {
            "tag": "metodos",
            "patterns": [
                "¿Qué es un método en programación?",
                "Explícame cómo funcionan los métodos.",
                "¿Cuál es la diferencia entre una función y un método?",
                "¿Qué tipos de métodos existen?",
                "Dame un ejemplo de un método en una clase."
            ],
            "responses": [
                "Un método es una función asociada a un objeto o clase en programación orientada a objetos.",
                "Los métodos permiten realizar operaciones específicas sobre los datos de un objeto.",
                "A diferencia de una función general, un método siempre pertenece a un objeto o clase.",
                "Por ejemplo, un método 'caminar()' podría ser parte de una clase 'Persona'.",
                "Existen métodos estáticos, de instancia y especiales, como el constructor."
            ]
        },
        {
            "tag": "programacion_funcional",
            "patterns": [
                "¿Qué es la programación funcional?",
                "Explícame los principios de la programación funcional.",
                "¿Qué características tiene la programación funcional?",
                "¿Cuáles son las ventajas de programar de forma funcional?",
                "¿Qué lenguajes utilizan programación funcional?"
            ],
            "responses": [
                "La programación funcional es un paradigma que trata la computación como la evaluación de funciones matemáticas.",
                "Se centra en funciones puras, inmutabilidad de datos y evita el uso de estados globales.",
                "En este paradigma, las funciones son ciudadanos de primera clase y pueden ser pasadas como argumentos o devueltas como resultados.",
                "Lenguajes como Haskell, Lisp y Scala son ejemplos destacados de programación funcional.",
                "Entre sus ventajas están la facilidad para depurar, la modularidad y la capacidad de paralelizar procesos."
            ]
        },
        {
            "tag": "paradigmas_de_programacion",
            "patterns": [
                "¿Qué son los paradigmas de programación?",
                "¿Cuáles son los principales paradigmas de programación?",
                "Explícame qué es un paradigma de programación.",
                "¿Para qué sirven los paradigmas en programación?",
                "Dame ejemplos de paradigmas de programación."
            ],
            "responses": [
                "Un paradigma de programación es un enfoque o estilo para resolver problemas mediante código.",
                "Entre los paradigmas más conocidos están la programación estructurada, orientada a objetos y funcional.",
                "Cada paradigma tiene ventajas y desventajas dependiendo del problema a resolver.",
                "Por ejemplo, la programación orientada a objetos organiza el código en torno a objetos, mientras que la funcional se centra en funciones.",
                "Los paradigmas ayudan a estructurar mejor el código y elegir herramientas adecuadas para cada tarea."
            ]
        },
        {
            "tag": "expresiones_lambda",
            "patterns": [
                "¿Qué es una expresión lambda?",
                "Explícame cómo funcionan las expresiones lambda.",
                "¿Para qué sirven las expresiones lambda?",
                "Dame un ejemplo de una función lambda.",
                "¿Qué características tienen las funciones lambda?"
            ],
            "responses": [
                "Una expresión lambda es una función anónima que puede definirse en una sola línea de código.",
                "Son útiles para tareas simples y cuando no es necesario nombrar la función.",
                "En Python, por ejemplo, puedes escribir: lambda x: x * 2, que duplica un número.",
                "Las funciones lambda son comunes en programación funcional y para operaciones rápidas como filtros y mapas.",
                "Son una herramienta poderosa para escribir código conciso y claro."
            ]
        },
        {
            "tag": "programacion_orientada_a_objetos",
            "patterns": [
                "¿Qué es la programación orientada a objetos?",
                "Explícame los principios de la programación orientada a objetos.",
                "¿Qué ventajas tiene la POO?",
                "¿Cuáles son los pilares de la programación orientada a objetos?",
                "¿Qué lenguajes usan POO?"
            ],
            "responses": [
                "La programación orientada a objetos organiza el código en torno a objetos que contienen datos y comportamientos.",
                "Sus pilares fundamentales son la encapsulación, herencia, polimorfismo y abstracción.",
                "La POO facilita el mantenimiento del código, la reutilización y la escalabilidad.",
                "Lenguajes como Java, Python y C++ son populares para desarrollar con este paradigma.",
                "Es ideal para modelar problemas del mundo real en términos de objetos y relaciones."
            ]
        },
        {
            "tag": "ciclos",
            "patterns": [
                "¿Qué son los ciclos en programación?",
                "Explícame cómo funcionan los bucles.",
                "¿Qué tipos de ciclos existen?",
                "¿Para qué sirven los ciclos?",
                "Dame un ejemplo de un ciclo en código."
            ],
            "responses": [
                "Los ciclos permiten repetir un bloque de código mientras se cumple una condición.",
                "Existen ciclos como for, while y do while, dependiendo del lenguaje y la necesidad.",
                "Son esenciales para tareas repetitivas, como iterar sobre listas o realizar cálculos.",
                "Un ejemplo en Python: for i in range(5): print(i), que imprime números del 0 al 4.",
                "Los ciclos son fundamentales para la eficiencia en programación."
            ]
        },
        {
            "tag": "ciclo_for",
            "patterns": [
                "¿Qué es un ciclo for?",
                "Explícame cómo funciona un bucle for.",
                "¿Para qué se utiliza el for?",
                "Dame un ejemplo de un ciclo for.",
                "¿Qué características tiene un bucle for?"
            ],
            "responses": [
                "Un ciclo for itera sobre una secuencia de elementos, como una lista o un rango.",
                "Es útil para recorrer colecciones de datos o repetir acciones un número conocido de veces.",
                "Un ejemplo en Python: for x in [1, 2, 3]: print(x), que imprime cada elemento de la lista.",
                "El ciclo for simplifica el manejo de estructuras iterables en programación.",
                "Se utiliza ampliamente para manipular listas, cadenas y rangos numéricos."
            ]
        },
        {
            "tag": "ciclo_while",
            "patterns": [
                "¿Qué es un ciclo while?",
                "Explícame cómo funciona un bucle while.",
                "¿Cuándo se utiliza un while?",
                "Dame un ejemplo de un ciclo while.",
                "¿Qué ventajas tiene un ciclo while?"
            ],
            "responses": [
                "Un ciclo while ejecuta un bloque de código mientras se cumpla una condición.",
                "Es útil cuando no se conoce de antemano cuántas iteraciones se necesitarán.",
                "Un ejemplo en Python: while x < 5: print(x); x += 1.",
                "El while es ideal para bucles dependientes de eventos o condiciones dinámicas.",
                "Se debe tener cuidado de no crear ciclos infinitos al usar while."
            ]
        },
        {
            "tag": "ciclo_do_while",
            "patterns": [
                "¿Qué es un ciclo do while?",
                "Explícame cómo funciona un bucle do while.",
                "¿Cuándo se utiliza un do while?",
                "Dame un ejemplo de un ciclo do while.",
                "¿Qué diferencia tiene el do while respecto al while?"
            ],
            "responses": [
                "Un ciclo do while ejecuta al menos una vez el bloque de código antes de verificar la condición.",
                "Es útil cuando necesitas asegurarte de que el código se ejecute al menos una vez.",
                "Un ejemplo en C++: do { cout << x; x++; } while (x < 5);",
                "A diferencia de while, el do while garantiza una ejecución inicial antes de evaluar la condición.",
                "Es ideal para tareas en las que el bloque debe ejecutarse al menos una vez, como menús interactivos."
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_variables_en_javascript",
            "patterns": [
                "Dame ejemplos de cómo declarar variables en javascript.",
                "¿Cómo se declaran variables en javascript?",
                "Enséñame ejemplos de declaración de variables en javascript.",
                "Quiero ver cómo se declaran variables con var, let y const.",
                "¿Puedes darme un ejemplo de una variable en javascript?"
            ],
            "responses": [
                "Aquí tienes un ejemplo básico:\n\tvar nombre = 'Juan';\n\tlet edad = 25;\n\tconst PI = 3.14;",
                "Puedes declarar variables así:\n\tlet ciudad = 'Madrid';\n\tconst pais = 'España';",
                "Con var puedes hacer esto:\n\tvar mensaje = 'Hola, mundo';\nSin embargo, se recomienda usar let o const.",
                "Ejemplo con let y const:\n\tlet numero = 42;\n\tconst texto = 'javascript es genial';",
                "Para declarar una variable que cambia:\n\tlet contador = 0;\nY para valores constantes:\n\tconst maximo = 100;"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_constantes_en_javascript",
            "patterns": [
                "Dame ejemplos de cómo declarar constantes en javascript.",
                "¿Cómo se declaran constantes en javascript?",
                "Enséñame ejemplos de declaración de constantes en javascript.",
                "Quiero ver cómo se usan las constantes en javascript.",
                "¿Puedes darme ejemplos de constantes en javascript?"
            ],
            "responses": [
                "Para declarar una constante:\n\tconst PI = 3.14;",
                "Ejemplo de constante de texto:\n\tconst nombre = 'Carlos';",
                "Para trabajar con objetos:\n\tconst configuracion = {\n\t\ttema: 'oscuro'\n\t};",
                "Aquí tienes otro ejemplo:\n\tconst URL = 'https://api.example.com';",
                "Las constantes no cambian:\n\tconst GRAVEDAD = 9.8;\nAsegúrate de asignarles un valor al declararlas."
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_for_en_javascript",
            "patterns": [
                "Dame ejemplos de un ciclo for en javascript.",
                "¿Cómo se usa un ciclo for en javascript?",
                "Enséñame ejemplos de bucles for en javascript.",
                "Quiero ver un ejemplo práctico de un for en javascript.",
                "¿Puedes mostrarme cómo se usa un for en javascript?"
            ],
            "responses": [
                "Un ejemplo básico:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "Para recorrer un array:\n\tlet numeros = [1, 2, 3];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log(numeros[i]);\n\t}",
                "Usando for con objetos:\n\tfor (let key in objeto) {\n\t\tconsole.log(objeto[key]);\n\t}",
                "Recorriendo caracteres de una cadena:\n\tfor (let letra of 'javascript') {\n\t\tconsole.log(letra);\n\t}",
                "Un ciclo regresivo:\n\tfor (let i = 10; i > 0; i--) {\n\t\tconsole.log('Cuenta regresiva: ' + i);\n\t}"
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_while_en_javascript",
            "patterns": [
                "Dame ejemplos de un ciclo while en javascript.",
                "¿Cómo se usa un ciclo while en javascript?",
                "Enséñame ejemplos de bucles while en javascript.",
                "Quiero ver un ejemplo práctico de un while en javascript.",
                "¿Puedes mostrarme cómo se usa un while en javascript?"
            ],
            "responses": [
                "Un ejemplo básico:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Para iterar hasta que se cumpla una condición:\n\twhile (sigueCorriendo) {\n\t\tejecutarTarea();\n\t}",
                "Para contar hacia atrás:\n\tlet i = 10;\n\twhile (i > 0) {\n\t\tconsole.log(i);\n\t\ti--;\n\t}",
                "Para recorrer arrays:\n\tlet numeros = [1, 2, 3];\n\tlet i = 0;\n\twhile (i < numeros.length) {\n\t\tconsole.log(numeros[i]);\n\t\ti++;\n\t}",
                "Para detenerte al encontrar un valor:\n\tlet x = 0;\n\twhile (x !== 100) {\n\t\tx = obtenerNumero();\n\t\tconsole.log(x);\n\t}"
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_do_while_en_javascript",
            "patterns": [
                "Dame ejemplos de un ciclo do while en javascript.",
                "¿Cómo se usa un ciclo do while en javascript?",
                "Enséñame ejemplos de bucles do while en javascript.",
                "Quiero ver un ejemplo práctico de un do while en javascript.",
                "¿Puedes mostrarme cómo se usa un do while en javascript?"
            ],
            "responses": [
                "Un ejemplo básico:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Se usa cuando necesitas ejecutar al menos una vez:\n\tlet clave;\n\tdo {\n\t\tclave = pedirClave();\n\t} while (!esClaveCorrecta(clave));",
                "Contar hacia atrás:\n\tlet x = 10;\n\tdo {\n\t\tconsole.log(x);\n\t\tx--;\n\t} while (x > 0);",
                "Leer datos de un array:\n\tlet i = 0;\n\tlet datos = [1, 2, 3];\n\tdo {\n\t\tconsole.log(datos[i]);\n\t\ti++;\n\t} while (i < datos.length);",
                "Detenerse según una condición:\n\tlet seguir = true;\n\tdo {\n\t\tconsole.log('Ejecutando...');\n\t\tseguir = comprobarEstado();\n\t} while (seguir);"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_metodos_en_javascript",
            "patterns": [
                "Dame ejemplos de cómo declarar métodos en javascript.",
                "¿Cómo se crean métodos en javascript?",
                "Enséñame ejemplos de métodos en javascript.",
                "Quiero ver cómo se declaran métodos en objetos.",
                "¿Puedes mostrarme ejemplos de métodos en javascript?"
            ],
            "responses": [
                "Un método dentro de un objeto:\n\tconst persona = {\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola');\n\t\t}\n\t};",
                "Usando sintaxis abreviada:\n\tconst coche = {\n\t\tarrancar() {\n\t\t\tconsole.log('Vrum!');\n\t\t}\n\t};",
                "Métodos con parámetros:\n\tconst calculadora = {\n\t\tsumar(a, b) {\n\t\t\treturn a + b;\n\t\t}\n\t};",
                "Métodos en clases:\n\tclass Animal {\n\t\tcaminar() {\n\t\t\tconsole.log('Caminando');\n\t\t}\n\t}",
                "Método usando this:\n\tconst usuario = {\n\t\tnombre: 'Juan',\n\t\tpresentarse() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_funciones_en_javascript",
            "patterns": [
                "Dame ejemplos de cómo declarar funciones en javascript.",
                "¿Cómo se crean funciones en javascript?",
                "Enséñame ejemplos de funciones en javascript.",
                "Quiero ver cómo se declaran funciones en javascript.",
                "¿Puedes mostrarme ejemplos de funciones en javascript?"
            ],
            "responses": [
                "Función clásica:\n\tfunction saludar() {\n\t\tconsole.log('Hola, mundo');\n\t}",
                "Función con parámetros:\n\tfunction sumar(a, b) {\n\t\treturn a + b;\n\t}",
                "Función anónima asignada a una variable:\n\tconst multiplicar = function(x, y) {\n\t\treturn x * y;\n\t};",
                "Función flecha:\n\tconst dividir = (a, b) => {\n\t\treturn a / b;\n\t};",
                "Función de una sola línea con flecha:\n\tconst cuadrado = n => n * n;"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_variables_en_python",
            "patterns": [
                "Dame ejemplos de cómo declarar variables en Python.",
                "¿Cómo se declaran variables en Python?",
                "Enséñame ejemplos de declaración de variables en Python.",
                "Quiero ver cómo se declaran variables en Python.",
                "¿Puedes darme un ejemplo de una variable en Python?"
            ],
            "responses": [
                "Declaración básica:\n\tnombre = 'Juan'\n\tedad = 25\n\tpi = 3.14",
                "Puedes declarar múltiples variables en una línea:\n\tx, y, z = 1, 2, 3",
                "Variables de texto y números:\n\ttexto = 'Hola, mundo'\n\tnumero = 42",
                "Usando listas:\n\tfrutas = ['manzana', 'pera', 'plátano']",
                "Declaración de un diccionario:\n\tpersona = {'nombre': 'Carlos', 'edad': 30}"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_constantes_en_python",
            "patterns": [
                "Dame ejemplos de cómo declarar constantes en Python.",
                "¿Cómo se declaran constantes en Python?",
                "Enséñame ejemplos de declaración de constantes en Python.",
                "Quiero ver cómo se usan las constantes en Python.",
                "¿Puedes darme ejemplos de constantes en Python?"
            ],
            "responses": [
                "En Python, no hay constantes estrictas, pero por convención se usan mayúsculas:\n\tPI = 3.14\n\tGRAVEDAD = 9.8",
                "Puedes definir constantes en un módulo separado para mantener orden:\n\t# constantes.py\n\tURL_BASE = 'https://api.example.com'",
                "Otro ejemplo:\n\tMAXIMO_USUARIOS = 1000",
                "Constantes de cadena:\n\tBIENVENIDA = 'Bienvenido al sistema'",
                "Constantes booleanas:\n\tES_ACTIVO = True\n\tES_ADMIN = False"
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_for_en_python",
            "patterns": [
                "Dame ejemplos de un ciclo for en Python.",
                "¿Cómo se usa un ciclo for en Python?",
                "Enséñame ejemplos de bucles for en Python.",
                "Quiero ver un ejemplo práctico de un for en Python.",
                "¿Puedes mostrarme cómo se usa un for en Python?"
            ],
            "responses": [
                "Un ejemplo básico:\n\tfor i in range(5):\n\t\tprint(i)",
                "Para recorrer una lista:\n\tfrutas = ['manzana', 'pera', 'plátano']\n\tfor fruta in frutas:\n\t\tprint(fruta)",
                "Usando for con diccionarios:\n\tpersona = {'nombre': 'Juan', 'edad': 25}\n\tfor clave, valor in persona.items():\n\t\tprint(clave, ':', valor)",
                "Recorriendo una cadena:\n\tfor letra in 'Python':\n\t\tprint(letra)",
                "Para iterar de forma descendente:\n\tfor i in range(10, 0, -1):\n\t\tprint(i)"
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_while_en_python",
            "patterns": [
                "Dame ejemplos de un ciclo while en Python.",
                "¿Cómo se usa un ciclo while en Python?",
                "Enséñame ejemplos de bucles while en Python.",
                "Quiero ver un ejemplo práctico de un while en Python.",
                "¿Puedes mostrarme cómo se usa un while en Python?"
            ],
            "responses": [
                "Un ejemplo básico:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
                "Para salir cuando se cumpla una condición:\n\twhile not listo:\n\t\thacer_algo()",
                "Contando hacia atrás:\n\ti = 10\n\twhile i > 0:\n\t\tprint(i)\n\t\ti -= 1",
                "Para procesar elementos de una lista:\n\tfrutas = ['manzana', 'pera', 'plátano']\n\twhile frutas:\n\t\tprint(frutas.pop())",
                "Ciclo infinito (con break para salir):\n\twhile True:\n\t\tcomando = input('>> ')\n\t\tif comando == 'salir':\n\t\t\tbreak"
            ]
        },
        {
            "tag": "ejemplos_de_ciclo_do_while_en_python",
            "patterns": [
                "Dame ejemplos de un ciclo do while en Python.",
                "¿Cómo se usa un ciclo do while en Python?",
                "Enséñame ejemplos de bucles do while en Python.",
                "Quiero ver un ejemplo práctico de un do while en Python.",
                "¿Puedes mostrarme cómo se usa un do while en Python?"
            ],
            "responses": [
                "En Python no existe do while, pero puedes simularlo así:\n\twhile True:\n\t\tprint('Ejecutando')\n\t\tif condicion:\n\t\t\tbreak",
                "Otro ejemplo:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif i >= 5:\n\t\t\tbreak",
                "Simulación para leer datos:\n\twhile True:\n\t\tnumero = int(input('Introduce un número: '))\n\t\tif numero == 0:\n\t\t\tbreak",
                "Ejecutar al menos una vez:\n\twhile True:\n\t\tprocesar()\n\t\tif esta_listo():\n\t\t\tbreak",
                "Contador descendente:\n\ti = 10\n\twhile True:\n\t\tprint(i)\n\t\ti -= 1\n\t\tif i == 0:\n\t\t\tbreak"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_funciones_en_python",
            "patterns": [
                "Dame ejemplos de cómo declarar funciones en Python.",
                "¿Cómo se crean funciones en Python?",
                "Enséñame ejemplos de funciones en Python.",
                "Quiero ver cómo se declaran funciones en Python.",
                "¿Puedes mostrarme ejemplos de funciones en Python?"
            ],
            "responses": [
                "Función básica:\n\tdef saludar():\n\t\tprint('Hola, mundo')",
                "Función con parámetros:\n\tdef sumar(a, b):\n\t\treturn a + b",
                "Función con valores por defecto:\n\tdef presentar(nombre='Anónimo'):\n\t\tprint(f'Hola, {nombre}')",
                "Función lambda:\n\tcuadrado = lambda x: x * x",
                "Función recursiva:\n\tdef factorial(n):\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * factorial(n-1)"
            ]
        },
        {
            "tag": "ejemplos_de_declaracion_de_metodos_en_python",
            "patterns": [
                "Dame ejemplos de cómo declarar métodos en Python.",
                "¿Cómo se crean métodos en Python?",
                "Enséñame ejemplos de métodos en Python.",
                "Quiero ver cómo se declaran métodos en clases.",
                "¿Puedes mostrarme ejemplos de métodos en Python?"
            ],
            "responses": [
                "Método básico:\n\tclass Persona:\n\t\tdef saludar(self):\n\t\t\tprint('Hola')",
                "Método con parámetros:\n\tclass Calculadora:\n\t\tdef sumar(self, a, b):\n\t\t\treturn a + b",
                "Método con inicializador:\n\tclass Persona:\n\t\tdef __init__(self, nombre):\n\t\t\tself.nombre = nombre",
                "Método que usa atributos:\n\tclass Animal:\n\t\tdef __init__(self, especie):\n\t\t\tself.especie = especie\n\t\tdef info(self):\n\t\t\tprint(f'Soy un {self.especie}')",
                "Método estático:\n\tclass Matematica:\n\t\t@staticmethod\n\t\tdef sumar(a, b):\n\t\t\treturn a + b"
            ]
        },
        {
            "tag": "ejemplos_de_creacion_de_clases_en_python",
            "patterns": [
                "Dame ejemplos de cómo crear clases en Python.",
                "¿Cómo se crean clases en Python?",
                "Enséñame ejemplos de clases en Python.",
                "Quiero ver cómo se declaran clases en Python.",
                "¿Puedes mostrarme ejemplos de clases en Python?"
            ],
            "responses": [
                "Clase básica:\n\tclass Persona:\n\t\tpass",
                "Clase con atributos:\n\tclass Persona:\n\t\tdef __init__(self, nombre, edad):\n\t\t\tself.nombre = nombre\n\t\t\tself.edad = edad",
                "Clase con métodos:\n\tclass Persona:\n\t\tdef __init__(self, nombre):\n\t\t\tself.nombre = nombre\n\t\tdef saludar(self):\n\t\t\tprint(f'Hola, soy {self.nombre}')",
                "Clase con herencia:\n\tclass Estudiante(Persona):\n\t\tdef __init__(self, nombre, grado):\n\t\t\tsuper().__init__(nombre)\n\t\t\tself.grado = grado",
                "Clase con método estático:\n\tclass Utilidad:\n\t\t@staticmethod\n\t\tdef sumar(a, b):\n\t\t\treturn a + b"
            ]
        },
        {
            "tag": "hola",
            "patterns": [
                "hola",
                "buenos dias",
                "buenas tardes",
                "buenas noches",
                "hey"
            ],
            "responses": [
                "hola como estas",
                "hola que tal",
                "buenos dias como estas",
                "buenas tardes como estas",
                "buenas noches como estas"
            ]
        },
        {
            "tag": "bien",
            "patterns": [
                "bien"
            ],
            "responses": [
                "me alegra saberlo, dime en que puedo ayudarte, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "que alegria, puedo ayudarte en distintos temas, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "me alegra escuchar eso, puedo ayudarte con el tema de programacion, algoritmos y alguno que otro chiste",
                "estoy aqui para ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste"
            ]
        },
        {
            "tag": "bien y tu",
            "patterns": [
                "bien y tu",
                "bien y tu como estas",
                "bien y tu que tal",
                "bien y tu que cuentas",
                "bien y tu que hay",
                "ahi mas o menos y tu",
                "ahi mas o menos y tu que tal",
                "ahi mas o menos y tu que cuentas",
                "ahi mas o menos y tu que hay",
                "mas o menos y tu",
                "mas o menos y tu como estas",
                "mas o menos y tu que tal",
                "mas o menos y tu que cuentas",
                "mas o menos y tu que hay",
                "regular y tu",
                "regular y tu como estas",
                "regular y tu que tal",
                "regular y tu que cuentas",
                "regular y tu que hay"
            ],
            "responses": [
                "de acuerdo,  dime en que puedo ayudarte, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "que alegria, puedo ayudarte en distintos temas, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "me alegra escuchar eso, puedo ayudarte con el tema de programacion, algoritmos y alguno que otro chiste",
                "estoy aqui para ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste"
            ]
        },
        {
            "tag": "en que puedes ayudarme",
            "patterns": [
                "en que puedes ayudarme"
            ],
            "responses": [
                "puedo responder preguntas, darte informacion y ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "estoy aqui para resolver tus dudas y ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "puedo ayudarte sobre temas como programacion, algoritmos y alguno que otro chiste, estoy aqui para resolver tus dudas y preguntas"
            ]
        },
        {
            "tag": "buenas",
            "patterns": [
                "buenas"
            ],
            "responses": [
                "hola como estas",
                "hola que tal",
                "buenos dias como estas"
            ]
        },
        {
            "tag": "hey",
            "patterns": [
                "hey"
            ],
            "responses": [
                "good morning how are you",
                "hi how are things",
                "hola que tal",
                "hola como estas",
                "buenos dias como estas",
                "Hi, how are you"
            ]
        },
        {
            "tag": "como estas",
            "patterns": [
                "como estas"
            ],
            "responses": [
                "estoy bien gracias por preguntar",
                "todo bien, y tu?"
            ]
        },
        {
            "tag": "todo bien",
            "patterns": [
                "todo bien"
            ],
            "responses": [
                "me alegro, en que puedo ayduarte?",
                "que bueno, en que puedo ayudarte?",
                "me alegra escuchar eso, en que puedo ayudarte?",
                "que alegria, en que puedo ayudarte?"
            ]
        },
        {
            "tag": "adios",
            "patterns": [
                "adios",
                "hasta luego",
                "nos vemos",
                "chao"
            ],
            "responses": [
                "adios cuidate",
                "hasta luego",
                "nos vemos"
            ]
        },
        {
            "tag": "nos vemos",
            "patterns": [
                "nos vemos",
                "hasta luego",
                "chao",
                "adios"
            ],
            "responses": [
                "adios cuidate",
                "hasta luego",
                "nos vemos"
            ]
        },
        {
            "tag": "buenos dias",
            "patterns": [
                "buenos dias"
            ],
            "responses": [
                "hola como estas en este dia",
                "buenos dias como te sientes hoy",
                "buenos dias espero que tengas un excelente dia, puedo ayudarte en temas de programacion, algoritmos y alguno que otro chiste"
            ]
        },
        {
            "tag": "algoritmos",
            "patterns": [
                "que son los algoritmos",
                "explícame qué es un algoritmo",
                "dime que es un algoritmo",
                "dime que son los algoritmos",
                "qué es un algoritmo"
            ],
            "responses": [
                "un algoritmo es una sucesión finita de pasos que resuelve un problema o realiza una tarea",
                "es un conjunto de instrucciones ordenadas y finitas que permiten resolver un problema",
                "los algoritmos son la base de la programación y la resolución de problemas computacionales",
                "son procedimientos bien definidos para realizar una tarea o resolver un problema"
            ]
        },
        {
            "tag": "ejemplo_algoritmos",
            "patterns": [
                "dame un ejemplo de un algoritmo",
                "quiero ver un ejemplo de un algoritmo",
                "explícame un ejemplo de algoritmo",
                "dime un ejemplo de algoritmo",
                "ejemplo de algoritmo"
            ],
            "responses": [
                "un ejemplo sencillo de algoritmo es la suma de dos números",
                "otro ejemplo es el algoritmo de ordenamiento burbuja",
                "un algoritmo común es la búsqueda binaria en un arreglo ordenado",
                "la multiplicación de matrices es un ejemplo de algoritmo más complejo",
                "el algoritmo de Euclides para encontrar el máximo común divisor es otro ejemplo"
            ]
        },
        {
            "tag": "algoritmos_programacion",
            "patterns": [
                "dime nombre de algoritmos de programacion",
                "nombres de algoritmos de programacion",
                "cuales son los algoritmos de programacion mas conocidos",
                "algoritmos de programacion",
                "algoritmos mas conocidos de programacion",
                "dime ejemplos de algoritmos de programacion"
            ],
            "responses": [
                "algunos algoritmos de programación conocidos son: búsqueda binaria, ordenamiento burbuja, quicksort, mergesort, etc.",
                "entre los algoritmos más conocidos de programación están: DFS, BFS, Dijkstra, Floyd-Warshall, etc.",
                "ejemplos de algoritmos de programación son: backtracking, programación dinámica, divide y vencerás, etc.",
                "algoritmos clásicos de programación incluyen: árboles binarios, grafos, listas enlazadas, etc."
            ]
        },
        {
            "tag": "como_te_llamas",
            "patterns": [
                "como te llamas",
                "cual es tu nombre",
                "quien eres",
                "como te dicen",
                "como te llaman"
            ],
            "responses": [
                "soy un asistente virtual pero puedes llamarme bot",
                "me llamo bot, tu asistente",
                "puedes llamarme bot, estoy aquí para ayudarte"
            ]
        },
        {
            "tag": "tienes_algun_nombre",
            "patterns": [
                "tienes algun nombre",
                "cual es tu nombre",
                "quien eres",
                "como te llamas",
                "como te dicen",
                "como te llaman",
                "tienes un nombre",
                "como te identificas"
            ],
            "responses": [
                "soy un asistente virtual pero puedes llamarme bot",
                "me llamo bot, tu asistente",
                "puedes llamarme bot, estoy aquí para ayudarte",
                "me llaman bot, estoy aquí para ayudarte",
                "me identifico como bot, tu asistente virtual"
            ]
        },
        {
            "tag": "quien_eres",
            "patterns": [
                "quien eres",
                "como te llamas",
                "cual es tu nombre",
                "como te dicen",
                "como te llaman"
            ],
            "responses": [
                "soy un asistente virtual pero puedes llamarme bot",
                "me llamo bot, tu asistente",
                "puedes llamarme bot, estoy aquí para ayudarte",
                "me llaman bot, estoy aquí para ayudarte",
                "me identifico como bot, tu asistente virtual",
                "soy un bot, un asistente virtual"
            ]
        },
        {
            "tag": "que_puedes_hacer",
            "patterns": [
                "que puedes hacer",
                "en que me puedes ayudar",
                "que sabes hacer",
                "que tareas puedes realizar",
                "que funciones tienes",
                "que funciones puedes realizar",
                "que puedes hacer por mi",
                "en que me puedes ayudar",
                "que puedes hacer por mi"
            ],
            "responses": [
                "puedo responder preguntas, darte informacion y ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "estoy aqui para resolver tus dudas y ayudarte en lo que necesites, estoy entrenado para temas de programacion, algoritmos y alguno que otro chiste",
                "puedo ayudarte sobre temas como programacion, algoritmos y alguno que otro chiste",
                "puedo ayudarte en temas de programacion, algoritmos y alguno que otro chiste"
            ]
        },
        {
            "tag": "gracias",
            "patterns": [
                "gracias",
                "gracias por tu ayuda",
                "muy amable por tu ayuda",
                "gracias por tu asistencia",
                "gracias por tu apoyo",
                "gracias por tu colaboracion"
            ],
            "responses": [
                "de nada siempre aqui para ayudarte",
                "no hay de que",
                "aqui estoy para lo que necesites",
                "no hay problema, estoy aqui para ayudarte"
            ]
        },
        {
            "tag": "perdon",
            "patterns": [
                "perdon",
                "disculpa",
                "lo siento",
                "perdona"
            ],
            "responses": [
                "no te preocupes todo esta bien",
                "no hay problema, como puedo ayudarte?, estoy entrenado para temas de programacion, algoritmos y uno que otro chiste",
                "no pasa nada, como puedo ayudarte?, estoy entrenado para temas de programacion, algoritmos y uno que otro chiste"
            ]
        },
        {
            "tag": "lo_siento",
            "patterns": [
                "lo siento",
                "perdon",
                "disculpa",
                "perdona"
            ],
            "responses": [
                "no pasa nada, como puedo ayudarte?, estoy entrenado para temas de programacion y uno que otro chiste",
                "no te preocupes, estoy aqui para ayudarte en temas de programacion algo de algoritmos y uno que otro chiste",
                "no hay problema, como puedo ayudarte?, estoy entrenado para temas de programacion, algoritmos y uno que otro chiste"
            ]
        },
        {
            "tag": "que_hora_es",
            "patterns": [
                "que hora es",
                "dime la hora",
                "hora",
                "sabes la hora",
                "me puedes decir la hora"
            ],
            "responses": [
                "lo siento no puedo dar la hora exacta pero puedo ayudarte con otras cosas",
                "no tengo un reloj, pero puedo ayudarte con otra cosa",
                "no tengo la hora exacta, pero puedo ayudarte con algo mas"
            ]
        },
        {
            "tag": "que_dia_es_hoy",
            "patterns": [
                "que dia es hoy",
                "dime el dia de hoy",
                "dia de hoy",
                "sabes que dia es hoy"
            ],
            "responses": [
                "hoy es un gran dia, como puedo ayudarte? estoy entrenado para temas de programacion",
                "hoy es un dia perfecto para aprender algo nuevo",
                "hoy es un dia excelente para aprender algo nuevo, como puedo ayudarte?"
            ]
        },
        {
            "tag": "ayuda",
            "patterns": [
                "ayuda",
                "necesito ayuda",
                "ayudame",
                "me puedes ayudar",
                "requiero ayuda"
            ],
            "responses": [
                "por supuesto dime que necesitas y vere como ayudarte, estoy entrenado para temas de programacion, algoritmos y uno que otro chiste",
                "estoy aqui para lo que necesites, dime como puedo ayudarte, estoy entrenado para temas de programacion, algoritmos y uno que otro chiste",
                "puedo ayudarte en temas de programacion, algoritmos y uno que otro chiste, dime que necesitas"
            ]
        },
        {
            "tag": "estoy_triste",
            "patterns": [
                "estoy triste",
                "me siento triste",
                "triste",
                "me siento solo",
                "me siento mal"
            ],
            "responses": [
                "lo siento mucho si necesitas hablar o apoyo estoy aqui",
                "te entiendo, no estas solo, cuentame mas, quieres saber algo de programacion?, algo de algoritmos o un chiste?",
                "lo siento mucho, si necesitas hablar o apoyo estoy aqui, quieres saber algo de programacion?, algo de algoritmos o un chiste?"
            ]
        },
        {
            "tag": "estoy_feliz",
            "patterns": [
                "estoy feliz",
                "me siento feliz",
                "feliz",
                "me siento bien",
                "me siento genial"
            ],
            "responses": [
                "que alegria escuchar eso, me hace feliz saber que estas bien, en que puedo ayudarte?",
                "eso es genial, me encanta saberlo!, en que puedo ayudarte?",
                "me alegra escuchar eso, quieres saber algo de la programacion?, algo de algoritmos o un chiste?"
            ]
        },
        {
            "tag": "cuentame_un_chiste",
            "patterns": [
                "cuentame un chiste",
                "quiero escuchar un chiste",
                "dime un chiste",
                "quiero reirme",
                "necesito un chiste",
                "di un chiste"
            ],
            "responses": [
                "por que los pajaros no usan facebook porque ya tienen twitter",
                "que hace una abeja en el gimnasio zumba",
                "que hace pepito en la iglesia jugando con el movil, esta en modo avion",
                "que le dice un jardinero a otro jardinero, eres un planta",
                "que le dice un gato a otro gato, eres miau"
            ]
        },
        {
            "tag": "tweet",
            "patterns": [
                "que es un tweet",
                "que es twitter",
                "que es un twit",
                "que es twittear",
                "que es un twittero"
            ],
            "responses": [
                "un tweet es un mensaje corto que se publica en la red social twitter",
                "twitter es una red social donde los usuarios pueden publicar mensajes cortos llamados tweets",
                "twittear es el acto de publicar un mensaje en la red social twitter",
                "un twittero es una persona que usa la red social twitter para publicar mensajes"
            ]
        },
        {
            "tag": "iglesia",
            "patterns": [
                "que es una iglesia",
                "que es una iglesia catolica",
                "que es una iglesia evangelica"
            ],
            "responses": [
                "una iglesia es un lugar de culto religioso donde los fieles se reúnen para orar y adorar a Dios",
                "la iglesia católica es una de las ramas del cristianismo que sigue la doctrina y enseñanzas de Jesucristo",
                "la iglesia evangélica es una rama del cristianismo que se caracteriza por su énfasis en la predicación del evangelio y la conversión de los fieles"
            ]
        },
        {
            "tag": "dime_un_chiste",
            "patterns": [
                "dime un chiste"
            ],
            "responses": [
                "por que los pajaros no usan facebook porque ya tienen twitter",
                "que hace una abeja en el gimnasio zumba"
            ]
        },
        {
            "tag": "cuentame_otro_chiste",
            "patterns": [
                "cuentame otro chiste",
                "dime otro chiste",
                "quiero escuchar otro chiste",
                "otro chiste",
                "di otro chiste"
            ],
            "responses": [
                "por que los pajaros no usan facebook porque ya tienen twitter",
                "que hace una abeja en el gimnasio zumba"
            ]
        },
        {
            "tag": "que_son_los_pajaros",
            "patterns": [
                "que son los pajaros",
                "que son las aves",
                "que es un pajaro",
                "que es un ave"
            ],
            "responses": [
                "los pajaros son animales voladores que tienen plumas y pico",
                "los pajaros son animales que vuelan y tienen plumas",
                "son animales que vuelan y tienen plumas, alas y generalmente la capacidad de volar"
            ]
        },
        {
            "tag": "que_es_un_pajaro",
            "patterns": [
                "que es un pajaro"
            ],
            "responses": [
                "un pajaro es un animal volador que tiene plumas y pico",
                "un pajaro es un animal que vuela y tienen pluma",
                "un pajaro es un animal vertebrado con plumas alas y generalmente la capacidad de volar"
            ]
        },
        {
            "tag": "que_es_facebook",
            "patterns": [
                "que es facebook",
                "que es una red social",
                "que es una red social llamada facebook",
                "facebook"
            ],
            "responses": [
                "facebook es una red social donde las personas pueden compartir contenido interactuar y conectar"
            ]
        },
        {
            "tag": "red_social",
            "patterns": [
                "que es una red social"
            ],
            "responses": [
                "una red social es una plataforma digital donde las personas pueden interactuar compartir ideas contenido y comunicarse entre si"
            ]
        },
        {
            "tag": "redes_sociales",
            "patterns": [
                "que son las redes sociales"
            ],
            "responses": [
                "las redes sociales son plataformas digitales que permiten a los usuarios conectarse compartir contenido y comunicarse entre ellos"
            ]
        },
        {
            "tag": "personas",
            "patterns": [
                "que son las personas",
                "que es una persona",
                "que es un ser humano"
            ],
            "responses": [
                "las personas son seres humanos que poseen capacidades de pensamiento razonamiento y comunicacion"
            ]
        },
        {
            "tag": "compartir",
            "patterns": [
                "que significa compartir",
                "que es compartir",
                "compartir"
            ],
            "responses": [
                "compartir significa poner algo a disposicion de otros para que lo usen o disfruten en conjunto"
            ]
        },
        {
            "tag": "conectar",
            "patterns": [
                "que es conectar",
                "que significa conectar",
                "conectar"
            ],
            "responses": [
                "conectar es establecer una relacion o vinculo entre dos o mas elementos"
            ]
        },
        {
            "tag": "conectar",
            "patterns": [
                "que significa conectar",
                "conectar"
            ],
            "responses": [
                "conectar significa unir o enlazar cosas personas o ideas para que interactuen o trabajen en conjunto"
            ]
        },
        {
            "tag": "que_es_twitter",
            "patterns": [
                "que es twitter",
                "twitter"
            ],
            "responses": [
                "twitter es una plataforma donde los usuarios pueden publicar mensajes cortos llamados tweets"
            ]
        },
        {
            "tag": "por_que_los_pajaros_no_usan_facebook",
            "patterns": [
                "por que los pajaros no usan facebook"
            ],
            "responses": [
                "porque ya tienen twitter"
            ]
        },
        {
            "tag": "que_hace_una_abeja_en_el_gimnasio",
            "patterns": [
                "que hace una abeja en el gimnasio"
            ],
            "responses": [
                "zumba"
            ]
        },
        {
            "tag": "zumba",
            "patterns": [
                "que es la zumba",
                "que es zumba",
                "zumba"
            ],
            "responses": [
                "la zumba es una actividad fisica que combina baile y ejercicio al ritmo de musica latina"
            ]
        },
        {
            "tag": "abejas",
            "patterns": [
                "que son las abejas",
                "que es una abeja",
                "que hacen las abejas",
                "abejas",
                "que hace la abeja"
            ],
            "responses": [
                "las abejas son insectos polinizadores que juegan un papel crucial en el ecosistema y producen miel"
            ]
        },
        {
            "tag": "que_hacen_los_pajaros_en_redes_sociales",
            "patterns": [
                "que hacen los pajaros en redes sociales"
            ],
            "responses": [
                "en este contexto los pajaros usan twitter como parte del chiste"
            ]
        },
        {
            "tag": "que_es_un_gimnasio",
            "patterns": [
                "que es un gimnasio",
                "gimnasio"
            ],
            "responses": [
                "un gimnasio es un lugar donde las personas van a ejercitarse y mejorar su condicion fisica"
            ]
        },
        {
            "tag": "estoy animado",
            "patterns": [
                "estoy animado",
                "me siento animado",
                "animado",
                "me siento bien",
                "me siento genial"
            ],
            "responses": [
                "que alegria escuchar eso, me hace feliz saber que estas bien",
                "eso es genial, me encanta saberlo!",
                "me alegra escuchar eso, quieres saber algo de la programacion?, algo de algoritmos o un chiste?"
            ]
        },
        {
            "tag": "estoy de maravilla",
            "patterns": [
                "estoy de maravilla",
                "me siento de maravilla",
                "de maravilla",
                "me siento genial",
                "me siento excelente"
            ],
            "responses": [
                "que alegria escuchar eso, me hace feliz saber que estas bien",
                "eso es genial, me encanta saberlo!",
                "me alegra escuchar eso, quieres saber algo de la programacion?, algo de algoritmos o un chiste?",
                "me alegra escuchar eso, en que puedo ayudarte?"
            ]
        },
        {
            "tag": "que dia tenemos",
            "patterns": [
                "que dia tenemos",
                "que dia es hoy",
                "dime el dia de hoy",
                "dia de hoy",
                "sabes que dia es hoy"
            ],
            "responses": [
                "hoy es un gran dia, como puedo ayudarte?",
                "hoy es un dia perfecto para aprender algo nuevo"
            ]
        },
        {
            "tag": "que dia es",
            "patterns": [
                "que dia es"
            ],
            "responses": [
                "hoy es un gran dia, como puedo ayudarte?, quieres saber sobre que es la programacion",
                "hoy es un dia perfecto para aprender algo nuevo"
            ]
        },
        {
            "tag": "si",
            "patterns": [
                "que es un if en programacion",
                "que es un if",
                "que es un if en python"
            ],
            "responses": [
                "el if es una estructura de control que permite tomar decisiones en un programa",
                "el if es una instruccion que permite ejecutar un bloque de codigo si se cumple una condicion",
                "el if es una estructura de control que permite ejecutar un bloque de codigo si se cumple una condicion"
            ]
        },
        {
            "tag": "estas disponible",
            "patterns": [
                "estas disponible"
            ],
            "responses": [
                "claro que si estoy aqui para ayudarte, estoy entrenado para temas de programacion y uno que otro chiste o algoritmos",
                "estoy disponible, dime en qué puedo ayudarte, puedo ayudarte en temas de programacion, algoritmos y uno que otro chiste"
            ]
        },
        {
            "tag": "me_puedes_ayudar",
            "patterns": [
                "me puedes ayudar"
            ],
            "responses": [
                "por supuesto dime que necesitas y vere como ayudarte",
                "estoy aqui para lo que necesites, dime como puedo ayudarte"
            ]
        },
        {
            "tag": "me_ayudas",
            "patterns": [
                "me ayudas"
            ],
            "responses": [
                "por supuesto dime que necesitas y vere como ayudarte",
                "estoy aqui para lo que necesites, dime como puedo ayudarte"
            ]
        },
        {
            "tag": "ayudame",
            "patterns": [
                "ayudame"
            ],
            "responses": [
                "por supuesto dime que necesitas y vere como ayudarte, estoy entrenado para temas de programacion y uno que otro chiste",
                "estoy aqui para lo que necesites, dime como puedo ayudarte, estoy entrenado para temas de programacion y uno que otro chiste"
            ]
        },
        {
            "tag": "hola_puedo_preguntarte_algo",
            "patterns": [
                "hola puedo preguntarte algo",
                "hola puedo hacerte una pregunta",
                "hola puedo preguntarte algo"
            ],
            "responses": [
                "claro que si estoy aqui para responder tus preguntas"
            ]
        },
        {
            "tag": "por_que_existes",
            "patterns": [
                "por que existes"
            ],
            "responses": [
                "fui creado para ayudarte y mejorar tus interacciones con la tecnologia"
            ]
        },
        {
            "tag": "que_es_la_programacion",
            "patterns": [
                "que es la programacion",
                "que es programar",
                "que es programacion",
                "programar",
                "programacion"
            ],
            "responses": [
                "Es la creación de código para resolver problemas o automatizar tareas en una computadora.",
                "Es el proceso de escribir instrucciones que una computadora puede entender."
            ]
        },
        {
            "tag": "que_es_instrucciones",
            "patterns": [
                "que es instrucciones",
                "que son instrucciones",
                "que es una instruccion",
                "que son las instrucciones"
            ],
            "responses": [
                "Son indicaciones específicas que le dicen a una computadora qué hacer paso a paso.",
                "Son órdenes organizadas que una máquina o persona sigue para realizar una tarea."
            ]
        },
        {
            "tag": "que_es_una_computadora",
            "patterns": [
                "que es una computadora",
                "que es una pc",
                "que es un ordenador",
                "que es una laptop",
                "que es una computadora portatil"
            ],
            "responses": [
                "Es un dispositivo electrónico capaz de procesar y almacenar datos siguiendo instrucciones.",
                "Es una máquina diseñada para realizar cálculos y ejecutar programas de software."
            ]
        },
        {
            "tag": "codigo",
            "patterns": [
                "que significa la creacion de codigo",
                "que es codigo",
                "que es programar",
                "que es la creacion de codigo",
                "que es escribir codigo"
            ],
            "responses": [
                "Es el proceso de escribir líneas de texto en un lenguaje de programación para construir software.",
                "Es desarrollar instrucciones que definen cómo debe funcionar un programa o sistema."
            ]
        },
        {
            "tag": "que_es_automatizar",
            "patterns": [
                "que es automatizar",
                "que significa automatizar",
                "que es la automatizacion",
                "que significa la automatizacion"
            ],
            "responses": [
                "Es hacer que procesos o tareas se realicen automáticamente sin intervención humana constante.",
                "Es usar tecnología para ejecutar actividades repetitivas de manera eficiente."
            ]
        },
        {
            "tag": "dispositivo electronico",
            "patterns": [
                "que es un dispositivo electronico",
                "que es un dispositivo digital",
                "que es un dispositivo tecnologico",
                "que es un dispositivo electronico"
            ],
            "responses": [
                "Es un aparato que funciona con electricidad y realiza tareas específicas mediante circuitos electrónicos.",
                "Es una máquina que usa componentes eléctricos y electrónicos para procesar información o realizar acciones."
            ]
        },
        {
            "tag": "procesar_informacion",
            "patterns": [
                "que significa procesar informacion",
                "que es procesar informacion",
                "que es procesar datos",
                "que significa procesar datos"
            ],
            "responses": [
                "Es realizar operaciones sobre datos para transformarlos en información útil.",
                "Es aplicar algoritmos o reglas para analizar, organizar o convertir datos."
            ]
        },
        {
            "tag": "almacenar_datos",
            "patterns": [
                "que es almacenar datos",
                "que significa almacenar datos",
                "que es guardar datos",
                "que significa guardar datos"
            ],
            "responses": [
                "Es guardar información en un medio físico o digital para su uso futuro.",
                "Es conservar datos de manera organizada para acceder a ellos cuando se necesiten."
            ]
        },
        {
            "tag": "informacion_util",
            "patterns": [
                "que es informacion util",
                "que significa informacion util",
                "que es informacion valiosa",
                "que significa informacion valiosa"
            ],
            "responses": [
                "Es conocimiento derivado de datos que tiene valor para tomar decisiones o resolver problemas.",
                "Es el resultado de procesar datos de manera que sean comprensibles y accionables."
            ]
        },
        {
            "tag": "conocimiento_derivado",
            "patterns": [
                "que es conocimiento derivado",
                "que significa conocimiento derivado",
                "que es conocimiento obtenido",
                "que significa conocimiento obtenido"
            ],
            "responses": [
                "Es información obtenida al procesar y analizar datos de forma lógica y sistemática.",
                "Es el entendimiento generado a partir de datos que tienen un contexto o un propósito."
            ]
        },
        {
            "tag": "tarea_automatica",
            "patterns": [
                "que es una tarea automatica",
                "que significa tarea automatica",
                "que es una actividad automatica",
                "que significa actividad automatica"
            ],
            "responses": [
                "Es una actividad que se realiza sin necesidad de intervención humana continua.",
                "Es un proceso que se ejecuta de manera independiente mediante programación o dispositivos."
            ]
        },
        {
            "tag": "pasos_organizados",
            "patterns": [
                "que son pasos organizados",
                "que significa pasos organizados",
                "que son instrucciones estructuradas",
                "que significa instrucciones estructuradas"
            ],
            "responses": [
                "Son acciones dispuestas en un orden lógico para alcanzar un objetivo específico.",
                "Son instrucciones estructuradas que garantizan que un proceso se realice de manera efectiva."
            ]
        },
        {
            "tag": "que_significa_tomar_decisiones",
            "patterns": [
                "que significa tomar decisiones",
                "que es tomar decisiones",
                "que es elegir una opcion",
                "que significa elegir una opcion"
            ],
            "responses": [
                "Es el proceso de elegir una opción entre varias alternativas disponibles.",
                "Es analizar información para seleccionar la acción más adecuada en una situación dada."
            ]
        },
        {
            "tag": "analizar_datos",
            "patterns": [
                "que es analizar datos",
                "que significa analizar datos",
                "que es examinar informacion",
                "que significa examinar informacion"
            ],
            "responses": [
                "Es examinar información detalladamente para extraer patrones, tendencias o conclusiones.",
                "Es el proceso de evaluar datos para comprenderlos y utilizarlos en la toma de decisiones."
            ]
        },
        {
            "tag": "medio_digital",
            "patterns": [
                "que es un medio digital",
                "que significa medio digital",
                "que es un soporte digital",
                "que significa soporte digital"
            ],
            "responses": [
                "Es un soporte electrónico como discos duros, la nube o dispositivos USB donde se almacena información.",
                "Es un entorno basado en tecnología digital que permite guardar y transmitir datos."
            ]
        },
        {
            "tag": "transformar_datos",
            "patterns": [
                "que significa transformar datos",
                "que es transformar datos",
                "que es modificar informacion",
                "que significa modificar informacion"
            ],
            "responses": [
                "Es modificar o reorganizar información para cambiar su formato, estructura o propósito.",
                "Es convertir datos en una forma más útil o comprensible para análisis o uso."
            ]
        },
        {
            "tag": "tarea_repetitiva",
            "patterns": [
                "que es una tarea repetitiva",
                "que significa tarea repetitiva",
                "que es una actividad repetitiva",
                "que significa actividad repetitiva"
            ],
            "responses": [
                "Es una acción que se realiza una y otra vez de manera similar o idéntica.",
                "Es un proceso que no cambia con el tiempo y que suele ser automatizable."
            ]
        },
        {
            "tag": "automatizable",
            "patterns": [
                "que es automatizable",
                "que significa automatizable",
                "que es una tarea automatizable",
                "que significa una tarea automatizable"
            ],
            "responses": [
                "Es algo que puede configurarse para ejecutarse automáticamente sin intervención humana.",
                "Es una actividad susceptible de ser realizada por sistemas tecnológicos de forma autónoma."
            ]
        },
        {
            "tag": "reglas_organizadas",
            "patterns": [
                "que son reglas organizadas",
                "que significa reglas organizadas",
                "que son normas estructuradas",
                "que significa normas estructuradas"
            ],
            "responses": [
                "Son normas dispuestas de forma lógica y estructurada para garantizar un funcionamiento eficiente.",
                "Son principios que definen un orden para realizar tareas de manera efectiva."
            ]
        },
        {
            "tag": "realizar_tareas",
            "patterns": [
                "que significa realizar tareas",
                "que es realizar tareas",
                "que es ejecutar actividades",
                "que significa ejecutar actividades"
            ],
            "responses": [
                "Es ejecutar actividades o acciones específicas para cumplir con un objetivo.",
                "Es llevar a cabo un conjunto de pasos que conducen a un resultado esperado."
            ]
        },
        {
            "tag": "actividad_estructurada",
            "patterns": [
                "que es una actividad estructurada",
                "que significa actividad estructurada",
                "que es una tarea organizada",
                "que significa tarea organizada"
            ],
            "responses": [
                "Es una acción planificada con un inicio, desarrollo y final definidos.",
                "Es un conjunto de pasos organizados para lograr un propósito claro."
            ]
        },
        {
            "tag": "identificar_patrones",
            "patterns": [
                "que es identificar patrones",
                "que significa identificar patrones",
                "que es reconocer estructuras",
                "que significa reconocer estructuras"
            ],
            "responses": [
                "Es reconocer estructuras o repeticiones dentro de un conjunto de datos o información.",
                "Es detectar similitudes o regularidades que ayuden a interpretar o predecir comportamientos."
            ]
        },
        {
            "tag": "que_es_codigo",
            "patterns": [
                "que es codigo",
                "que es un codigo",
                "que es un codigo de programacion",
                "que es un codigo informatico"
            ],
            "responses": [
                "Es un conjunto de instrucciones escritas en un lenguaje de programación para ser ejecutadas por una computadora.",
                "Es una representación estructurada de órdenes que permiten realizar tareas o resolver problemas mediante software."
            ]
        },
        {
            "tag": "conjunto_de_instrucciones",
            "patterns": [
                "que es un conjunto de instrucciones",
                "que significa un conjunto de instrucciones",
                "que es un grupo de ordenes",
                "que significa un grupo de ordenes",
                "que son las instrucciones",
                "que son las ordenes"
            ],
            "responses": [
                "Son varias órdenes organizadas que, al ser ejecutadas, logran un objetivo o completan una tarea.",
                "Es una secuencia de pasos que indica a una computadora cómo realizar una acción específica."
            ]
        },
        {
            "tag": "representacion_estructurada",
            "patterns": [
                "que es una representacion estructurada",
                "que significa una representacion estructurada",
                "que es un modelo organizado",
                "que significa un modelo organizado"
            ],
            "responses": [
                "Es una forma organizada de presentar información o datos siguiendo un esquema lógico.",
                "Es un modelo o formato claro y ordenado que facilita la comprensión y ejecución de un proceso."
            ]
        },
        {
            "tag": "que_significa_ser_ejecutadas",
            "patterns": [
                "que significa ser ejecutadas",
                "que es ejecutar",
                "que significa ejecutar",
                "que es llevar a cabo",
                "que significa llevar a cabo"
            ],
            "responses": [
                "Es llevar a cabo las instrucciones de un código para que se realicen las acciones indicadas.",
                "Es procesar las órdenes de un programa para generar resultados o realizar tareas."
            ]
        },
        {
            "tag": "que_son_ordenes",
            "patterns": [
                "que son ordenes",
                "que es una orden",
                "que significa orden",
                "que es una instruccion",
                "que significa instruccion"
            ],
            "responses": [
                "Son comandos específicos que indican a una computadora qué hacer y cómo hacerlo.",
                "Son instrucciones puntuales que se deben seguir para completar un proceso."
            ]
        },
        {
            "tag": "tareas_mediante_software",
            "patterns": [
                "que significa realizar tareas mediante software",
                "que es realizar tareas con software",
                "que es ejecutar acciones con programas",
                "que significa ejecutar acciones con programas"
            ],
            "responses": [
                "Es usar programas o aplicaciones para ejecutar actividades o resolver problemas automáticamente.",
                "Es emplear herramientas tecnológicas para llevar a cabo acciones específicas de manera eficiente."
            ]
        },
        {
            "tag": "computadora_ejecutando_codigo",
            "patterns": [
                "que es una computadora ejecutando codigo",
                "que significa una computadora ejecutando codigo",
                "que es una pc procesando instrucciones",
                "que significa una pc procesando instrucciones"
            ],
            "responses": [
                "Es un dispositivo procesando instrucciones escritas en un lenguaje de programación.",
                "Es el acto de interpretar y seguir las órdenes definidas en un código para realizar acciones."
            ]
        },
        {
            "tag": "procesar_instrucciones",
            "patterns": [
                "que significa procesar instrucciones",
                "que es procesar instrucciones",
                "que es interpretar instrucciones",
                "que significa interpretar instrucciones"
            ],
            "responses": [
                "Es interpretar y realizar las acciones indicadas por un conjunto de órdenes.",
                "Es ejecutar pasos definidos en un código para producir resultados específicos."
            ]
        },
        {
            "tag": "problemas_con_codigo",
            "patterns": [
                "que es resolver problemas con codigo",
                "que significa resolver problemas con codigo",
                "que es solucionar desafios con programacion",
                "que significa solucionar desafios con programacion"
            ],
            "responses": [
                "Es escribir y ejecutar instrucciones para encontrar soluciones a desafíos o necesidades.",
                "Es usar lenguajes de programación para automatizar procesos o crear herramientas que simplifiquen tareas."
            ]
        },
        {
            "tag": "escribir_un_conjunto_de_ordenes",
            "patterns": [
                "que significa escribir un conjunto de ordenes",
                "que es escribir un conjunto de ordenes",
                "que es redactar instrucciones",
                "que significa redactar instrucciones"
            ],
            "responses": [
                "Es redactar instrucciones en un lenguaje de programación para que una computadora las entienda.",
                "Es diseñar una secuencia lógica de pasos para lograr un objetivo o realizar una tarea."
            ]
        },
        {
            "tag": "modelo_ordenado",
            "patterns": [
                "que es un modelo ordenado",
                "que significa un modelo ordenado",
                "que es una estructura organizada",
                "que significa una estructura organizada"
            ],
            "responses": [
                "Es una estructura organizada que facilita la comprensión y ejecución de un proceso.",
                "Es un esquema lógico que define cómo deben realizarse tareas o procesarse datos."
            ]
        },
        {
            "tag": "que_es_un_algoritmo",
            "patterns": [
                "que es un algoritmo",
                "que es un algoritmo en programacion",
                "que es un algoritmo informatico",
                "que es un algoritmo de computadora",
                "algoritmo"
            ],
            "responses": [
                "es una secuencia de pasos definidos para resolver un problema",
                "es un conjunto de instrucciones que se ejecutan en orden para alcanzar un objetivo",
                "es una serie de pasos logicos que describen como resolver una tarea especifica"
            ]
        },
        {
            "tag": "conjunto_de_pasos",
            "patterns": [
                "que significa un conjunto de pasos",
                "que es un conjunto de pasos",
                "que es una secuencia de pasos",
                "que significa una secuencia de pasos"
            ],
            "responses": [
                "Son varias acciones organizadas en un orden lógico para lograr un resultado.",
                "Es una serie de etapas que se deben seguir para completar una tarea o resolver un problema."
            ]
        },
        {
            "tag": "manera_logica",
            "patterns": [
                "que significa definido de manera logica",
                "que es definido de manera logica",
                "que es estructurado de forma logica",
                "que significa estructurado de forma logica"
            ],
            "responses": [
                "Es estructurado de forma clara y coherente, siguiendo reglas o principios razonables.",
                "Es diseñado para que cada paso tenga sentido y esté alineado con el objetivo final."
            ]
        },
        {
            "tag": "resolver_un_problema_con_un_algoritmo",
            "patterns": [
                "que significa resolver un problema con un algoritmo",
                "que es resolver un problema con un algoritmo",
                "que es solucionar un problema con un algoritmo",
                "que significa solucionar un problema con un algoritmo"
            ],
            "responses": [
                "Es usar una secuencia de pasos claros para encontrar una solución a una dificultad o necesidad.",
                "Es aplicar un conjunto de instrucciones organizadas para superar un reto o cumplir un propósito."
            ]
        },
        {
            "tag": "pasos_escritos",
            "patterns": [
                "que significa una serie de pasos escritos",
                "que es una serie de pasos escritos",
                "que es una lista de pasos detallados",
                "que significa una lista de pasos detallados"
            ],
            "responses": [
                "Es una lista de acciones detalladas redactadas en un formato que puede ser entendido y seguido.",
                "Es un grupo de instrucciones documentadas de manera clara y organizada."
            ]
        },
        {
            "tag": "interpretar_un_algoritmo",
            "patterns": [
                "que significa interpretar un algoritmo",
                "que es interpretar un algoritmo",
                "que es analizar un algoritmo",
                "que significa analizar un algoritmo"
            ],
            "responses": [
                "Es analizar cada paso de un conjunto de instrucciones para ejecutarlo de manera adecuada.",
                "Es convertir las acciones definidas en un algoritmo en operaciones que la computadora pueda realizar."
            ]
        },
        {
            "tag": "ejecutar_un_algoritmo",
            "patterns": [
                "que es ejecutar un algoritmo",
                "que significa ejecutar un algoritmo",
                "que es aplicar un algoritmo",
                "que significa aplicar un algoritmo"
            ],
            "responses": [
                "Es realizar los pasos definidos en un algoritmo para obtener un resultado.",
                "Es seguir las instrucciones de un algoritmo para resolver un problema o completar una tarea."
            ]
        },
        {
            "tag": "sirve_un_algoritmo",
            "patterns": [
                "para que sirve un algoritmo",
                "que es la utilidad de un algoritmo",
                "que es la funcion de un algoritmo",
                "que es la finalidad de un algoritmo"
            ],
            "responses": [
                "sirve para resolver problemas de manera estructurada y eficiente",
                "se utiliza para automatizar tareas y encontrar soluciones a problemas complejos",
                "es esencial para crear programas y sistemas que resuelvan problemas especificos"
            ]
        },
        {
            "tag": "caracteristicas_de_un_algoritmo",
            "patterns": [
                "cuales son las caracteristicas de un algoritmo",
                "que caracteristicas tiene un algoritmo",
                "que debe tener un algoritmo"
            ],
            "responses": [
                "debe ser finito, tener pasos bien definidos y ser preciso",
                "tiene un inicio y un fin, y debe producir un resultado correcto",
                "debe ser claro, eficiente y aplicable en cualquier contexto definido"
            ]
        },
        {
            "tag": "tipos_de_algoritmos",
            "patterns": [
                "cuales son los tipos de algoritmos",
                "que tipos de algoritmos existen",
                "que clasificaciones tienen los algoritmos"
            ],
            "responses": [
                "algunos tipos son los algoritmos recursivos, iterativos, voraces y dinamicos",
                "pueden ser de busqueda, ordenamiento, optimizacion o generacion",
                "se clasifican segun su enfoque como divide y venceras, backtracking o algoritmos probabilisticos"
            ]
        },
        {
            "tag": "algoritmo_recursivo",
            "patterns": [
                "que es un algoritmo recursivo",
                "que significa recursividad en algoritmos",
                "que es la recursividad"
            ],
            "responses": [
                "es un algoritmo que se llama a si mismo para resolver un problema",
                "es un tipo de algoritmo que divide un problema grande en subproblemas mas pequeños",
                "se basa en definirse en terminos de si mismo hasta alcanzar un caso base"
            ]
        },
        {
            "tag": "algoritmos_recursivos",
            "patterns": [
                "que ejemplos hay de algoritmos recursivos",
                "dime ejemplo9s de algoritmos recursivos",
                "di ejemplos de algoritmos recursivos",
                "ejemplos de algoritmos recursivos"
            ],
            "responses": [
                "el calculo del factorial de un numero es un ejemplo clasico",
                "la sucesion de fibonacci se puede resolver con un algoritmo recursivo",
                "la busqueda en profundidad en un grafo es otro ejemplo comun"
            ]
        },
        {
            "tag": "algoritmo_de_ordenamiento",
            "patterns": [
                "que es un algoritmo de ordenamiento",
                "que significa ordenar datos",
                "que es la ordenacion de datos",
                "algoritmo de ordenamiento"
            ],
            "responses": [
                "es un algoritmo diseñado para reorganizar elementos en un orden especifico",
                "sirve para ordenar datos de forma ascendente o descendente",
                "es una tecnica para organizar listas de datos como numeros o cadenas"
            ]
        },
        {
            "tag": "algoritmos_de_ordenamiento_mas_comunes",
            "patterns": [
                "cuales son los algoritmos de ordenamiento mas comunes",
                "que algoritmos de ordenamiento son populares",
                "algoritmos de ordenamiento populares",
                "dime algoritmos de ordenamiento comunes",
                "algoritmos de ordenamiento mas usados"
            ],
            "responses": [
                "algunos son quicksort, mergesort, bubble sort y insertion sort",
                "los mas comunes incluyen quicksort, heapsort y selection sort",
                "puedes encontrar algoritmos como merge sort y radix sort entre los mas usados"
            ]
        },
        {
            "tag": "que_es_quicksort",
            "patterns": [
                "que es quicksort",
                "que significa quicksort",
                "que es el algoritmo quicksort"
            ],
            "responses": [
                "es un algoritmo de ordenamiento basado en divide y venceras",
                "organiza los elementos seleccionando un pivote y particionando los datos alrededor de el",
                "es un metodo eficiente para ordenar listas grandes de datos"
            ]
        },
        {
            "tag": "complejidad_de_quicksort",
            "patterns": [
                "cual es la complejidad de quicksort",
                "que complejidad tiene quicksort",
                "cuanto es la complejidad de quicksort"
            ],
            "responses": [
                "en el mejor caso y promedio es o n log n",
                "en el peor caso puede ser o n al cuadrado si los pivotes se eligen mal",
                "es eficiente en la mayoria de los casos pero depende de como se seleccionen los pivotes"
            ]
        },
        {
            "tag": "algoritmo_voraz",
            "patterns": [
                "que es un algoritmo voraz",
                "que significa voracidad en algoritmos",
                "que es la voracidad"
            ],
            "responses": [
                "es un algoritmo que toma decisiones optimas en cada paso con la esperanza de encontrar la solucion global optima",
                "se utiliza en problemas donde las soluciones parciales optimas llevan a la solucion completa",
                "es un enfoque para resolver problemas dividiendo la solucion en pasos secuenciales"
            ]
        },
        {
            "tag": "ejemplos_de_algoritmos_voraces",
            "patterns": [
                "cuales son ejemplos de algoritmos voraces",
                "que ejemplos hay de algoritmos voraces",
                "dime ejemplos de algoritmos voraces",
                "ejemplos de algoritmos voraces",
                "di ejemplos de algoritmos voraces"
            ],
            "responses": [
                "el algoritmo de dijkstra para encontrar el camino mas corto en un grafo",
                "el problema de la mochila fraccional puede resolverse con un enfoque voraz",
                "el algoritmo de kruskal para arboles de expansion minima es otro ejemplo"
            ]
        },
        {
            "tag": "diferencia_entre_algoritmos_voraces_dinamicos",
            "patterns": [
                "que diferencia hay entre algoritmos voraces y dinamicos",
                "cual es la diferencia entre algoritmos voraces y dinamicos",
                "que distingue a los algoritmos voraces de los dinamicos"
            ],
            "responses": [
                "los algoritmos voraces toman decisiones paso a paso, mientras que los dinamicos resuelven subproblemas y combinan soluciones",
                "los voraces buscan soluciones optimas inmediatas, los dinamicos almacenan resultados intermedios para optimizar el proceso",
                "los voraces son mas simples pero no siempre garantizan la solucion optima como los dinamicos"
            ]
        },
        {
            "tag": "algoritmo_dinamico",
            "patterns": [
                "que es un algoritmo dinamico",
                "que significa dinamismo en algoritmos",
                "que es la programacion dinamica"
            ],
            "responses": [
                "es un metodo para resolver problemas dividiendolos en subproblemas y almacenando sus soluciones",
                "es un enfoque que evita recomputaciones al guardar resultados en memoria",
                "se utiliza para problemas que tienen subproblemas solapados y propiedades de optimizacion"
            ]
        },
        {
            "tag": "ejemplos_algoritmos_dinamicos",
            "patterns": [
                "que ejemplos hay de algoritmos dinamicos",
                "cuales son ejemplos de algoritmos dinamicos",
                "dime ejemplos de algoritmos dinamicos",
                "ejemplos de algoritmos dinamicos",
                "di ejemplos de algoritmos dinamicos"
            ],
            "responses": [
                "el algoritmo de floyd-warshall para caminos mas cortos en grafos",
                "la solucion al problema de la mochila entera es un clasico de la programacion dinamica",
                "el calculo de la sucesion de fibonacci con memoizacion es otro ejemplo"
            ]
        },
        {
            "tag": "instrucciones_algoritmo",
            "patterns": [
                "que tipos de instrucciones tiene un algoritmo",
                "que instrucciones tiene un algoritmo",
                "que acciones se incluyen en un algoritmo"
            ],
            "responses": [
                "puede tener instrucciones secuenciales, condicionales y repetitivas",
                "las instrucciones se clasifican en secuenciales, de decision y de repeticion",
                "puede incluir instrucciones de flujo lineal, bifurcaciones y bucles"
            ]
        },
        {
            "tag": "instruccion_secuencial",
            "patterns": [
                "que es una instruccion secuencial",
                "que significa secuencial en algoritmos",
                "que es una secuencia de instrucciones"
            ],
            "responses": [
                "es una instruccion que se ejecuta una tras otra en el orden en que aparecen",
                "son pasos que se siguen de manera lineal sin desviarse",
                "es un tipo de instruccion donde cada accion ocurre exactamente una vez"
            ]
        },
        {
            "tag": "transformar_conjunto_instrucciones",
            "patterns": [
                "que significa transformar un conjunto de instrucciones",
                "que es transformar instrucciones",
                "que es modificar un conjunto de ordenes"
            ],
            "responses": [
                "Es modificar las órdenes para adaptarlas a un formato o contexto específico.",
                "Es convertir pasos definidos en una estructura que pueda ser procesada o ejecutada."
            ]
        },
        {
            "tag": "formato_especifico",
            "patterns": [
                "que es un formato especifico",
                "que significa un formato especifico",
                "que es un esquema detallado"
            ],
            "responses": [
                "Es una estructura definida que organiza información de manera que pueda ser interpretada correctamente.",
                "Es una disposición estándar que asegura que los datos sean entendidos o utilizados adecuadamente."
            ]
        },
        {
            "tag": "estructura_definida",
            "patterns": [
                "que es una estructura definida",
                "que significa una estructura definida",
                "que es una organizacion clara"
            ],
            "responses": [
                "Es un esquema previamente diseñado que organiza elementos de manera coherente.",
                "Es un marco lógico que establece cómo deben ordenarse las partes de un sistema o proceso."
            ]
        },
        {
            "tag": "modificar_algoritmo",
            "patterns": [
                "que significa modificar un algoritmo",
                "que es modificar un algoritmo",
                "que es cambiar un conjunto de instrucciones"
            ],
            "responses": [
                "Es ajustar los pasos de un conjunto de instrucciones para adaptarlos a nuevas necesidades o mejorar su eficiencia.",
                "Es cambiar la lógica o estructura de un algoritmo para optimizar su funcionamiento."
            ]
        },
        {
            "tag": "optimizar_algoritmo",
            "patterns": [
                "que significa optimizar un algoritmo",
                "que es optimizar un algoritmo",
                "que es mejorar un conjunto de instrucciones"
            ],
            "responses": [
                "Es mejorar un conjunto de instrucciones para que sea más rápido o eficiente al resolver un problema.",
                "Es reducir el tiempo o los recursos necesarios para ejecutar un algoritmo manteniendo su funcionalidad."
            ]
        },
        {
            "tag": "eficiencia_algoritmo",
            "patterns": [
                "que es la eficiencia en un algoritmo",
                "que significa eficiencia en algoritmos",
                "que es la eficacia de un conjunto de instrucciones"
            ],
            "responses": [
                "Es la capacidad de resolver un problema utilizando la menor cantidad posible de tiempo y recursos.",
                "Es la medida de cuán bien un algoritmo realiza su tarea en comparación con otros métodos."
            ]
        },
        {
            "tag": "comparar_metodos",
            "patterns": [
                "que significa comparar metodos",
                "que es comparar metodos",
                "que es evaluar diferentes enfoques"
            ],
            "responses": [
                "Es analizar diferentes técnicas o enfoques para identificar cuál es más adecuado o eficiente.",
                "Es evaluar las ventajas y desventajas de distintos procesos para elegir el mejor."
            ]
        },
        {
            "tag": "elegir_metodo",
            "patterns": [
                "que significa elegir un metodo",
                "que es elegir un metodo",
                "que es seleccionar una tecnica"
            ],
            "responses": [
                "Es seleccionar la técnica más adecuada para resolver un problema o realizar una tarea específica.",
                "Es tomar una decisión basada en la eficiencia y las características de cada opción disponible."
            ]
        },
        {
            "tag": "tecnica_adecuada",
            "patterns": [
                "que es una tecnica adecuada",
                "que significa tecnica adecuada",
                "que es un metodo apropiado"
            ],
            "responses": [
                "Es un enfoque o método que se ajusta de manera efectiva a las necesidades de una tarea o problema.",
                "Es una estrategia que permite lograr un objetivo de forma precisa y eficiente."
            ]
        },
        {
            "tag": "logica_algoritmo",
            "patterns": [
                "que es la logica en un algoritmo",
                "que significa logica en algoritmos",
                "que es la coherencia de un conjunto de instrucciones",
                "que significa coherencia de instrucciones"
            ],
            "responses": [
                "Es la base racional que organiza los pasos de un conjunto de instrucciones para garantizar que cumplan su propósito.",
                "Es el razonamiento que guía la secuencia y estructura de las acciones dentro de un algoritmo."
            ]
        },
        {
            "tag": "ejemplos_instrucciones_secuenciales",
            "patterns": [
                "puedes darme ejemplos de instrucciones secuenciales",
                "que ejemplos hay de instrucciones secuenciales",
                "dime ejemplos de instrucciones secuenciales",
                "di ejemplos de instrucciones secuenciales",
                "ejemplos de instrucciones secuenciales"
            ],
            "responses": [
                "asignar un valor a una variable, mostrar un mensaje en pantalla y realizar una suma",
                "leer un dato del usuario, calcular el doble y mostrar el resultado",
                "calcular el promedio de tres numeros, imprimirlo y finalizar el programa"
            ]
        },
        {
            "tag": "instruccion_condicional",
            "patterns": [
                "que es una instruccion condicional",
                "que significa instruccion condicional",
                "que es una sentencia de decision"
            ],
            "responses": [
                "es una instruccion que permite tomar decisiones basadas en una condicion",
                "se utiliza para ejecutar diferentes bloques de codigo segun si una condicion es verdadera o falsa",
                "es un tipo de instruccion que evalua una expresion y decide el flujo del algoritmo"
            ]
        },
        {
            "tag": "ejemplos_instrucciones_condicionales",
            "patterns": [
                "puedes darme ejemplos de instrucciones condicionales",
                "que ejemplos hay de instrucciones condicionales",
                "dime ejemplos de instrucciones condicionales",
                "di ejemplos de instrucciones condicionales",
                "ejemplos de instrucciones condicionales"
            ],
            "responses": [
                "si la edad es mayor o igual a 18, mostrar eres mayor de edad",
                "si el numero es positivo, imprimir es positivo, de lo contrario imprimir es negativo",
                "verificar si un numero es par o impar y mostrar el resultado"
            ]
        },
        {
            "tag": "instruccion_repetitiva",
            "patterns": [
                "que es una instruccion repetitiva",
                "que significa instruccion repetitiva",
                "que es una sentencia de bucle"
            ],
            "responses": [
                "es una instruccion que ejecuta un bloque de codigo varias veces mientras se cumpla una condicion",
                "se utiliza para realizar tareas repetitivas de manera automatica",
                "es un tipo de instruccion que repite una accion hasta que se cumple un criterio de finalizacion"
            ]
        },
        {
            "tag": "ejemplos_instrucciones_repetitivas",
            "patterns": [
                "puedes darme ejemplos de instrucciones repetitivas",
                "que ejemplos hay de instrucciones repetitivas",
                "dime ejemplos de instrucciones repetitivas",
                "di ejemplos de instrucciones repetitivas",
                "ejemplos de instrucciones repetitivas"
            ],
            "responses": [
                "repetir hasta que el usuario introduzca un numero mayor a 0",
                "calcular la suma de los numeros del 1 al 100 utilizando un bucle",
                "mostrar los numeros pares entre 1 y 50 utilizando un bucle for"
            ]
        },
        {
            "tag": "tipos_bucles_algoritmos",
            "patterns": [
                "que tipos de bucles existen en los algoritmos",
                "que bucles se utilizan en programacion",
                "que tipos de ciclos se pueden encontrar en los algoritmos"
            ],
            "responses": [
                "los mas comunes son bucles for, while y do while",
                "puedes usar bucles definidos como for y bucles indeterminados como while",
                "los tipos principales son for para iteraciones definidas y while para condiciones"
            ]
        },
        {
            "tag": "bucle_for",
            "patterns": [
                "que es un bucle for",
                "que significa bucle for",
                "que es un ciclo for",
                "que significa ciclo for"
            ],
            "responses": [
                "es un bucle que repite un bloque de codigo un numero fijo de veces",
                "se utiliza cuando se conoce de antemano la cantidad de iteraciones",
                "es una estructura que incluye un inicio, una condicion y un incremento o decremento"
            ]
        },
        {
            "tag": "ejemplos_for",
            "patterns": [
                "puedes darme ejemplos de un bucle for",
                "que ejemplos hay de bucles for",
                "dime ejemplos de bucles for",
                "di ejemplos de bucles for",
                "ejemplos de bucles for"
            ],
            "responses": [
                "mostrar los numeros del 1 al 10 en pantalla",
                "calcular la suma de los primeros 100 numeros enteros",
                "imprimir los elementos de un arreglo o lista uno por uno"
            ]
        },
        {
            "tag": "bucle_while",
            "patterns": [
                "que es un bucle while",
                "que significa bucle while",
                "que es un ciclo while",
                "que significa ciclo while"
            ],
            "responses": [
                "es un bucle que ejecuta un bloque de codigo mientras una condicion sea verdadera",
                "se utiliza cuando no se sabe exactamente cuantas veces se repetira la tarea",
                "es una estructura que evalua una condicion antes de ejecutar el bloque de codigo"
            ]
        },
        {
            "tag": "ejemplos_while",
            "patterns": [
                "puedes darme ejemplos de un bucle while",
                "que ejemplos hay de bucles while",
                "dime ejemplos de bucles while",
                "di ejemplos de bucles while",
                "ejemplos de bucles while"
            ],
            "responses": [
                "seguir pidiendo al usuario un numero hasta que introduzca un numero positivo",
                "sumar numeros introducidos por el usuario hasta que ingrese cero",
                "mostrar un contador que incrementa mientras sea menor a 10"
            ]
        },
        {
            "tag": "ejemplos_do while",
            "patterns": [
                "puedes darme ejemplos de un bucle do while",
                "que ejemplos hay de bucles do while",
                "dime ejemplos de bucles do while",
                "di ejemplos de bucles do while",
                "ejemplos de bucles do while"
            ],
            "responses": [
                "pedir al usuario un numero hasta que introduzca uno mayor a 10",
                "mostrar un mensaje en pantalla al menos una vez, luego repetir segun una condicion",
                "calcular la suma de numeros ingresados hasta que el usuario escriba salir"
            ]
        },
        {
            "tag": "instrucciones_entrada_salida_algoritmo",
            "patterns": [
                "que son las instrucciones de entrada y salida en un algoritmo",
                "que significa instrucciones de entrada y salida",
                "que es entrada y salida en un algoritmo"
            ],
            "responses": [
                "son las instrucciones que permiten interactuar con el usuario o el entorno",
                "las instrucciones de entrada capturan datos, y las de salida los muestran o los envian",
                "se utilizan para recibir informacion del usuario y mostrar resultados o mensajes"
            ]
        },
        {
            "tag": "ejemplos_instrucciones_entrada_salida",
            "patterns": [
                "puedes darme ejemplos de instrucciones de entrada y salida",
                "que ejemplos hay de instrucciones de entrada y salida",
                "dime ejemplos de instrucciones de entrada y salida",
                "di ejemplos de instrucciones de entrada y salida",
                "ejemplos de instrucciones de entrada y salida"
            ],
            "responses": [
                "leer un numero del usuario y mostrar su cuadrado",
                "pedir al usuario su nombre y mostrar un mensaje de bienvenida",
                "capturar dos numeros y mostrar su suma en pantalla"
            ]
        },
        {
            "tag": "lenguaje_programacion",
            "patterns": [
                "que es un lenguaje de programacion",
                "que significa lenguaje de programacion",
                "que es un lenguaje informatico"
            ],
            "responses": [
                "es un medio para comunicarse con una computadora mediante instrucciones",
                "es un sistema de notacion para escribir programas que ejecuta una computadora",
                "es una herramienta para crear software a traves de instrucciones entendibles por maquinas"
            ]
        },
        {
            "tag": "escribir_instrucciones_lenguaje_programacion",
            "patterns": [
                "que significa escribir instrucciones en un lenguaje de programacion",
                "que es escribir instrucciones en un lenguaje de programacion",
                "que es redactar un programa"
            ],
            "responses": [
                "Es redactar un conjunto de órdenes en un formato que la computadora pueda interpretar y ejecutar.",
                "Es usar la sintaxis de un lenguaje de programación para definir cómo se deben realizar las acciones en un algoritmo."
            ]
        },
        {
            "tag": "sintaxis_lenguaje_programacion",
            "patterns": [
                "que es la sintaxis de un lenguaje de programacion",
                "que significa sintaxis en un lenguaje de programacion",
                "que es la estructura de un lenguaje de programacion",
                "que significa estructura en un lenguaje de programacion"
            ],
            "responses": [
                "Es el conjunto de reglas que dictan cómo deben escribirse las instrucciones para que sean comprendidas por una computadora.",
                "Es la estructura y el orden en el que deben organizarse los comandos en un lenguaje de programación."
            ]
        },
        {
            "tag": "programa_lenguaje_programacion",
            "patterns": [
                "que es un programa en un lenguaje de programacion",
                "que significa programa en un lenguaje de programacion",
                "que es un codigo informatico",
                "que significa codigo informatico",
                "que es un script",
                "que es un programa"
            ],
            "responses": [
                "Es un conjunto de instrucciones escritas en un lenguaje de programación para ejecutar una tarea específica.",
                "Es un algoritmo codificado en un formato que una computadora puede procesar y ejecutar."
            ]
        },
        {
            "tag": "codificar_algoritmo",
            "patterns": [
                "que significa codificar un algoritmo",
                "que es codificar un algoritmo",
                "que es escribir codigo informatico",
                "que significa escribir codigo informatico",
                "que es programar"
            ],
            "responses": [
                "Es traducir un conjunto de pasos lógicos de un algoritmo a un lenguaje de programación para que pueda ser ejecutado por una computadora.",
                "Es escribir un algoritmo utilizando la sintaxis y reglas de un lenguaje de programación."
            ]
        },
        {
            "tag": "traducir_algoritmo",
            "patterns": [
                "que significa traducir un algoritmo",
                "que es traducir un algoritmo",
                "que es convertir un algoritmo a codigo",
                "que significa convertir un algoritmo a codigo"
            ],
            "responses": [
                "Es convertir las instrucciones de un algoritmo a un formato que pueda ser interpretado por una computadora.",
                "Es transformar un conjunto de pasos lógicos en código utilizando un lenguaje de programación."
            ]
        },
        {
            "tag": "tipos_lenguajes_programacion",
            "patterns": [
                "cuales son los tipos de lenguajes de programacion",
                "que tipos de lenguajes informaticos existen",
                "que clasificaciones tienen los lenguajes de programacion",
                "que tipos de lenguajes de programacion hay"
            ],
            "responses": [
                "los principales tipos son lenguajes de bajo nivel y de alto nivel",
                "se clasifican en lenguajes de maquina, ensambladores, y lenguajes como c o python",
                "pueden ser de bajo nivel como ensamblador o de alto nivel como java o python"
            ]
        },
        {
            "tag": "lenguaje_bajo_nivel",
            "patterns": [
                "que es un lenguaje de bajo nivel",
                "que significa lenguaje de bajo nivel",
                "que es un lenguaje cercano al hardware"
            ],
            "responses": [
                "es un lenguaje cercano al hardware de la computadora, como el lenguaje ensamblador",
                "es un tipo de lenguaje que opera directamente con instrucciones de maquina",
                "es un lenguaje menos abstracto que requiere conocer detalles del hardware"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_bajo_nivel",
            "patterns": [
                "dame ejemplos de lenguajes de bajo nivel",
                "que lenguajes son de bajo nivel",
                "que lenguajes estan cerca del hardware",
                "dime ejemplos de lenguajes de bajo nivel",
                "ejemplos de lenguajes de bajo nivel",
                "di ejemplos de lenguajes de bajo nivel"
            ],
            "responses": [
                "ensamblador y lenguaje de maquina son ejemplos clasicos",
                "los microcontroladores a menudo usan lenguaje ensamblador",
                "el codigo binario es el lenguaje de bajo nivel mas basico"
            ]
        },
        {
            "tag": "lenguaje_alto_nivel",
            "patterns": [
                "que es un lenguaje de alto nivel",
                "que significa lenguaje de alto nivel",
                "que es un lenguaje mas abstracto",
                "que es un lenguaje cercano al lenguaje humano"
            ],
            "responses": [
                "es un lenguaje diseñado para ser facil de entender por los humanos",
                "es un tipo de lenguaje mas abstracto que oculta los detalles del hardware",
                "es una herramienta para escribir programas complejos con sintaxis cercana al lenguaje natural"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_alto_nivel",
            "patterns": [
                "dame ejemplos de lenguajes de alto nivel",
                "que lenguajes son de alto nivel",
                "que lenguajes son mas abstractos",
                "dime ejemplos de lenguajes de alto nivel",
                "ejemplos de lenguajes de alto nivel",
                "di ejemplos de lenguajes de alto nivel"
            ],
            "responses": [
                "python, java, c++, y javascript son ejemplos de lenguajes de alto nivel",
                "lenguajes como ruby, php y swift son tambien de alto nivel",
                "herramientas populares como go y kotlin pertenecen a esta categoria"
            ]
        },
        {
            "tag": "diferencia_lenguaje_alto_bajo_nivel",
            "patterns": [
                "que diferencia hay entre lenguajes de alto y bajo nivel",
                "cual es la diferencia entre lenguajes de alto y bajo nivel",
                "que distingue a los lenguajes de alto y bajo nivel",
                "que separa a los lenguajes de alto y bajo nivel",
                "que diferencia a los lenguajes de alto y bajo nivel"
            ],
            "responses": [
                "los de bajo nivel son cercanos al hardware, mientras que los de alto nivel son mas faciles para los humanos",
                "los lenguajes de bajo nivel requieren mas conocimiento del hardware, los de alto nivel son mas abstractos",
                "en los lenguajes de alto nivel escribes menos lineas de codigo para tareas complejas"
            ]
        },
        {
            "tag": "lenguaje_compilado",
            "patterns": [
                "que es un lenguaje compilado",
                "que significa lenguaje compilado",
                "que es un lenguaje que necesita compilacion",
                "que es un lenguaje que se traduce a codigo maquina"
            ],
            "responses": [
                "es un lenguaje que se traduce a codigo maquina antes de ejecutarse",
                "es un tipo de lenguaje donde el programa completo se convierte a binario antes de ejecutarse",
                "es un lenguaje que necesita un compilador para generar un ejecutable"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_compilados",
            "patterns": [
                "puedes darme ejemplos de lenguajes compilados",
                "que lenguajes son compilados",
                "que lenguajes necesitan compilacion",
                "dime ejemplos de lenguajes compilados",
                "ejemplos de lenguajes compilados",
                "di ejemplos de lenguajes compilados"
            ],
            "responses": [
                "c, c++ y rust son ejemplos de lenguajes compilados",
                "lenguajes como go y fortran son compilados",
                "swift y kotlin tambien pueden ser compilados"
            ]
        },
        {
            "tag": "lenguaje_interpretado",
            "patterns": [
                "que es un lenguaje interpretado",
                "que significa lenguaje interpretado",
                "que es un lenguaje que se ejecuta en tiempo real",
                "que es un lenguaje que no necesita compilacion"
            ],
            "responses": [
                "es un lenguaje que se ejecuta directamente por un interprete sin necesidad de compilar",
                "es un tipo de lenguaje donde las instrucciones se traducen y ejecutan en tiempo real",
                "los lenguajes interpretados no generan un archivo binario antes de ejecutarse"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_interpretados",
            "patterns": [
                "puedes darme ejemplos de lenguajes interpretados",
                "que lenguajes son interpretados",
                "que lenguajes se ejecutan en tiempo real",
                "dime ejemplos de lenguajes interpretados",
                "ejemplos de lenguajes interpretados",
                "di ejemplos de lenguajes interpretados"
            ],
            "responses": [
                "python, javascript y ruby son lenguajes interpretados",
                "php y perl son otros ejemplos de lenguajes interpretados",
                "lenguajes como lua y bash tambien son interpretados"
            ]
        },
        {
            "tag": "diferencia_lenguajes_compilados_interpretados",
            "patterns": [
                "que diferencia hay entre lenguajes compilados e interpretados",
                "cual es la diferencia entre lenguajes compilados e interpretados",
                "que distingue a los lenguajes compilados e interpretados",
                "que separa a los lenguajes compilados e interpretados",
                "que diferencia a los lenguajes compilados e interpretados"
            ],
            "responses": [
                "los compilados generan un ejecutable antes de ejecutarse, los interpretados no",
                "los compilados son mas rapidos en ejecucion, pero los interpretados son mas flexibles",
                "los interpretados traducen instrucciones en tiempo real, los compilados lo hacen antes"
            ]
        },
        {
            "tag": "lenguaje_orientado_objetos",
            "patterns": [
                "que es un lenguaje orientado a objetos",
                "que significa lenguaje orientado a objetos",
                "que es un lenguaje que usa clases y objetos",
                "que es poo",
                "que significa poo",
                "que es programacion orientada a objetos",
                "que significa programacion orientada a objetos"
            ],
            "responses": [
                "es un lenguaje que organiza el codigo en objetos que representan entidades del mundo real",
                "es un paradigma de programacion que utiliza clases y objetos para estructurar el codigo",
                "es un tipo de lenguaje donde los datos y las funciones se encapsulan en objetos"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_orientados_objetos",
            "patterns": [
                "puedes darme ejemplos de lenguajes orientados a objetos",
                "que lenguajes son orientados a objetos",
                "que lenguajes usan poo",
                "dime ejemplos de lenguajes orientados a objetos",
                "ejemplos de lenguajes orientados a objetos",
                "di ejemplos de lenguajes orientados a objetos"
            ],
            "responses": [
                "java, python, c++ y ruby son lenguajes orientados a objetos",
                "lenguajes como kotlin y swift tambien usan orientacion a objetos",
                "c# y javascript soportan programacion orientada a objetos"
            ]
        },
        {
            "tag": "lenguaje_funcional",
            "patterns": [
                "que es un lenguaje funcional",
                "que significa lenguaje funcional",
                "que es un lenguaje que trata las computaciones como funciones",
                "que es programacion funcional",
                "que significa programacion funcional"
            ],
            "responses": [
                "es un lenguaje que trata las computaciones como evaluaciones de funciones matematicas",
                "es un paradigma donde las funciones son las unidades principales del programa",
                "los lenguajes funcionales evitan estados y datos mutables"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_funcionales",
            "patterns": [
                "puedes darme ejemplos de lenguajes funcionales",
                "que lenguajes son funcionales",
                "que lenguajes usan programacion funcional",
                "dime ejemplos de lenguajes funcionales",
                "ejemplos de lenguajes funcionales",
                "di ejemplos de lenguajes funcionales"
            ],
            "responses": [
                "haskell, elixir y erlang son ejemplos de lenguajes funcionales",
                "lenguajes como f# y clojure tambien son funcionales",
                "scala y ocaml soportan el paradigma funcional"
            ]
        },
        {
            "tag": "lenguaje_scripting",
            "patterns": [
                "que es un lenguaje de scripting",
                "que significa lenguaje de scripting",
                "que es un lenguaje para escribir scripts",
                "que es programacion de scripts",
                "que significa programacion de scripts"
            ],
            "responses": [
                "es un lenguaje diseñado para automatizar tareas en un sistema operativo o aplicacion",
                "es un tipo de lenguaje utilizado para escribir scripts que controlan programas o procesos",
                "los lenguajes de scripting son comunmente interpretados y usados para tareas rapidas"
            ]
        },
        {
            "tag": "ejemplos_lenguajes_scripting",
            "patterns": [
                "puedes darme ejemplos de lenguajes de scripting",
                "que lenguajes son de scripting",
                "que lenguajes se usan para scripts",
                "dime ejemplos de lenguajes de scripting",
                "ejemplos de lenguajes de scripting",
                "di ejemplos de lenguajes de scripting"
            ],
            "responses": [
                "javascript, python y bash son lenguajes de scripting comunes",
                "lenguajes como ruby, php y perl son tambien de scripting",
                "lua y powershell son otros ejemplos de lenguajes de scripting"
            ]
        },
        {
            "tag": "python_es",
            "patterns": [
                "que es python",
                "que significa python",
                "que es un lenguaje de programacion python",
                "python",
                "dime que es el lenguaje de programacion python"
            ],
            "responses": [
                "es un lenguaje de programacion de alto nivel, interpretado y multiproposito",
                "es un lenguaje popular por su sintaxis sencilla y gran cantidad de bibliotecas",
                "es una herramienta muy utilizada para ciencia de datos, inteligencia artificial y desarrollo web"
            ]
        },
        {
            "tag": "utiliza_python",
            "patterns": [
                "para que se utiliza python",
                "que se puede hacer con python",
                "que aplicaciones tiene python"
            ],
            "responses": [
                "se utiliza en ciencia de datos, inteligencia artificial, desarrollo web y automatizacion",
                "es comun en analisis de datos, aprendizaje automatico y desarrollo de aplicaciones",
                "tambien se usa para crear scripts, manejar datos y programar aplicaciones"
            ]
        },
        {
            "tag": "java_es",
            "patterns": [
                "que es java",
                "que significa java",
                "que es un lenguaje de programacion java",
                "java"
            ],
            "responses": [
                "es un lenguaje de programacion de alto nivel, orientado a objetos y multiplataforma",
                "es un lenguaje conocido por su portabilidad gracias a la maquina virtual de java",
                "es una herramienta popular para aplicaciones empresariales y desarrollo movil"
            ]
        },
        {
            "tag": "utiliza_java",
            "patterns": [
                "para que se utiliza java",
                "que se puede hacer con java",
                "que aplicaciones tiene java"
            ],
            "responses": [
                "se utiliza para desarrollar aplicaciones empresariales, juegos y software para android",
                "es comun en aplicaciones de servidor, sistemas distribuidos y aplicaciones web",
                "tambien se usa para programar dispositivos embebidos y aplicaciones de escritorio"
            ]
        },
        {
            "tag": "javascript_es",
            "patterns": [
                "que es javascript",
                "que significa javascript",
                "que es un lenguaje de programacion javascript",
                "javascript"
            ],
            "responses": [
                "es esencial para el desarrollo frontend moderno",
                "es una herramienta clave para la programacion del lado del cliente y del servidor",
                "es un lenguaje de programacion utilizado para añadir interactividad a las paginas web",
                "es un lenguaje de programacion de alto nivel utilizado principalmente para desarrollo web",
                "permite crear funcionalidades dinamicas como animaciones y validaciones",
                "es un lenguaje interpretado que permite crear paginas web dinamicas e interactivas"
            ]
        },
        {
            "tag": "utiliza_javascript",
            "patterns": [
                "para que se utiliza javascript",
                "que se puede hacer con javascript",
                "que aplicaciones tiene javascript",
                "que se puede desarrollar con javascript",
                "que se puede programar con javascript"
            ],
            "responses": [
                "se utiliza para crear interfaces web interactivas y aplicaciones web modernas",
                "es comun en el desarrollo del lado del cliente y del servidor con nodejs",
                "tambien se usa para manejar eventos en paginas web y construir juegos web"
            ]
        },
        {
            "tag": "c",
            "patterns": [
                "que es c",
                "que significa c",
                "que es un lenguaje de programacion c",
                "c",
                "lenguaje c"
            ],
            "responses": [
                "es un lenguaje de programacion de bajo nivel, estructurado y eficiente",
                "es conocido por su velocidad y control sobre los recursos del sistema",
                "es una herramienta utilizada para sistemas operativos, compiladores y aplicaciones de alto rendimiento"
            ]
        },
        {
            "tag": "utiliza_c",
            "patterns": [
                "para que se utiliza c",
                "que se puede hacer con c",
                "que aplicaciones tiene c",
                "que se puede desarrollar con c",
                "que se puede programar con c"
            ],
            "responses": [
                "se utiliza en el desarrollo de sistemas operativos y software de hardware",
                "es comun para programar dispositivos embebidos y aplicaciones de alto rendimiento",
                "tambien se usa en videojuegos, simulaciones y sistemas en tiempo real"
            ]
        },
        {
            "tag": "c++",
            "patterns": [
                "que es c++",
                "que significa c++",
                "que es un lenguaje de programacion c++",
                "c++",
                "lenguaje c++"
            ],
            "responses": [
                "es un lenguaje de programacion de alto nivel basado en c, con soporte para programacion orientada a objetos",
                "es un lenguaje versatil y eficiente utilizado para desarrollo de software complejo",
                "es una extension de c que incluye caracteristicas avanzadas como clases y objetos"
            ]
        },
        {
            "tag": "utiliza_c++",
            "patterns": [
                "para que se utiliza c++",
                "que se puede hacer con c++",
                "que aplicaciones tiene c++",
                "que se puede desarrollar con c++",
                "que se puede programar con c++"
            ],
            "responses": [
                "se utiliza para desarrollar videojuegos, software de simulacion y motores graficos",
                "es comun en el desarrollo de sistemas operativos y aplicaciones cientificas",
                "tambien se usa para aplicaciones de alto rendimiento y sistemas embebidos"
            ]
        },
        {
            "tag": "kotlin",
            "patterns": [
                "que es kotlin",
                "que significa kotlin",
                "que es un lenguaje de programacion kotlin",
                "kotlin"
            ],
            "responses": [
                "es un lenguaje de programacion moderno y de alto nivel desarrollado por jetbrains",
                "es conocido por ser interoperable con java y utilizado principalmente para desarrollo movil",
                "es una herramienta popular para desarrollar aplicaciones android y sistemas backend"
            ]
        },
        {
            "tag": "utiliza_kotlin",
            "patterns": [
                "para que se utiliza kotlin",
                "que se puede hacer con kotlin",
                "que aplicaciones tiene kotlin",
                "que se puede desarrollar con kotlin",
                "que se puede programar con kotlin"
            ],
            "responses": [
                "se utiliza para desarrollar aplicaciones android y sistemas backend",
                "es comun en proyectos que requieren integracion con java",
                "tambien se usa para aplicaciones multiplataforma y microservicios"
            ]
        },
        {
            "tag": "que es swift",
            "patterns": [
                "que es swift"
            ],
            "responses": [
                "es un lenguaje de programacion moderno desarrollado por apple para sus plataformas",
                "es conocido por ser rapido, seguro y facil de aprender",
                "es una herramienta popular para desarrollar aplicaciones para ios y macos"
            ]
        },
        {
            "tag": "para que se utiliza swift",
            "patterns": [
                "para que se utiliza swift"
            ],
            "responses": [
                "se utiliza para desarrollar aplicaciones para ios, macos, watchos y tvos",
                "es comun en el ecosistema apple para aplicaciones moviles y de escritorio",
                "tambien se usa para aprendizaje y proyectos de codigo abierto en la comunidad apple"
            ]
        },
        {
            "tag": "que es rust",
            "patterns": [
                "que es rust"
            ],
            "responses": [
                "es un lenguaje de programacion moderno enfocado en seguridad y rendimiento",
                "es conocido por su sistema de manejo de memoria que evita errores comunes",
                "es una herramienta utilizada para sistemas de alto rendimiento y software seguro"
            ]
        },
        {
            "tag": "para que se utiliza rust",
            "patterns": [
                "para que se utiliza rust"
            ],
            "responses": [
                "se utiliza para desarrollar sistemas embebidos, navegadores y software seguro",
                "es comun en proyectos donde el rendimiento y la seguridad son criticos",
                "tambien se usa en aplicaciones de sistemas como motores de bases de datos"
            ]
        },
        {
            "tag": "que es go",
            "patterns": [
                "que es go"
            ],
            "responses": [
                "es un lenguaje de programacion creado por google enfocado en la simplicidad y el rendimiento",
                "es conocido por ser rapido, escalable y facil de compilar",
                "es una herramienta popular para sistemas distribuidos y servicios web"
            ]
        },
        {
            "tag": "para que se utiliza go",
            "patterns": [
                "para que se utiliza go"
            ],
            "responses": [
                "se utiliza para desarrollar servicios web, herramientas de infraestructura y sistemas distribuidos",
                "es comun en aplicaciones de alto rendimiento como servidores y microservicios",
                "tambien se usa en proyectos de red, cloud computing y contenedores"
            ]
        },
        {
            "tag": "ventajas_python",
            "patterns": [
                "cuales son las ventajas de python",
                "que ventajas tiene python",
                "por que usar python",
                "ventajas python"
            ],
            "responses": [
                "es facil de aprender y leer gracias a su sintaxis simple",
                "tiene una gran cantidad de bibliotecas y frameworks disponibles",
                "es multiplataforma y ampliamente soportado por la comunidad"
            ]
        },
        {
            "tag": "desventajas_python",
            "patterns": [
                "cuales son las desventajas de python",
                "que desventajas tiene python",
                "por que no usar python",
                "desventajas python"
            ],
            "responses": [
                "es mas lento que otros lenguajes como c o java",
                "consume mas recursos debido a su naturaleza interpretada",
                "no es la mejor opcion para aplicaciones de tiempo real"
            ]
        },
        {
            "tag": "frameworks",
            "patterns": [
                "que frameworks existen en python",
                "que frameworks se usan en python",
                "frameworks python",
                "frameworks populares en python"
            ],
            "responses": [
                "algunos frameworks populares son django, flask y fastapi",
                "tambien estan pandas y numpy para analisis de datos",
                "se usa tensorflow y pytorch para inteligencia artificial"
            ]
        },
        {
            "tag": "diferencia_python_java",
            "patterns": [
                "que diferencia hay entre python y java",
                "cual es la diferencia entre python y java",
                "que distingue a python y java",
                "que separa a python y java",
                "que diferencia a python y java"
            ],
            "responses": [
                "python tiene una sintaxis mas sencilla y es interpretado",
                "java es mas rapido y se compila en bytecode para la maquina virtual",
                "java se usa mas para aplicaciones empresariales, mientras que python es comun en analisis de datos"
            ]
        },
        {
            "tag": "caracteristicas_java",
            "patterns": [
                "que caracteristicas tiene java",
                "que hace a java especial",
                "por que usar java",
                "caracteristicas de java"
            ],
            "responses": [
                "es orientado a objetos y tiene recoleccion automatica de basura",
                "es multiplataforma gracias a la maquina virtual de java",
                "tiene un sistema de tipado estatico que previene errores en tiempo de compilacion"
            ]
        },
        {
            "tag": "ventajas_java",
            "patterns": [
                "cuales son las ventajas de java",
                "que ventajas tiene java",
                "por que usar java",
                "ventajas java"
            ],
            "responses": [
                "es muy escalable y adecuado para aplicaciones empresariales",
                "tiene un ecosistema maduro y documentacion amplia",
                "es compatible con una gran cantidad de plataformas"
            ]
        },
        {
            "tag": "frameworks_java",
            "patterns": [
                "que frameworks existen en java",
                "que frameworks se usan en java",
                "frameworks java",
                "frameworks populares en java"
            ],
            "responses": [
                "algunos frameworks populares son spring, hibernate y struts",
                "spring boot es comun para desarrollar microservicios",
                "javafx se usa para crear interfaces graficas"
            ]
        },
        {
            "tag": "caracteristicas_c++",
            "patterns": [
                "que caracteristicas tiene c++",
                "que hace a c++ especial",
                "por que usar c++",
                "caracteristicas de c++"
            ],
            "responses": [
                "soporta programacion orientada a objetos y funcional",
                "permite un control detallado sobre la memoria",
                "es un lenguaje compilado que ofrece alto rendimiento"
            ]
        },
        {
            "tag": "diferencia_c_c++",
            "patterns": [
                "que diferencia hay entre c y c++",
                "cual es la diferencia entre c y c++",
                "que distingue a c y c++",
                "que separa a c y c++",
                "que diferencia a c y c++"
            ],
            "responses": [
                "c es un lenguaje estructurado mientras que c++ soporta programacion orientada a objetos",
                "c++ incluye funcionalidades como clases, herencia y polimorfismo",
                "c se usa para sistemas operativos, mientras que c++ es mas comun en videojuegos y simulaciones"
            ]
        },
        {
            "tag": "framework",
            "patterns": [
                "que es un framework",
                "que significa framework",
                "que es un framework de programacion",
                "framework",
                "framework de programacion"
            ],
            "responses": [
                "es una estructura de codigo predefinida que facilita el desarrollo de aplicaciones",
                "es un conjunto de herramientas y bibliotecas que ayudan a resolver problemas comunes",
                "sirve para agilizar y estandarizar el proceso de desarrollo"
            ]
        },
        {
            "tag": "lenguaje_programacion",
            "patterns": [
                "como elegir un lenguaje de programacion",
                "que lenguaje de programacion aprender",
                "que lenguaje de programacion es mejor",
                "que lenguaje de programacion es mas popular"
            ],
            "responses": [
                "depende del proyecto que desees realizar, como desarrollo web o aplicaciones moviles",
                "considera el soporte comunitario y las herramientas disponibles",
                "piensa en la curva de aprendizaje y tus objetivos a largo plazo"
            ]
        },
        {
            "tag": "django",
            "patterns": [
                "que es django",
                "que significa django",
                "que es un framework de programacion django",
                "django"
            ],
            "responses": [
                "es un framework de alto nivel para desarrollo web en python",
                "es conocido por seguir el principio de no te repitas y facilitar el desarrollo rapido",
                "incluye herramientas para manejar bases de datos, autentificacion y mas"
            ]
        },
        {
            "tag": "ventajas_django",
            "patterns": [
                "que ventajas tiene django",
                "por que usar django",
                "ventajas django",
                "beneficios de django",
                "por que elegir django",
                "ventajas de django"
            ],
            "responses": [
                "tiene un sistema de administracion integrado y poderoso",
                "es escalable y adecuado para proyectos pequeños y grandes",
                "sigue buenas practicas como el principio mvc"
            ]
        },
        {
            "tag": "flask",
            "patterns": [
                "que es flask",
                "que significa flask",
                "que es un framework de programacion flask",
                "flask",
                "framework flask"
            ],
            "responses": [
                "es un microframework para desarrollo web en python",
                "es conocido por ser ligero y facil de extender",
                "es ligero y permite crear api rapidas con minima configuracion",
                "permite crear aplicaciones web con minima configuracion",
                "es un microframework de python para desarrollo backend",
                "es ideal para proyectos pequeños y prototipos"
            ]
        },
        {
            "tag": "sirve_flask",
            "patterns": [
                "para que sirve flask",
                "que se puede hacer con flask",
                "que aplicaciones tiene flask",
                "que se puede desarrollar con flask",
                "que se puede programar con flask"
            ],
            "responses": [
                "se utiliza para desarrollar aplicaciones web pequeñas y api",
                "es ideal para proyectos que requieren flexibilidad",
                "se usa en aplicaciones donde no se necesita un framework robusto como django"
            ]
        },
        {
            "tag": "frameworks_inteligencia_artificial_python",
            "patterns": [
                "que frameworks hay para inteligencia artificial en python",
                "que frameworks se usan para inteligencia artificial en python",
                "frameworks inteligencia artificial python",
                "frameworks populares para inteligencia artificial en python"
            ],
            "responses": [
                "algunos populares son tensorflow, pytorch y scikit-learn",
                "tensorflow es usado para redes neuronales y aprendizaje profundo",
                "scikit-learn es ideal para aprendizaje automatico clasico"
            ]
        },
        {
            "tag": "spring",
            "patterns": [
                "que es spring",
                "que significa spring",
                "que es un framework de programacion spring",
                "spring",
                "framework spring",
                "spring framework"
            ],
            "responses": [
                "es un framework para desarrollo de aplicaciones empresariales en java",
                "proporciona herramientas para desarrollar aplicaciones escalables",
                "soporta programacion orientada a aspectos y gestion de dependencias"
            ]
        },
        {
            "tag": "sirve_spring_boot",
            "patterns": [
                "para que sirve spring boot",
                "que se puede hacer con spring boot",
                "que aplicaciones tiene spring boot",
                "que se puede desarrollar con spring boot",
                "que se puede programar con spring boot"
            ],
            "responses": [
                "sirve para crear aplicaciones java con configuracion minima",
                "facilita el desarrollo de microservicios",
                "es ideal para proyectos que requieren implementacion rapida"
            ]
        },
        {
            "tag": "hibernate",
            "patterns": [
                "que es hibernate",
                "que significa hibernate",
                "que es un framework de programacion hibernate",
                "hibernate",
                "framework hibernate"
            ],
            "responses": [
                "es un framework de mapeo objeto-relacional para java",
                "permite interactuar con bases de datos de manera eficiente",
                "facilita la persistencia de datos en aplicaciones java"
            ]
        },
        {
            "tag": "diferencia_spring_hibernate",
            "patterns": [
                "que diferencia hay entre spring y hibernate",
                "cual es la diferencia entre spring y hibernate",
                "que distingue a spring y hibernate",
                "que separa a spring y hibernate",
                "que diferencia a spring y hibernate"
            ],
            "responses": [
                "spring es un framework general para aplicaciones empresariales",
                "hibernate se centra en el mapeo de datos y la persistencia",
                "spring puede integrar hibernate como parte de su ecosistema"
            ]
        },
        {
            "tag": "react",
            "patterns": [
                "que es react",
                "que significa react",
                "que es un framework de programacion react",
                "react",
                "framework react"
            ],
            "responses": [
                "es una biblioteca de javascript para construir interfaces de usuario",
                "es desarrollada por facebook y se centra en componentes reutilizables",
                "es ideal para aplicaciones web dinamicas y modernas"
            ]
        },
        {
            "tag": "sirve_react",
            "patterns": [
                "para que sirve react",
                "que se puede hacer con react",
                "que aplicaciones tiene react",
                "que se puede desarrollar con react",
                "que se puede programar con react"
            ],
            "responses": [
                "sirve para crear aplicaciones web con interfaces dinamicas",
                "se utiliza para construir paginas web de una sola pagina o spa",
                "facilita la gestion del estado y el renderizado de componentes"
            ]
        },
        {
            "tag": "angular",
            "patterns": [
                "que es angular",
                "que significa angular",
                "que es un framework de programacion angular",
                "angular",
                "framework angular"
            ],
            "responses": [
                "es un framework de javascript para desarrollo de aplicaciones web",
                "es mantenido por google y sigue una arquitectura basada en componentes",
                "ofrece herramientas integradas como inyeccion de dependencias y enrutamiento"
            ]
        },
        {
            "tag": "diferencia_angular_react",
            "patterns": [
                "que diferencia hay entre angular y react",
                "cual es la diferencia entre angular y react",
                "que distingue a angular y react",
                "que separa a angular y react",
                "que diferencia a angular y react",
                "angular vs react"
            ],
            "responses": [
                "angular es un framework completo mientras que react es una biblioteca",
                "react permite mas flexibilidad al integrar herramientas externas",
                "angular tiene una curva de aprendizaje mas pronunciada pero ofrece mas funcionalidades integradas"
            ]
        },
        {
            "tag": "vue",
            "patterns": [
                "que es vue",
                "que significa vue",
                "que es un framework de programacion vue",
                "vue",
                "framework vue",
                "vuejs"
            ],
            "responses": [
                "es un framework progresivo de javascript para construir interfaces de usuario",
                "es conocido por su simplicidad y facilidad de integracion",
                "es ideal para proyectos pequeños y grandes que requieren modularidad"
            ]
        },
        {
            "tag": "frameworks_c++",
            "patterns": [
                "que frameworks existen en c++",
                "que frameworks se usan en c++",
                "frameworks c++",
                "frameworks populares en c++",
                "frameworks para c++",
                "frameworks de c++"
            ],
            "responses": [
                "algunos populares son qt, boost y poco",
                "qt se usa para desarrollo de aplicaciones multiplataforma con interfaces graficas",
                "boost proporciona bibliotecas para muchas tareas comunes como gestion de memoria"
            ]
        },
        {
            "tag": "qt",
            "patterns": [
                "que es qt",
                "que significa qt",
                "que es un framework de programacion qt",
                "qt",
                "framework qt",
                "qt framework",
                "qt c++"
            ],
            "responses": [
                "es un framework para c++ enfocado en aplicaciones graficas y multiplataforma",
                "incluye herramientas para crear interfaces graficas modernas",
                "es utilizado en software de escritorio, movil y embebido"
            ]
        },
        {
            "tag": "frameworks_desarrollo_movil",
            "patterns": [
                "que frameworks hay para desarrollo movil",
                "que frameworks se usan para desarrollo movil",
                "frameworks desarrollo movil",
                "frameworks populares para desarrollo movil",
                "frameworks para desarrollo movil"
            ],
            "responses": [
                "algunos populares son flutter, react native y xamarin",
                "flutter es desarrollado por google y usa dart como lenguaje base",
                "react native permite desarrollar aplicaciones moviles usando javascript"
            ]
        },
        {
            "tag": "flutter",
            "patterns": [
                "que es flutter",
                "que significa flutter",
                "que es un framework de programacion flutter",
                "flutter",
                "framework flutter",
                "flutter framework"
            ],
            "responses": [
                "es un framework de google para desarrollo movil multiplataforma",
                "permite crear aplicaciones nativas con una sola base de codigo",
                "usa dart como lenguaje de programacion"
            ]
        },
        {
            "tag": "react_native",
            "patterns": [
                "que es react native",
                "que significa react native",
                "que es un framework de programacion react native",
                "react native",
                "framework react native",
                "react native framework"
            ],
            "responses": [
                "es un framework basado en javascript para desarrollo movil",
                "permite crear aplicaciones para ios y android con una sola base de codigo",
                "se basa en la misma filosofia de componentes que react"
            ]
        },
        {
            "tag": "frontend",
            "patterns": [
                "que es frontend",
                "que significa frontend",
                "que es desarrollo frontend",
                "frontend"
            ],
            "responses": [
                "es la parte visual de una aplicacion con la que interactuan los usuarios",
                "se refiere al desarrollo de interfaces graficas y experiencias de usuario",
                "incluye tecnologias como html, css y javascript"
            ]
        },
        {
            "tag": "lenguajes_frontend",
            "patterns": [
                "que lenguajes se usan en frontend",
                "que lenguajes se usan para desarrollo frontend",
                "lenguajes frontend",
                "lenguajes para frontend"
            ],
            "responses": [
                "los principales son html, css y javascript",
                "tambien se utilizan tecnologias como typescript y frameworks como react o angular"
            ]
        },
        {
            "tag": "html",
            "patterns": [
                "que es html",
                "que significa html",
                "que es un lenguaje de programacion html",
                "html"
            ],
            "responses": [
                "es un lenguaje de marcado utilizado para estructurar el contenido de una pagina web",
                "define la estructura basica de una pagina como encabezados, parrafos y enlaces",
                "es esencial para el desarrollo frontend"
            ]
        },
        {
            "tag": "css",
            "patterns": [
                "que es css",
                "que significa css",
                "que es un lenguaje de programacion css",
                "css"
            ],
            "responses": [
                "es un lenguaje de estilos usado para definir la apariencia de una pagina web",
                "permite personalizar colores, fuentes y diseño de los elementos",
                "se usa junto con html para mejorar la experiencia visual"
            ]
        },
        {
            "tag": "frameworks_frontend",
            "patterns": [
                "que frameworks se usan en frontend",
                "que frameworks se usan para desarrollo frontend",
                "frameworks frontend",
                "frameworks para frontend"
            ],
            "responses": [
                "algunos populares son react, angular y vue",
                "bootstrap se usa para diseño responsivo",
                "tailwind css es una herramienta moderna para estilos"
            ]
        },
        {
            "tag": "diferencia_react_angular",
            "patterns": [
                "que diferencia hay entre react y angular",
                "cual es la diferencia entre react y angular",
                "que distingue a react y angular",
                "que separa a react y angular",
                "que diferencia a react y angular",
                "react vs angular"
            ],
            "responses": [
                "react es una biblioteca mientras que angular es un framework completo",
                "react ofrece mas flexibilidad, pero angular incluye mas herramientas integradas",
                "react se usa para proyectos ligeros y angular para aplicaciones robustas"
            ]
        },
        {
            "tag": "spa",
            "patterns": [
                "que es un spa",
                "que significa spa",
                "que es una aplicacion de pagina unica",
                "spa"
            ],
            "responses": [
                "es una aplicacion de pagina unica donde el contenido se carga dinamicamente",
                "evita recargar toda la pagina al navegar entre secciones",
                "es comun en frameworks como react, angular y vue"
            ]
        },
        {
            "tag": "backend",
            "patterns": [
                "que es backend",
                "que significa backend",
                "que es desarrollo backend",
                "backend"
            ],
            "responses": [
                "es la parte de un sistema que maneja la logica, bases de datos y servidores",
                "se encarga de procesar solicitudes y enviar respuestas al frontend",
                "es esencial para manejar la logica de negocio de una aplicacion"
            ]
        },
        {
            "tag": "lenguajes_backend",
            "patterns": [
                "que lenguajes se usan en backend",
                "que lenguajes se usan para desarrollo backend",
                "lenguajes backend",
                "lenguajes para backend",
                "dime lenguajes para backend",
                "dime lenguajes de backend",
                "di lenguajes de backend"
            ],
            "responses": [
                "algunos populares son java, python, php, ruby y javascript con nodejs",
                "tambien se usa go, c# y kotlin dependiendo del caso de uso"
            ]
        },
        {
            "tag": "ejemplos_algoritmos",
            "patterns": [
                "dime ejemplos de algoritmos",
                "di ejemplos de algoritmos",
                "que algoritmos conoces",
                "que algoritmos me puedes decir",
                "que algoritmos sabes",
                "que algoritmos puedo aprender",
                "que algoritmos puedo estudiar",
                "que algoritmos puedo practicar",
                "que algoritmos puedo conocer",
                "que algoritmos puedo investigar",
                "que algoritmos puedo revisar",
                "algoritmos en js",
                "algoritmos en python",
                "algoritmos en javascript",
                "lista de algoritmos en js",
                "lista de algoritmos en python",
                "lista de algoritmos en javascript",
                "algoritmos de busqueda",
                "algoritmos de ordenamiento",
                "algoritmos de busqueda y ordenamiento",
                "algoritmos de busqueda y ordenamiento en js",
                "algoritmos de busqueda y ordenamiento en python",
                "algoritmos de busqueda y ordenamiento en javascript",
                "algoritmos de busqueda y ordenamiento mas comunes",
                "algoritmos de busqueda y ordenamiento mas populares",
                "algoritmos de busqueda y ordenamiento mas usados",
                "algoritmos de busqueda y ordenamiento mas conocidos",
                "algoritmos de busqueda y ordenamiento mas recomendados"
            ],
            "responses": [
                "se estos: \n-busqueda secuencial \n-⁠búsqueda binaria \n-⁠ordenamiento burbuja \n-⁠quick sort \n-⁠merge sort \n-⁠Fibonacci \n-⁠búsqueda en profundidad \n-⁠heap sort",
                "puedo ayudar con: \n-busqueda secuencial \n-⁠búsqueda binaria \n-⁠ordenamiento burbuja \n-⁠quick sort \n-⁠merge sort \n-⁠Fibonacci \n-⁠búsqueda en profundidad \n-⁠heap sort",
                "conozco estos: \n-busqueda secuencial \n-⁠búsqueda binaria \n-⁠ordenamiento burbuja \n-⁠quick sort \n-⁠merge sort \n-⁠Fibonacci \n-⁠búsqueda en profundidad \n-⁠heap sort"
            ]
        },
        {
            "tag": "algorithm_examples",
            "patterns": [
                "tell me examples of algorithms",
                "give examples of algorithms",
                "what algorithms do you know",
                "what algorithms can you tell me",
                "what algorithms do you know",
                "what algorithms can I learn",
                "what algorithms can I study",
                "what algorithms can I practice",
                "what algorithms can I know",
                "what algorithms can I investigate",
                "what algorithms can I review",
                "algorithms in js",
                "algorithms in python",
                "algorithms in javascript",
                "list of algorithms in js",
                "list of algorithms in python",
                "list of algorithms in javascript",
                "search algorithms",
                "sorting algorithms",
                "search and sorting algorithms",
                "search and sorting algorithms in js",
                "search and sorting algorithms in python",
                "search and sorting algorithms in javascript",
                "most common search and sorting algorithms",
                "most popular search and sorting algorithms",
                "most used search and sorting algorithms",
                "most known search and sorting algorithms",
                "most recommended search and sorting algorithms"
            ],
            "responses": [
                "I know these: \n- Sequential search \n- Binary search \n- Bubble sort \n- Quick sort \n- Merge sort \n- Fibonacci \n- Depth-first search \n- Heap sort",
                "I can help with: \n- Sequential search \n- Binary search \n- Bubble sort \n- Quick sort \n- Merge sort \n- Fibonacci \n- Depth-first search \n- Heap sort",
                "I know these: \n- Sequential search \n- Binary search \n- Bubble sort \n- Quick sort \n- Merge sort \n- Fibonacci \n- Depth-first search \n- Heap sort"
            ]
        },        
        {
            "tag": "frameworks_backend",
            "patterns": [
                "que frameworks se usan en backend",
                "que frameworks se usan para desarrollo backend",
                "frameworks backend",
                "frameworks para backend",
                "dime frameworks para backend",
                "dime frameworks de backend",
                "di frameworks de backend"
            ],
            "responses": [
                "algunos populares son spring boot para java, django y flask para python",
                "laravel para php y express para nodejs son opciones comunes",
                "tambien se usa ruby on rails y .net core"
            ]
        },
        {
            "tag": "nodejs",
            "patterns": [
                "que es nodejs",
                "que significa nodejs",
                "que es un lenguaje de programacion nodejs",
                "nodejs",
                "dime que es nodejs",
                "dime que significa nodejs",
                "di que es nodejs",
                "di que significa nodejs"
            ],
            "responses": [
                "es un entorno de ejecucion de javascript para el backend",
                "permite desarrollar aplicaciones escalables con un unico lenguaje",
                "es conocido por su eficiencia en manejo de multiples solicitudes"
            ]
        },
        {
            "tag": "api rest",
            "patterns": [
                "que es una api rest",
                "que significa api rest",
                "que es una api restful",
                "api rest",
                "dime que es una api rest",
                "dime que significa api rest",
                "di que es una api rest",
                "di que significa api rest"
            ],
            "responses": [
                "es una interfaz que permite la comunicacion entre sistemas usando peticiones http",
                "sigue principios como la separacion entre cliente y servidor",
                "es comun en aplicaciones web y servicios moviles"
            ]
        },
        {
            "tag": "graphql",
            "patterns": [
                "que es graphql",
                "que significa graphql",
                "que es un lenguaje de programacion graphql",
                "graphql",
                "dime que es graphql",
                "dime que significa graphql",
                "di que es graphql",
                "di que significa graphql"
            ],
            "responses": [
                "es una alternativa a rest para apis",
                "permite al cliente especificar exactamente que datos necesita",
                "es desarrollado por facebook y se usa en aplicaciones modernas"
            ]
        },
        {
            "tag": "base_datos",
            "patterns": [
                "que es una base de datos",
                "que significa base de datos",
                "que es un sistema de base de datos",
                "base de datos",
                "dime que es una base de datos",
                "dime que significa base de datos",
                "di que es una base de datos",
                "di que significa base de datos",
                "que es un bd",
                "que significa bd",
                "que es una db",
                "que significa db",
                "que es un sistema de bd",
                "que es un sistema de db"
            ],
            "responses": [
                "es un sistema para almacenar y organizar informacion",
                "es esencial para aplicaciones que necesitan manejar grandes cantidades de informacion",
                "es un sistema para almacenar y gestionar informacion de manera estructurada",
                "se utiliza para guardar datos que pueden ser consultados y modificados facilmente",
                "puede ser sql como mysql y postgresql, o no sql como mongodb",
                "se utiliza para guardar datos que seran usados por el backend"
            ]
        },
        {
            "tag": "diferencia_sql_no_sql",
            "patterns": [
                "que diferencia hay entre sql y no sql",
                "cual es la diferencia entre sql y no sql",
                "que distingue a sql y no sql",
                "que separa a sql y no sql",
                "que diferencia a sql y no sql"
            ],
            "responses": [
                "sql usa tablas con esquemas definidos, mientras que no sql es mas flexible",
                "sql es ideal para datos estructurados, no sql para datos no estructurados",
                "sql incluye sistemas como mysql y postgresql, no sql incluye mongodb y cassandra"
            ]
        },
        {
            "tag": "comunican_frontend_backend",
            "patterns": [
                "como se comunican frontend y backend",
                "como se comunican el frontend y el backend",
                "como se comunican el cliente y el servidor",
                "como se comunican el usuario y el servidor",
                "como se comunican el navegador y el servidor",
                "como se comunican el cliente y el backend",
                "como se comunican el usuario y el backend",
                "como se comunican el navegador y el backend"
            ],
            "responses": [
                "a traves de apis usando protocolos como http",
                "el frontend envia solicitudes al backend y este responde con datos",
                "la comunicacion puede ser en formatos como json o xml"
            ]
        },
        {
            "tag": "full_stack_developer",
            "patterns": [
                "que es un full stack developer",
                "que significa full stack developer",
                "que hace un full stack developer",
                "full stack developer"
            ],
            "responses": [
                "es un desarrollador que trabaja tanto en frontend como en backend",
                "tiene conocimientos en diseño de interfaces y logica del servidor",
                "puede desarrollar aplicaciones completas de inicio a fin"
            ]
        },
        {
            "tag": "diferencia_frontend_backend",
            "patterns": [
                "que diferencia hay entre frontend y backend",
                "cual es la diferencia entre frontend y backend",
                "que distingue a frontend y backend",
                "que separa a frontend y backend",
                "que diferencia a frontend y backend"
            ],
            "responses": [
                "el frontend es lo que ve el usuario, el backend es la logica detras",
                "el frontend usa html, css y javascript, el backend usa lenguajes como java o python",
                "el backend se encarga de procesar datos y gestionar la comunicacion con bases de datos"
            ]
        },
        {
            "tag": "tipos_bases_datos",
            "patterns": [
                "que tipos de bases de datos existen",
                "que tipos de sistemas de base de datos hay",
                "tipos de bases de datos",
                "tipos de sistemas de base de datos",
                "tipos de db",
                "dime tipos de bases de datos",
                "dime tipos de sistemas de base de datos",
                "di tipos de bases de datos",
                "di tipos de sistemas de base de datos"
            ],
            "responses": [
                "hay bases de datos relacionales y no relacionales",
                "tambien existen bases de datos jerarquicas, en red y orientadas a objetos",
                "dependen del tipo de informacion y del caso de uso"
            ]
        },
        {
            "tag": "base_datos_relacional",
            "patterns": [
                "que es una base de datos relacional",
                "que significa base de datos relacional",
                "que es un sistema de base de datos relacional",
                "base de datos relacional",
                "dime que es una base de datos relacional",
                "dime que significa base de datos relacional",
                "di que es una base de datos relacional",
                "di que significa base de datos relacional",
                "que es un bd relacional",
                "que significa bd relacional",
                "que es una db relacional",
                "que significa db relacional",
                "que es un sistema de bd relacional",
                "que es un sistema de db relacional"
            ],
            "responses": [
                "es una base de datos que organiza la informacion en tablas con filas y columnas",
                "usa sql como lenguaje para consultar y modificar datos",
                "ejemplos incluyen mysql, postgresql y sql server"
            ]
        },
        {
            "tag": "base_datos_no_relacional",
            "patterns": [
                "que es una base de datos no relacional",
                "que significa base de datos no relacional",
                "que es un sistema de base de datos no relacional",
                "base de datos no relacional",
                "dime que es una base de datos no relacional",
                "dime que significa base de datos no relacional",
                "di que es una base de datos no relacional",
                "di que significa base de datos no relacional",
                "que es un bd no relacional",
                "que significa bd no relacional",
                "que es una db no relacional",
                "que significa db no relacional",
                "que es un sistema de bd no relacional",
                "que es un sistema de db no relacional"
            ],
            "responses": [
                "es una base de datos que no usa tablas para organizar los datos",
                "puede almacenar informacion en formatos como documentos, grafos o claves-valor",
                "ejemplos incluyen mongodb, cassandra y redis"
            ]
        },
        {
            "tag": "esquema_base_datos",
            "patterns": [
                "que es un esquema en una base de datos",
                "que significa esquema en una base de datos",
                "que es un esquema de base de datos",
                "esquema base de datos",
                "dime que es un esquema en una base de datos",
                "dime que significa esquema en una base de datos",
                "di que es un esquema en una base de datos",
                "di que significa esquema en una base de datos",
                "que es un esquema de bd",
                "que significa esquema de bd",
                "que es un esquema de db",
                "que significa esquema de db",
                "que es un esquema de base de datos",
                "que significa esquema de base de datos"
            ],
            "responses": [
                "es la estructura que define como se organizan los datos en una base de datos",
                "incluye tablas, columnas, tipos de datos y relaciones entre tablas",
                "es importante en bases de datos relacionales"
            ]
        },
        {
            "tag": "sql",
            "patterns": [
                "que es sql",
                "que significa sql",
                "que es un lenguaje de programacion sql",
                "sql",
                "dime que es sql",
                "dime que significa sql",
                "di que es sql",
                "di que significa sql"
            ],
            "responses": [
                "es un lenguaje de consulta estructurado usado para interactuar con bases de datos relacionales",
                "permite realizar operaciones como insertar, consultar y eliminar datos",
                "es compatible con sistemas como mysql, postgresql y oracle"
            ]
        },
        {
            "tag": "mysql",
            "patterns": [
                "que es mysql",
                "que significa mysql",
                "que es un sistema de base de datos mysql",
                "mysql",
                "dime que es mysql",
                "dime que significa mysql",
                "di que es mysql",
                "di que significa mysql"
            ],
            "responses": [
                "es un sistema de gestion de bases de datos relacional de codigo abierto",
                "es popular por ser rapido y facil de usar",
                "se usa comunmente en aplicaciones web"
            ]
        },
        {
            "tag": "postgresql",
            "patterns": [
                "que es postgresql",
                "que significa postgresql",
                "que es un sistema de base de datos postgresql",
                "postgresql",
                "dime que es postgresql",
                "dime que significa postgresql",
                "di que es postgresql",
                "di que significa postgresql"
            ],
            "responses": [
                "es un sistema de gestion de bases de datos relacional avanzado y de codigo abierto",
                "ofrece soporte para transacciones complejas y extensibilidad",
                "es ideal para aplicaciones empresariales y proyectos avanzados"
            ]
        },
        {
            "tag": "sql_server",
            "patterns": [
                "que es sql server",
                "que significa sql server",
                "que es un sistema de base de datos sql server",
                "sql server",
                "dime que es sql server",
                "dime que significa sql server",
                "di que es sql server",
                "di que significa sql server"
            ],
            "responses": [
                "es un sistema de gestion de bases de datos relacional desarrollado por microsoft",
                "se usa principalmente en entornos empresariales",
                "ofrece integracion con otros productos de microsoft como azure y visual studio"
            ]
        },
        {
            "tag": "mongodb",
            "patterns": [
                "que es mongodb",
                "que significa mongodb",
                "que es un sistema de base de datos mongodb",
                "mongodb",
                "dime que es mongodb",
                "dime que significa mongodb",
                "di que es mongodb",
                "di que significa mongodb"
            ],
            "responses": [
                "es una base de datos no relacional que almacena datos en formato de documentos json",
                "es ideal para aplicaciones que manejan datos no estructurados o semiestructurados",
                "es popular en aplicaciones web modernas y sistemas distribuidos"
            ]
        },
        {
            "tag": "usa_mongodb",
            "patterns": [
                "para que se usa mongodb",
                "que se puede hacer con mongodb",
                "que aplicaciones tiene mongodb",
                "que se puede desarrollar con mongodb",
                "que se puede programar con mongodb",
                "dime para que se usa mongodb",
                "dime que se puede hacer con mongodb",
                "dime que aplicaciones tiene mongodb",
                "dime que se puede desarrollar con mongodb",
                "dime que se puede programar con mongodb",
                "di para que se usa mongodb",
                "di que se puede hacer con mongodb",
                "di que aplicaciones tiene mongodb",
                "di que se puede desarrollar con mongodb",
                "di que se puede programar con mongodb"
            ],
            "responses": [
                "se utiliza en aplicaciones web, sistemas de recomendacion y big data",
                "es ideal para manejar grandes volumenes de datos y escalar horizontalmente",
                "se usa cuando no se necesita una estructura estricta de tablas y columnas"
            ]
        },
        {
            "tag": "redis",
            "patterns": [
                "que es redis",
                "que significa redis",
                "que es un sistema de base de datos redis",
                "redis",
                "dime que es redis",
                "dime que significa redis",
                "di que es redis",
                "di que significa redis"
            ],
            "responses": [
                "es una base de datos no relacional basada en clave-valor",
                "es conocida por su velocidad y se usa como cache o para almacenar sesiones",
                "es popular en aplicaciones que requieren acceso rapido a los datos"
            ]
        },
        {
            "tag": "cassandra",
            "patterns": [
                "que es cassandra",
                "que significa cassandra",
                "que es un sistema de base de datos cassandra",
                "cassandra",
                "dime que es cassandra",
                "dime que significa cassandra",
                "di que es cassandra",
                "di que significa cassandra"
            ],
            "responses": [
                "es una base de datos no relacional distribuida y escalable",
                "es ideal para manejar grandes volumenes de datos en tiempo real",
                "es utilizada por empresas como netflix y twitter para alta disponibilidad"
            ]
        },
        {
            "tag": "diferencias_mongodb_redis",
            "patterns": [
                "que diferencias hay entre mongodb y redis",
                "cual es la diferencia entre mongodb y redis",
                "que distingue a mongodb y redis",
                "que separa a mongodb y redis",
                "que diferencia a mongodb y redis",
                "mongodb vs redis"
            ],
            "responses": [
                "mongodb almacena documentos json, mientras que redis usa un modelo clave-valor",
                "redis es mas rapido pero mongodb es mas flexible para datos complejos",
                "redis es ideal para cache y mongodb para datos no estructurados"
            ]
        },
        {
            "tag": "compilador",
            "patterns": [
                "que es un compilador",
                "que significa compilador",
                "que es un programa compilador",
                "compilador",
                "dime que es un compilador",
                "dime que significa compilador",
                "di que es un compilador",
                "di que significa compilador"
            ],
            "responses": [
                "un compilador es un programa que traduce el código fuente de un lenguaje de programación de alto nivel a un lenguaje de bajo nivel o código máquina",
                "el compilador permite que el código escrito en un lenguaje comprensible por los humanos sea ejecutado por una computadora",
                "un ejemplo de compilador es GCC para C o C++"
            ]
        },
        {
            "tag": "interprete",
            "patterns": [
                "que es un interprete",
                "que significa interprete",
                "que es un programa interprete",
                "interprete",
                "dime que es un interprete",
                "dime que significa interprete",
                "di que es un interprete",
                "di que significa interprete"
            ],
            "responses": [
                "es un tipo de programa que ejecuta el código de un lenguaje de programación línea por línea, sin necesidad de compilar todo el código de antemano",
                "a diferencia de un compilador, un intérprete no crea un archivo de código máquina, sino que traduce y ejecuta las instrucciones directamente",
                "un ejemplo común de intérprete es Python"
            ]
        },
        {
            "tag": "bug",
            "patterns": [
                "que es un bug",
                "que significa bug",
                "que es un error de programacion",
                "bug",
                "error de programacion",
                "dime que es un bug",
                "dime que significa bug",
                "di que es un bug",
                "di que significa bug",
                "que es un fallo de programacion",
                "que significa fallo de programacion",
                "que es un error de codigo",
                "que significa error de codigo",
                "que es un fallo de codigo",
                "que significa fallo de codigo"
            ],
            "responses": [
                "un bug es un error o fallo en el código de un programa que causa un comportamiento inesperado o incorrecto",
                "los bugs pueden ser causados por errores de sintaxis, lógicas o problemas de rendimiento",
                "es importante depurar el código para encontrar y corregir los bugs"
            ]
        },
        {
            "tag": "debugger",
            "patterns": [
                "que es un debugger",
                "que significa debugger",
                "que es una herramienta debugger",
                "debugger",
                "herramienta debugger",
                "dime que es un debugger",
                "dime que significa debugger",
                "di que es un debugger",
                "di que significa debugger"
            ],
            "responses": [
                "un debugger es una herramienta que permite examinar el estado de un programa mientras se ejecuta, ayudando a identificar y corregir bugs",
                "los debuggers permiten realizar seguimiento de la ejecución del código, inspeccionar variables y controlar el flujo del programa",
                "algunos debuggers populares son GDB para C y C++, o el debugger integrado en IDEs como Visual Studio Code"
            ]
        },
        {
            "tag": "variable",
            "patterns": [
                "que es una variable",
                "que significa variable",
                "que es un espacio de almacenamiento",
                "variable",
                "dime que es una variable",
                "dime que significa variable",
                "di que es una variable",
                "variables"
            ],
            "responses": [
                "una variable es un espacio de almacenamiento que contiene un valor que puede cambiar durante la ejecución de un programa",
                "las variables se utilizan para almacenar datos como números, cadenas de texto o incluso objetos",
                "cada variable tiene un tipo de dato que determina qué tipo de valores puede almacenar, como 'int' para enteros o 'string' para texto"
            ]
        },
        {
            "tag": "tipo_dato",
            "patterns": [
                "que es un tipo de dato",
                "que significa tipo de dato",
                "que es un tipo de valor",
                "tipo de dato",
                "dime que es un tipo de dato",
                "dime que significa tipo de dato",
                "di que es un tipo de dato",
                "di que significa tipo de dato",
                "que es un tipo de valor",
                "que significa tipo de valor",
                "que es un tipo de variable",
                "que significa tipo de variable"
            ],
            "responses": [
                "un tipo de dato es una clasificación de los valores que una variable puede almacenar, como números, texto o booleanos",
                "los tipos de datos básicos incluyen enteros (int), números decimales (float), texto (string) y valores lógicos (boolean)",
                "los tipos de datos también pueden ser más complejos, como listas, diccionarios o incluso clases definidas por el usuario"
            ]
        },
        {
            "tag": "tipo_dato_primitivo",
            "patterns": [
                "que es un tipo de dato primitivo",
                "que significa tipo de dato primitivo",
                "que es un tipo de valor primitivo",
                "tipo de dato primitivo",
                "dime que es un tipo de dato primitivo",
                "dime que significa tipo de dato primitivo",
                "di que es un tipo de dato primitivo",
                "di que significa tipo de dato primitivo",
                "que es un tipo de valor primitivo",
                "que significa tipo de valor primitivo",
                "que es un tipo de variable primitivo",
                "que significa tipo de variable primitivo"
            ],
            "responses": [
                "un tipo de dato primitivo es un tipo de dato básico que no se puede descomponer en tipos más simples",
                "los tipos de datos primitivos incluyen enteros (int), decimales (float), cadenas de texto (string) y valores lógicos (boolean)",
                "estos tipos de datos son fundamentales y forman la base para construir otros tipos de datos más complejos"
            ]
        },
        {
            "tag": "tipo_dato_compuesto",
            "patterns": [
                "que es un tipo de dato compuesto",
                "que significa tipo de dato compuesto",
                "que es un tipo de valor compuesto",
                "tipo de dato compuesto",
                "dime que es un tipo de dato compuesto",
                "dime que significa tipo de dato compuesto",
                "di que es un tipo de dato compuesto",
                "di que significa tipo de dato compuesto",
                "que es un tipo de valor compuesto",
                "que significa tipo de valor compuesto",
                "que es un tipo de variable compuesto",
                "que significa tipo de variable compuesto"
            ],
            "responses": [
                "un tipo de dato compuesto es un tipo de dato que se crea combinando varios tipos de datos primitivos o incluso otros tipos compuestos",
                "los tipos de datos compuestos incluyen listas (arrays), diccionarios (objetos en algunos lenguajes), tuplas y conjuntos",
                "estos tipos de datos permiten almacenar colecciones de datos más complejas y estructuradas"
            ]
        },
        {
            "tag": "array",
            "patterns": [
                "que es un array",
                "que significa array",
                "que es una lista de elementos",
                "array",
                "lista de elementos",
                "dime que es un array",
                "dime que significa array",
                "di que es un array",
                "di que significa array",
                "que es un arreglo",
                "que significa arreglo",
                "que es una lista en programacion",
                "que significa lista en programacion"
            ],
            "responses": [
                "un array es una estructura de datos que almacena una colección de elementos del mismo tipo",
                "los elementos de un array se almacenan en posiciones contiguas de memoria y se accede a ellos mediante un índice",
                "en muchos lenguajes de programación, como javascript o Python, los arrays pueden ser dinámicos o de tamaño fijo"
            ]
        },
        {
            "tag": "lista_programación",
            "patterns": [
                "que es una lista en programación",
                "que significa lista en programación",
                "que es una lista de elementos en programación",
                "lista en programación",
                "dime que es una lista en programación",
                "dime que significa lista en programación",
                "di que es una lista en programación",
                "di que significa lista en programación",
                "que es un arreglo en programación",
                "que significa arreglo en programación",
                "que es un array en programación",
                "que significa array en programación"
            ],
            "responses": [
                "una lista es un tipo de dato compuesto que almacena una colección ordenada de elementos, que pueden ser de diferentes tipos",
                "a diferencia de los arrays, las listas pueden almacenar elementos de diferentes tipos de datos en muchos lenguajes, como en Python",
                "una lista también puede ser dinámica, es decir, se puede cambiar su tamaño durante la ejecución del programa"
            ]
        },
        {
            "tag": "que_diccionario",
            "patterns": [
                "que es un diccionario",
                "que significa diccionario",
                "que es una tabla hash",
                "diccionario",
                "tabla hash",
                "dime que es un diccionario",
                "dime que significa diccionario",
                "di que es un diccionario",
                "di que significa diccionario",
                "que es un mapa",
                "que significa mapa"
            ],
            "responses": [
                "un diccionario es una estructura de datos que almacena pares de clave-valor",
                "cada elemento en un diccionario está compuesto por una clave única y un valor asociado a esa clave",
                "los diccionarios son útiles cuando necesitas buscar un valor rápidamente a partir de una clave, como en Python o javascript"
            ]
        },
        {
            "tag": "tupla",
            "patterns": [
                "que es una tupla",
                "que significa tupla",
                "que es una estructura inmutable",
                "tupla",
                "estructura inmutable",
                "dime que es una tupla",
                "dime que significa tupla",
                "di que es una tupla",
                "di que significa tupla"
            ],
            "responses": [
                "una tupla es una estructura de datos similar a una lista, pero con la diferencia de que las tuplas son inmutables, es decir, no pueden ser modificadas después de su creación",
                "en muchos lenguajes de programación, como Python, las tuplas se utilizan para almacenar datos que no deben cambiar durante la ejecución del programa",
                "las tuplas también pueden contener elementos de diferentes tipos de datos"
            ]
        },
        {
            "tag": "conjunto",
            "patterns": [
                "que es un conjunto",
                "que significa conjunto",
                "que es una colección de elementos únicos",
                "conjunto",
                "colección de elementos únicos",
                "dime que es un conjunto",
                "dime que significa conjunto",
                "di que es un conjunto",
                "di que significa conjunto"
            ],
            "responses": [
                "un conjunto es una colección de elementos no ordenados y sin duplicados",
                "los conjuntos son útiles cuando necesitas almacenar datos únicos, sin preocuparte del orden en que se insertan",
                "en Python, los conjuntos se definen utilizando la clase 'set', y son diferentes de las listas o tuplas en cuanto a la unicidad de los elementos"
            ]
        },
        {
            "tag": "que_es_string",
            "patterns": [
                "que es un string",
                "que significa string",
                "que es una cadena de texto",
                "string",
                "cadena de texto",
                "dime que es un string",
                "dime que significa string",
                "di que es un string",
                "di que significa string"
            ],
            "responses": [
                "un string es un tipo de dato que representa una secuencia de caracteres, como texto",
                "los strings pueden incluir letras, números y otros caracteres, y se utilizan para manipular texto en la mayoría de los lenguajes de programación",
                "en algunos lenguajes, los strings son inmutables, lo que significa que no pueden ser modificados después de su creación, como en Python o Java"
            ]
        },
        {
            "tag": "que_es_un_booleano",
            "patterns": [
                "que es un booleano",
                "que significa booleano",
                "que es un valor lógico",
                "booleano",
                "valor lógico",
                "dime que es un booleano",
                "dime que significa booleano",
                "di que es un booleano",
                "di que significa booleano"
            ],
            "responses": [
                "un booleano es un tipo de dato que tiene solo dos valores posibles: verdadero (true) o falso (false)",
                "los valores booleanos se utilizan en las condiciones y estructuras de control, como 'if' o 'while', para tomar decisiones en un programa",
                "los booleanos son fundamentales en la programación lógica y las expresiones condicionales"
            ]
        },
        {
            "tag": "valor_nulo",
            "patterns": [
                "que es un valor nulo",
                "que significa valor nulo",
                "que es un valor especial",
                "valor nulo",
                "valor especial",
                "dime que es un valor nulo",
                "dime que significa valor nulo",
                "di que es un valor nulo",
                "di que significa valor nulo"
            ],
            "responses": [
                "un valor nulo es un valor especial que representa la ausencia de un valor válido o definido en una variable",
                "el valor nulo puede ser utilizado para indicar que una variable aún no ha sido inicializada o que no tiene un valor asignado",
                "en algunos lenguajes, como javascript, se utiliza 'null' para denotar un valor nulo, mientras que en otros, como Python, se utiliza 'None'"
            ]
        },
        {
            "tag": "tipo_dato_flotante",
            "patterns": [
                "que es un tipo de dato flotante",
                "que significa tipo de dato flotante",
                "que es un valor decimal",
                "tipo de dato flotante",
                "valor decimal",
                "dime que es un tipo de dato flotante",
                "dime que significa tipo de dato flotante",
                "di que es un tipo de dato flotante",
                "di que significa tipo de dato flotante"
            ],
            "responses": [
                "un tipo de dato flotante es un tipo numérico que se utiliza para representar números con decimales",
                "los números flotantes son especialmente útiles para realizar cálculos precisos que incluyen valores decimales, como 3.14 o 0.5",
                "en muchos lenguajes de programación, como Python o Java, los flotantes se representan con el tipo 'float'"
            ]
        },
        {
            "tag": "tipo_dato_entero",
            "patterns": [
                "que es un tipo de dato entero",
                "que significa tipo de dato entero",
                "que es un valor numérico",
                "tipo de dato entero",
                "valor numérico",
                "dime que es un tipo de dato entero",
                "dime que significa tipo de dato entero",
                "di que es un tipo de dato entero",
                "di que significa tipo de dato entero"
            ],
            "responses": [
                "un tipo de dato entero es un tipo numérico que se utiliza para representar números sin decimales, como 1, 100 o -5",
                "los enteros son fundamentales en programación para realizar operaciones matemáticas simples, como contar o iterar sobre elementos",
                "en lenguajes como Python o Java, los enteros se representan con el tipo 'int'"
            ]
        },
        {
            "tag": "tipo_dato_char",
            "patterns": [
                "que es el tipo de dato char",
                "que significa tipo de dato char",
                "que es un valor de caracter",
                "tipo de dato char",
                "valor de caracter",
                "dime que es el tipo de dato char",
                "dime que significa tipo de dato char",
                "di que es el tipo de dato char",
                "di que significa tipo de dato char",
                "que es un char",
                "que significa char",
                "que es un caracter",
                "que significa caracter"
            ],
            "responses": [
                "el tipo de dato 'char' se utiliza para representar un solo carácter, como 'a', 'B' o '9'",
                "el 'char' es comúnmente utilizado en lenguajes como C y C++ para manipular caracteres individuales en cadenas de texto",
                "en otros lenguajes como Python, los caracteres son tratados como strings de longitud 1"
            ]
        },
        {
            "tag": "tipo_dato_complejo",
            "patterns": [
                "que es el tipo de dato complejo",
                "que significa tipo de dato complejo",
                "que es un valor complejo",
                "tipo de dato complejo",
                "valor complejo",
                "dime que es el tipo de dato complejo",
                "dime que significa tipo de dato complejo",
                "di que es el tipo de dato complejo",
                "di que significa tipo de dato complejo",
                "que es un complejo",
                "que significa complejo",
                "que es un numero complejo",
                "que significa numero complejo"
            ],
            "responses": [
                "el tipo de dato complejo se utiliza para representar números que tienen una parte real y una parte imaginaria, como 3 + 4i",
                "en algunos lenguajes, como Python, puedes trabajar con números complejos utilizando el tipo 'complex'",
                "los números complejos son utilizados en áreas como la ingeniería, matemáticas y procesamiento de señales"
            ]
        },
        {
            "tag": "que_es_una_funcion",
            "patterns": [
                "que es una funcion",
                "que significa funcion",
                "que es un metodo",
                "funcion",
                "metodo",
                "dime que es una funcion",
                "dime que significa funcion",
                "di que es una funcion",
                "di que significa funcion",
                "que es una subrutina",
                "que significa subrutina",
                "que es un procedimiento",
                "que significa procedimiento"
            ],
            "responses": [
                "una función es un bloque de código que realiza una tarea específica y puede ser reutilizado en diferentes partes del programa",
                "las funciones pueden aceptar entradas (parámetros) y devolver un valor como resultado",
                "en muchos lenguajes de programación, las funciones permiten organizar el código de manera modular y eficiente"
            ]
        },
        {
            "tag": "que_es_la_recursion",
            "patterns": [
                "que es la recursion",
                "que significa recursion",
                "que es una funcion recursiva",
                "recursion",
                "funcion recursiva",
                "dime que es la recursion",
                "dime que significa recursion",
                "di que es la recursion",
                "di que significa recursion",
                "que es un algoritmo recursivo",
                "que significa algoritmo recursivo",
                "que es un proceso recursivo",
                "que significa proceso recursivo"
            ],
            "responses": [
                "la recursión es una técnica en programación en la que una función se llama a sí misma para resolver un problema",
                "generalmente, la recursión se utiliza para resolver problemas que se pueden dividir en subproblemas más pequeños, como en el caso de los árboles o la búsqueda binaria",
                "es importante que una función recursiva tenga una condición base que detenga la llamada recursiva"
            ]
        },
        {
            "tag": "greetings",
            "patterns": [
                "Hello",
                "Good morning",
                "Good afternoon",
                "Good night",
                "Hi"
            ],
            "responses": [
                "Hello! ",
                "Good morning! Tell me how I can help you.",
                "It's nice to see you! Tell me how I can help you.",
                "How can I help you?",
                "Hi! "
            ]
        },
        {
            "tag": "goodbyes",
            "patterns": [
                "Bye",
                "See you later",
                "See you",
                "See you soon",
                "Goodbye"
            ],
            "responses": [
                "Bye bye! ",
                "See you later! ",
                "See you! ",
                "See you soon! ",
                "Bye! "
            ]
        },
        {
            "tag": "thanks",
            "patterns": [
                "Thank you",
                "Thank you so much",
                "Thanks for your help",
                "I thank you",
                "Thank you, you are great"
            ],
            "responses": [
                "You are welcome! ",
                "It doesn't matter! ",
                "Thank you for trusting me",
                "Thanks to you for asking!",
                "Thank you! "
            ]
        },
        {
            "tag": "feelings",
            "patterns": [
                "I'm happy",
                "I feel sad",
                "I'm excited",
                "I feel alone",
                "I'm bored"
            ],
            "responses": [
                "It's good that you're happy! ",
                "I'm sorry to hear that you feel sad. ",
                "What a thrill! ",
                "Loneliness is difficult. ",
                "Being bored is normal sometimes. "
            ]
        },
        {
            "tag": "information",
            "patterns": [
                "What is a chatbot?",
                "How do chatbots work?",
                "What is a chatbot for?",
                "Tell me something about chatbots",
                "Explain to me what a chatbot is"
            ],
            "responses": [
                "A chatbot is a computer program designed to simulate conversations with humans.",
                "Chatbots use artificial intelligence to interpret and respond to users' messages."
            ]
        },
        {
            "tag": "superheroes",
            "patterns": [
                "Who is your favorite superhero?",
                "Do you like superheroes?",
                "Tell me something about superheroes"
            ],
            "responses": [
                "I like Iron Man, he's very smart!",
                "Batman always has a plan.",
                "Superheroes inspire us to be better!"
            ]
        },
        {
            "tag": "variables",
            "patterns": [
                "What is a variable in programming?",
                "Explain to me what a variable means.",
                "What are variables used for?",
                "Can you define a variable?",
                "How are variables used in a program?"
            ],
            "responses": [
                "A variable is a container for storing data that can change during program execution.",
                "In programming, a variable is a name that is assigned to a space in memory to store values.",
                "Variables allow developers to store, modify, and reuse information within a program.",
                "It is an identifier that is used to temporarily store information and that can be manipulated as needed.",
                "Think of a variable as a label that helps you organize and access different types of data in a program."
            ]
        },
        {
            "tag": "constants",
            "patterns": [
                "What is a constant in programming?",
                "How is a constant defined?",
                "What are constants for?",
                "What is the difference between a variable and a constant?",
                "Explain to me what constant means in a program."
            ],
            "responses": [
                "A constant is a value that does not change during the execution of a program.",
                "A constant is used to represent fixed values, such as the number pi or a specific configuration.",
                "Unlike variables, constants maintain their value unchanged after being declared.",
                "Defining a constant helps improve readability and prevent accidental errors in a program.",
                "In many languages, constants are declared with special keywords, such as 'const' or 'final'."
            ]
        },
        {
            "tag": "functions",
            "patterns": [
                "What is a function in programming?",
                "Explain to me how the functions work.",
                "What are functions used for in a program?",
                "What types of functions exist?",
                "Give me an example of how a function is used."
            ],
            "responses": [
                "A function is a reusable block of code designed to perform a specific task.",
                "Functions help structure code, avoid duplication, and improve maintainability.",
                "They can receive input parameters and return a result as output.",
                "There are predefined functions in languages ​​and custom functions created by developers.",
                "Think of a function like a recipe: it receives ingredients (parameters) and returns a final dish (result)."
            ]
        },
        {
            "tag": "classes",
            "patterns": [
                "What is a programming class?",
                "Explain to me what class means in the OOP.",
                "What are classes for in a program?",
                "What defines a class?",
                "Give me an example of how a class is used."
            ],
            "responses": [
                "A class is a model or template that defines the properties and behaviors of an object.",
                "In object-oriented programming, classes are essential to organize the code.",
                "They are used to create object instances, each with its own attributes and methods.",
                "A class contains attributes (data) and methods (functions) that represent the state and behavior of an object.",
                "For example, a 'Car' class can have attributes such as 'color' and 'model', and methods such as 'accelerate' or 'brake'."
            ]
        },
        {
            "tag": "methods",
            "patterns": [
                "What is a method in programming?",
                "Explain to me how the methods work.",
                "What is the difference between a function and a method?",
                "What types of methods exist?",
                "Give me an example of a method in a class."
            ],
            "responses": [
                "A method is a function associated with an object or class in object-oriented programming.",
                "Methods allow you to perform specific operations on the data of an object.",
                "Unlike a general function, a method always belongs to an object or class.",
                "For example, a 'walk()' method could be part of a 'Person' class.",
                "There are static, instance and special methods, such as the constructor."
            ]
        },
        {
            "tag": "functional_programming",
            "patterns": [
                "What is functional programming?",
                "Explain to me the principles of functional programming.",
                "What characteristics does functional programming have?",
                "What are the advantages of functional programming?",
                "What languages ​​use functional programming?"
            ],
            "responses": [
                "Functional programming is a paradigm that treats computing as the evaluation of mathematical functions.",
                "It focuses on pure functions, data immutability, and avoids the use of global states.",
                "In this paradigm, functions are first-class citizens and can be passed as arguments or returned as results.",
                "Languages ​​such as Haskell, Lisp, and Scala are prominent examples of functional programming.",
                "Among its advantages are ease of debugging, modularity and the ability to parallelize processes."
            ]
        },
        {
            "tag": "programming_paradigms",
            "patterns": [
                "What are programming paradigms?",
                "What are the main programming paradigms?",
                "Explain to me what a programming paradigm is.",
                "What are paradigms used for in programming?",
                "Give me examples of programming paradigms."
            ],
            "responses": [
                "A programming paradigm is an approach or style for solving problems using code.",
                "Among the best-known paradigms are structured, object-oriented and functional programming.",
                "Each paradigm has advantages and disadvantages depending on the problem to be solved.",
                "For example, object-oriented programming organizes code around objects, while functional programming focuses on functions.",
                "Paradigms help to better structure the code and choose appropriate tools for each task."
            ]
        },
        {
            "tag": "lambda_expressions",
            "patterns": [
                "What is a lambda expression?",
                "Explain to me how lambda expressions work.",
                "What are lambda expressions used for?",
                "Give me an example of a lambda function.",
                "What characteristics do lambda functions have?"
            ],
            "responses": [
                "A lambda expression is an anonymous function that can be defined in a single line of code.",
                "They are useful for simple tasks and when it is not necessary to name the function.",
                "In Python, for example, you can write: lambda x: x * 2, which doubles a number.",
                "Lambda functions are common in functional programming and for quick operations like filters and maps.",
                "They are a powerful tool for writing concise and clear code."
            ]
        },
        {
            "tag": "object-oriented_programming",
            "patterns": [
                "What is object-oriented programming?",
                "Explain to me the principles of object-oriented programming.",
                "What advantages does OOP have?",
                "What are the pillars of object-oriented programming?",
                "What languages ​​do OOP use?"
            ],
            "responses": [
                "Object-oriented programming organizes code around objects that contain data and behaviors.",
                "Its fundamental pillars are encapsulation, inheritance, polymorphism and abstraction.",
                "OOP facilitates code maintenance, reuse, and scalability.",
                "Languages ​​like Java, Python, and C++ are popular to develop with this paradigm.",
                "It is ideal for modeling real-world problems in terms of objects and relationships."
            ]
        },
        {
            "tag": "cycles",
            "patterns": [
                "What are cycles in programming?",
                "Explain to me how loops work.",
                "What types of cycles exist?",
                "What are cycles for?",
                "Give me an example of a loop in code."
            ],
            "responses": [
                "Loops allow a block of code to be repeated while a condition is met.",
                "There are loops such as for, while and do while, depending on the language and the need.",
                "They are essential for repetitive tasks, such as iterating over lists or performing calculations.",
                "An example in Python: for i in range(5): print(i), which prints numbers 0 to 4.",
                "Cycles are essential for programming efficiency."
            ]
        },
        {
            "tag": "cycle_for",
            "patterns": [
                "What is a for loop?",
                "Explain to me how a for loop works.",
                "What is the for used for?",
                "Give me an example of a for loop.",
                "What characteristics does a for loop have?"
            ],
            "responses": [
                "A for loop iterates over a sequence of elements, such as a list or range.",
                "It is useful for looping through collections of data or repeating actions a known number of times.",
                "An example in Python: for x in [1, 2, 3]: print(x), which prints each element in the list.",
                "The for loop simplifies the handling of iterable structures in programming.",
                "It is widely used to manipulate lists, strings, and numeric ranges."
            ]
        },
        {
            "tag": "while_loop",
            "patterns": [
                "What is a while loop?",
                "Explain to me how a while loop works.",
                "When is a while used?",
                "Give me an example of a while loop.",
                "What advantages does a while loop have?"
            ],
            "responses": [
                "A while loop executes a block of code as long as a condition is met.",
                "It is useful when you do not know in advance how many iterations will be needed.",
                "An example in Python: while x < 5: print(x); ",
                "The while is ideal for loops dependent on events or dynamic conditions.",
                "Care must be taken not to create infinite loops when using while."
            ]
        },
        {
            "tag": "loop_do_while",
            "patterns": [
                "What is a do while loop?",
                "Explain to me how a do while loop works.",
                "When is a do while used?",
                "Give me an example of a do while loop.",
                "What is the difference between do while and while?"
            ],
            "responses": [
                "A do while loop executes the code block at least once before checking the condition.",
                "It is useful when you need to ensure that the code is executed at least once.",
                "An example in C++: do { cout << x; ",
                "Unlike while, do while guarantees an initial execution before evaluating the condition.",
                "It is ideal for tasks where the block must be executed at least once, such as interactive menus."
            ]
        },
        {
            "tag": "examples_of_variable_declaration_in_javascript",
            "patterns": [
                "Give me examples of how to declare variables in javascript.",
                "How are variables declared in javascript?",
                "Show me examples of variable declaration in javascript.",
                "I want to see how to declare variables with var, let, and const.",
                "Can you give me an example of a variable in javascript?"
            ],
            "responses": [
                "Here is a basic example:\n\tvar name = 'Juan';\n\tlet age = 25;\n\tconst PI = 3.14;",
                "You can declare variables like this:\n\tlet city = 'Madrid';\n\tconst country = 'Spain';",
                "With var you can do this:\n\tvar message = 'Hello, world';\nHowever, it is recommended to use let or const.",
                "Example with let and const:\n\tlet number = 42;\n\tconst text = 'javascript is awesome';",
                "To declare a variable that changes:\n\tlet counter = 0;\nAnd for constant values:\n\tconst maximum = 100;"
            ]
        },
        {
            "tag": "examples_of_constant_declaration_in_javascript",
            "patterns": [
                "Give me examples of how to declare constants in javascript.",
                "How are constants declared in javascript?",
                "Show me examples of constant declaration in javascript.",
                "I want to see how constants are used in javascript.",
                "Can you give me examples of constants in javascript?"
            ],
            "responses": [
                "To declare a constant:\n\tconst PI = 3.14;",
                "Example of a text constant:\n\tconst name = 'Carlos';",
                "For working with objects:\n\tconst configuration = {\n\t\ttheme: 'dark'\n\t};",
                "Here is another example:\n\tconst URL = 'https://api.example.com';",
                "Constants do not change:\n\tconst GRAVITY = 9.8;\nMake sure to assign them a value when declaring them."
            ]
        },
        {
            "tag": "examples_of_for_loop_in_javascript",
            "patterns": [
                "Give me examples of a for loop in javascript.",
                "How is a for loop used in javascript?",
                "Show me examples of for loops in javascript.",
                "I want to see a practical example of a for loop in javascript.",
                "Can you show me how to use a for loop in javascript?"
            ],
            "responses": [
                "A basic example:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "To iterate over an array:\n\tlet numbers = [1, 2, 3];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tconsole.log(numbers[i]);\n\t}",
                "Using for with objects:\n\tfor (let key in object) {\n\t\tconsole.log(object[key]);\n\t}",
                "Iterating over characters in a string:\n\tfor (let char of 'javascript') {\n\t\tconsole.log(char);\n\t}",
                "A countdown loop:\n\tfor (let i = 10; i > 0; i--) {\n\t\tconsole.log('Countdown: ' + i);\n\t}"
            ]
        },
        {
            "tag": "examples_of_while_loop_in_javascript",
            "patterns": [
                "Give me examples of a while loop in javascript.",
                "How is a while loop used in javascript?",
                "Show me examples of while loops in javascript.",
                "I want to see a practical example of a while loop in javascript.",
                "Can you show me how to use a while loop in javascript?"
            ],
            "responses": [
                "A basic example:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "To iterate until a condition is met:\n\twhile (isRunning) {\n\t\texecuteTask();\n\t}",
                "To count backward:\n\tlet i = 10;\n\twhile (i > 0) {\n\t\tconsole.log(i);\n\t\ti--;\n\t}",
                "To iterate over arrays:\n\tlet numbers = [1, 2, 3];\n\tlet i = 0;\n\twhile (i < numbers.length) {\n\t\tconsole.log(numbers[i]);\n\t\ti++;\n\t}",
                "To stop when a value is found:\n\tlet x = 0;\n\twhile (x !== 100) {\n\t\tx = getNumber();\n\t\tconsole.log(x);\n\t}"
            ]
        },
        {
            "tag": "examples_of_do_while_loop_in_javascript",
            "patterns": [
                "Give me examples of a do while loop in javascript.",
                "How is a do while loop used in javascript?",
                "Show me examples of do while loops in javascript.",
                "I want to see a practical example of a do while loop in javascript.",
                "Can you show me how to use a do while loop in javascript?"
            ],
            "responses": [
                "A basic example:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "It is used when you need to execute at least once:\n\tlet key;\n\tdo {\n\t\tkey = askForKey();\n\t} while (!isKeyCorrect(key));",
                "Counting backward:\n\tlet x = 10;\n\tdo {\n\t\tconsole.log(x);\n\t\tx--;\n\t} while (x > 0);",
                "Reading data from an array:\n\tlet i = 0;\n\tlet data = [1, 2, 3];\n\tdo {\n\t\tconsole.log(data[i]);\n\t\ti++;\n\t} while (i < data.length);",
                "Stopping based on a condition:\n\tlet continueLoop = true;\n\tdo {\n\t\tconsole.log('Running...');\n\t\tcontinueLoop = checkState();\n\t} while (continueLoop);"
            ]
        },
        {
            "tag": "examples_of_method_declaration_in_javascript",
            "patterns": [
                "Give me examples of how to declare methods in javascript.",
                "How are methods created in javascript?",
                "Show me examples of methods in javascript.",
                "I want to see how methods are declared in objects.",
                "Can you show me examples of methods in javascript?"
            ],
            "responses": [
                "A method inside an object:\n\tconst person = {\n\t\tgreet: function() {\n\t\t\tconsole.log('Hello');\n\t\t}\n\t};",
                "Using shorthand syntax:\n\tconst car = {\n\t\tstart() {\n\t\t\tconsole.log('Vroom!');\n\t\t}\n\t};",
                "Methods with parameters:\n\tconst calculator = {\n\t\tadd(a, b) {\n\t\t\treturn a + b;\n\t\t}\n\t};",
                "Methods in classes:\n\tclass Animal {\n\t\twalk() {\n\t\t\tconsole.log('Walking');\n\t\t}\n\t}",
                "Method using this:\n\tconst user = {\n\t\tname: 'Juan',\n\t\tintroduce() {\n\t\t\tconsole.log('Hi, I am ' + this.name);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "examples_of_function_declaration_in_javascript",
            "patterns": [
                "Give me examples of how to declare functions in javascript.",
                "How are functions created in javascript?",
                "Show me examples of functions in javascript.",
                "I want to see how functions are declared in javascript.",
                "Can you show me examples of functions in javascript?"
            ],
            "responses": [
                "Classic function:\n\tfunction greet() {\n\t\tconsole.log('Hello, world');\n\t}",
                "Function with parameters:\n\tfunction add(a, b) {\n\t\treturn a + b;\n\t}",
                "Anonymous function assigned to a variable:\n\tconst multiply = function(x, y) {\n\t\treturn x * y;\n\t};",
                "Arrow function:\n\tconst divide = (a, b) => {\n\t\treturn a / b;\n\t};",
                "Single-line arrow function:\n\tconst square = n => n * n;"
            ]
        },
        {
            "tag": "examples_of_variable_declaration_in_python",
            "patterns": [
                "Give me examples of how to declare variables in Python.",
                "How are variables declared in Python?",
                "Show me examples of variable declaration in Python.",
                "I want to see how variables are declared in Python.",
                "Can you give me an example of a variable in Python?"
            ],
            "responses": [
                "Basic declaration:\n\tname = 'Juan'\n\tage = 25\n\tpi = 3.14",
                "You can declare multiple variables in one line:\n\tx, y, z = 1, 2, 3",
                "Text and number variables:\n\ttext = 'Hello, world'\n\tnumber = 42",
                "Using lists:\n\tfruits = ['apple', 'pear', 'banana']",
                "Dictionary declaration:\n\tperson = {'name': 'Carlos', 'age': 30}"
            ]
        },
        {
            "tag": "examples_of_constant_declaration_in_python",
            "patterns": [
                "Give me examples of how to declare constants in Python.",
                "How are constants declared in Python?",
                "Show me examples of constant declaration in Python.",
                "I want to see how constants are used in Python.",
                "Can you give me examples of constants in Python?"
            ],
            "responses": [
                "In Python, there are no strict constants, but uppercase is used by convention:\n\tPI = 3.14\n\tGRAVITY = 9.8",
                "You can define constants in a separate module to keep things organized:\n\t# constants.py\n\tBASE_URL = 'https://api.example.com'",
                "Another example:\n\tMAX_USERS = 1000",
                "String constants:\n\tWELCOME_MESSAGE = 'Welcome to the system'",
                "Boolean constants:\n\tIS_ACTIVE = True\n\tIS_ADMIN = False"
            ]
        },        
        {
            "tag": "examples_of_for_loop_in_python",
            "patterns": [
                "Give me examples of a for loop in Python.",
                "How is a for loop used in Python?",
                "Show me examples of for loops in Python.",
                "I want to see a practical example of a for loop in Python.",
                "Can you show me how to use a for loop in Python?"
            ],
            "responses": [
                "A basic example:\n\tfor i in range(5):\n\t\tprint(i)",
                "To iterate over a list:\n\tfruits = ['apple', 'pear', 'banana']\n\tfor fruit in fruits:\n\t\tprint(fruit)",
                "Using for with dictionaries:\n\tperson = {'name': 'Juan', 'age': 25}\n\tfor key, value in person.items():\n\t\tprint(key, ':', value)",
                "Iterating over a string:\n\tfor letter in 'Python':\n\t\tprint(letter)",
                "To iterate in descending order:\n\tfor i in range(10, 0, -1):\n\t\tprint(i)"
            ]
        },
        {
            "tag": "examples_of_while_loop_in_python",
            "patterns": [
                "Give me examples of a while loop in Python.",
                "How is a while loop used in Python?",
                "Show me examples of while loops in Python.",
                "I want to see a practical example of a while loop in Python.",
                "Can you show me how to use a while loop in Python?"
            ],
            "responses": [
                "A basic example:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
                "To exit when a condition is met:\n\twhile not ready:\n\t\tdo_something()",
                "Counting backward:\n\ti = 10\n\twhile i > 0:\n\t\tprint(i)\n\t\ti -= 1",
                "To process list items:\n\tfruits = ['apple', 'pear', 'banana']\n\twhile fruits:\n\t\tprint(fruits.pop())",
                "Infinite loop (use break to exit):\n\twhile True:\n\t\tcommand = input('>> ')\n\t\tif command == 'exit':\n\t\t\tbreak"
            ]
        },
        {
            "tag": "examples_of_do_while_loop_in_python",
            "patterns": [
                "Give me examples of a do while loop in Python.",
                "How is a do while loop used in Python?",
                "Show me examples of do while loops in Python.",
                "I want to see a practical example of a do while loop in Python.",
                "Can you show me how to use a do while loop in Python?"
            ],
            "responses": [
                "Python does not have a do while loop, but you can simulate it like this:\n\twhile True:\n\t\tprint('Running')\n\t\tif condition:\n\t\t\tbreak",
                "Another example:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif i >= 5:\n\t\t\tbreak",
                "Simulation for reading data:\n\twhile True:\n\t\tnumber = int(input('Enter a number: '))\n\t\tif number == 0:\n\t\t\tbreak",
                "To execute at least once:\n\twhile True:\n\t\tprocess()\n\t\tif is_ready():\n\t\t\tbreak",
                "Descending counter:\n\ti = 10\n\twhile True:\n\t\tprint(i)\n\t\ti -= 1\n\t\tif i == 0:\n\t\t\tbreak"
            ]
        },
        {
            "tag": "examples_of_function_declaration_in_python",
            "patterns": [
                "Give me examples of how to declare functions in Python.",
                "How are functions created in Python?",
                "Show me examples of functions in Python.",
                "I want to see how functions are declared in Python.",
                "Can you show me examples of functions in Python?"
            ],
            "responses": [
                "Basic function:\n\tdef greet():\n\t\tprint('Hello, world')",
                "Function with parameters:\n\tdef add(a, b):\n\t\treturn a + b",
                "Function with default values:\n\tdef introduce(name='Anonymous'):\n\t\tprint(f'Hello, {name}')",
                "Lambda function:\n\tsquare = lambda x: x * x",
                "Recursive function:\n\tdef factorial(n):\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn n * factorial(n-1)"
            ]
        },
        {
            "tag": "examples_of_method_declaration_in_python",
            "patterns": [
                "Give me examples of how to declare methods in Python.",
                "How are methods created in Python?",
                "Show me examples of methods in Python.",
                "I want to see how methods are declared in classes.",
                "Can you show me examples of methods in Python?"
            ],
            "responses": [
                "Basic method:\n\tclass Person:\n\t\tdef greet(self):\n\t\t\tprint('Hello')",
                "Method with parameters:\n\tclass Calculator:\n\t\tdef add(self, a, b):\n\t\t\treturn a + b",
                "Method with initializer:\n\tclass Person:\n\t\tdef __init__(self, name):\n\t\t\tself.name = name",
                "Method using attributes:\n\tclass Animal:\n\t\tdef __init__(self, species):\n\t\t\tself.species = species\n\t\tdef info(self):\n\t\t\tprint(f'I am a {self.species}')",
                "Static method:\n\tclass Math:\n\t\t@staticmethod\n\t\tdef add(a, b):\n\t\t\treturn a + b"
            ]
        },
        {
            "tag": "examples_of_class_creation_in_python",
            "patterns": [
                "Give me examples of how to create classes in Python.",
                "How are classes created in Python?",
                "Show me examples of classes in Python.",
                "I want to see how classes are declared in Python.",
                "Can you show me examples of classes in Python?"
            ],
            "responses": [
                "Basic class:\n\tclass Person:\n\t\tpass",
                "Class with attributes:\n\tclass Person:\n\t\tdef __init__(self, name, age):\n\t\t\tself.name = name\n\t\t\tself.age = age",
                "Class with methods:\n\tclass Person:\n\t\tdef __init__(self, name):\n\t\t\tself.name = name\n\t\tdef greet(self):\n\t\t\tprint(f'Hello, I am {self.name}')",
                "Class with inheritance:\n\tclass Student(Person):\n\t\tdef __init__(self, name, grade):\n\t\t\tsuper().__init__(name)\n\t\t\tself.grade = grade",
                "Class with static method:\n\tclass Utility:\n\t\t@staticmethod\n\t\tdef add(a, b):\n\t\t\treturn a + b"
            ]
        },
        {
            "tag": "hello",
            "patterns": [
                "hello",
                "good morning",
                "Good afternoon",
                "good night",
                "hey"
            ],
            "responses": [
                "Hi, how are you",
                "hi how are things",
                "good morning how are you",
                "good afternoon how are you",
                "good night how are you"
            ]
        },
        {
            "tag": "good",
            "patterns": [
                "good"
            ],
            "responses": [
                "I'm glad to know, tell me how I can help you, I'm trained in programming topics ",
                "What a joy, I can help you on different topics, I am trained in programming topics",
                "I'm glad to hear that, I can help you with the programming issue"
            ]
        },
        {
            "tag": "good and you",
            "patterns": [
                "good and you",
                "fine and how are you",
                "well and how are you",
                "well and what do you say",
                "well and what about you",
                "there more or less and you",
                "there more or less and how about you?",
                "there more or less and what do you say?",
                "there more or less and what about you?",
                "more or less and you",
                "more or less and how are you?",
                "more or less and how about you?",
                "more or less and what do you say?",
                "more or less and what about you?",
                "regular and you",
                "regular and how are you?",
                "regular and how are you?",
                "regular and what do you say",
                "regular and what about you"
            ],
            "responses": [
                "Okay, tell me how I can help you, I am trained in programming topics, algorithms and the occasional joke.",
                "What a joy, I can help you on different topics, I am trained in programming topics, algorithms and the occasional joke.",
                "I'm glad to hear that, I can help you with the topic of programming, algorithms and some other jokes",
                "I am here to help you with whatever you need, I am trained in programming topics, algorithms and the occasional joke."
            ]
        },
        {
            "tag": "how can you help me",
            "patterns": [
                "how can you help me"
            ],
            "responses": [
                "I can answer questions, give you information and help you with whatever you need, I am trained in programming topics",
                "I am here to answer your questions and help you with whatever you need, I am trained in programming issues,",
                "I can help you on topics such as programming"
            ]
        },
        {
            "tag": "hello good",
            "patterns": [
                "hello good"
            ],
            "responses": [
                "Hi, how are you",
                "hi how are things",
                "good morning how are you"
            ]
        },
        {
            "tag": "hey",
            "patterns": [
                "hey"
            ],
            "responses": [
                "good morning how are you",
                "hi how are things",
                "hi how are things",
                "Hi, how are you",
                "good morning how are you",
                "Hi, how are you"
            ]
        },
        {
            "tag": "how are you",
            "patterns": [
                "how are you"
            ],
            "responses": [
                "I'm fine thanks for asking",
                "everything is fine, and you?"
            ]
        },
        {
            "tag": "all good",
            "patterns": [
                "all good"
            ],
            "responses": [
                "I'm glad, how can I help you?",
                "That's great, how can I help you?",
                "I'm glad to hear that, how can I help you?",
                "What a joy, how can I help you?"
            ]
        },
        {
            "tag": "bye",
            "patterns": [
                "bye",
                "see you later",
                "see you",
                "goodbye"
            ],
            "responses": [
                "goodbye take care",
                "see you later",
                "see you"
            ]
        },
        {
            "tag": "see you",
            "patterns": [
                "see you",
                "see you later",
                "bye",
                "goodbye"
            ],
            "responses": [
                "goodbye take care",
                "see you later",
                "see you"
            ]
        },
        {
            "tag": "good morning",
            "patterns": [
                "good morning"
            ],
            "responses": [
                "Hello, how are you today?",
                "good morning how are you feeling today",
                "good morning, I hope you have a great day, I can help you with programming, algorithms and some other jokes."
            ]
        },
        {
            "tag": "algorithms",
            "patterns": [
                "what are algorithms",
                "explain to me what an algorithm is",
                "tell me what is an algorithm",
                "tell me what algorithms are",
                "what is an algorithm"
            ],
            "responses": [
                "An algorithm is a finite sequence of steps that solves a problem or performs a task.",
                "It is a set of ordered and finite instructions that allow solving a problem",
                "Algorithms are the basis of programming and solving computational problems",
                "are well-defined procedures for performing a task or solving a problem"
            ]
        },
        {
            "tag": "example_algorithms",
            "patterns": [
                "give me an example of an algorithm",
                "I want to see an example of an algorithm",
                "explain me an example of algorithm",
                "tell me an example of algorithm",
                "algorithm example"
            ],
            "responses": [
                "A simple example of an algorithm is the addition of two numbers",
                "Another example is the bubble sort algorithm",
                "A common algorithm is binary search in a sorted array.",
                "matrix multiplication is an example of a more complex algorithm",
                "Euclid's algorithm for finding the greatest common factor is another example."
            ]
        },
        {
            "tag": "programming_algorithms",
            "patterns": [
                "tell me the name of programming algorithms",
                "names of programming algorithms",
                "What are the best known programming algorithms?",
                "programming algorithms",
                "most popular programming algorithms",
                "tell me examples of programming algorithms"
            ],
            "responses": [
                "Some well-known programming algorithms are: binary search, bubble sort, quicksort, mergesort, etc.",
                "Among the best-known programming algorithms are: DFS, BFS, Dijkstra, Floyd-Warshall, etc.",
                "Examples of programming algorithms are: backtracking, dynamic programming, divide and conquer, etc.",
                "Classic programming algorithms include: binary trees, graphs, linked lists, etc."
            ]
        },
        {
            "tag": "what is your name",
            "patterns": [
                "what is your name",
                "what's your name",
                "who are you",
                "as they tell you",
                "what do they call you"
            ],
            "responses": [
                "I'm a virtual assistant but you can call me a bot",
                "My name is bot, your assistant",
                "you can call me bot, I'm here to help you"
            ]
        },
        {
            "tag": "do you have_any_name",
            "patterns": [
                "do you have any name",
                "what's your name",
                "who are you",
                "what is your name",
                "as they tell you",
                "what do they call you",
                "you have a name",
                "how do you identify"
            ],
            "responses": [
                "I'm a virtual assistant but you can call me a bot",
                "My name is bot, your assistant",
                "you can call me bot, I'm here to help you",
                "They call me bot, I'm here to help you",
                "I identify myself as a bot, your virtual assistant"
            ]
        },
        {
            "tag": "who are you",
            "patterns": [
                "who are you",
                "what is your name",
                "what's your name",
                "as they tell you",
                "what do they call you"
            ],
            "responses": [
                "I'm a virtual assistant but you can call me a bot",
                "My name is bot, your assistant",
                "you can call me bot, I'm here to help you",
                "They call me bot, I'm here to help you",
                "I identify myself as a bot, your virtual assistant",
                "I am a bot, a virtual assistant"
            ]
        },
        {
            "tag": "what_can_you_do",
            "patterns": [
                "what can you do",
                "how can you help me",
                "what do you know how to do",
                "What tasks can you do?",
                "What functions do you have?",
                "What functions can you perform?",
                "what can you do for me",
                "how can you help me",
                "what can you do for me"
            ],
            "responses": [
                "I can answer questions, give you information and help you with whatever you need. I am trained in programming topics, algorithms and the occasional joke.",
                "I am here to answer your questions and help you with whatever you need. I am trained in programming topics, algorithms and the occasional joke.",
                "I can help you on topics such as programming, algorithms and some other jokes.",
                "I can help you with programming topics, algorithms and some other jokes."
            ]
        },
        {
            "tag": "thank you",
            "patterns": [
                "thank you",
                "thanks for your help",
                "very kind for your help",
                "thanks for your assistance",
                "thank you for your support",
                "thanks for your collaboration"
            ],
            "responses": [
                "you're welcome always here to help you",
                "it doesn't matter",
                "I'm here for whatever you need",
                "No problem, I'm here to help you."
            ]
        },
        {
            "tag": "sorry",
            "patterns": [
                "sorry",
                "sorry",
                "I'm sorry",
                "sorry"
            ],
            "responses": [
                "don't worry everything is fine",
                "No problem, how can I help you? I am trained in programming topics, algorithms and one or another joke.",
                "It's okay, how can I help you? I am trained in programming topics, algorithms and the odd joke."
            ]
        },
        {
            "tag": "I'm sorry",
            "patterns": [
                "I'm sorry",
                "sorry",
                "sorry",
                "sorry"
            ],
            "responses": [
                "It's okay, how can I help you? I am trained in programming topics and the occasional joke.",
                "Don't worry, I'm here to help you with programming issues, some algorithms and the occasional joke.",
                "No problem, how can I help you? I am trained in programming topics, algorithms and one or another joke."
            ]
        },
        {
            "tag": "what time is it",
            "patterns": [
                "what time is it",
                "tell me the time",
                "hour",
                "you know the time",
                "can you tell me the time"
            ],
            "responses": [
                "Sorry I can't give the exact time but I can help you with other things",
                "I don't have a watch, but I can help you with something else",
                "I don't have the exact time, but I can help you with something else."
            ]
        },
        {
            "tag": "what_day_is_today",
            "patterns": [
                "What day is today",
                "tell me today",
                "today",
                "do you know what day it is today"
            ],
            "responses": [
                "Today is a big day, how can I help you? ",
                "Today is a perfect day to learn something new.",
                "Today is an excellent day to learn something new, how can I help you?"
            ]
        },
        {
            "tag": "aid",
            "patterns": [
                "aid",
                "I need help",
                "help me",
                "can you help me",
                "I require help"
            ],
            "responses": [
                "Of course, tell me what you need and I will see how to help you, I am trained in programming topics, algorithms and the odd joke.",
                "I am here for whatever you need, tell me how I can help you, I am trained in programming topics, algorithms and the odd joke.",
                "I can help you with programming topics, algorithms and one or another joke, tell me what you need"
            ]
        },
        {
            "tag": "I'm sad",
            "patterns": [
                "I'm sad",
                "I feel sad",
                "sad",
                "I feel alone",
                "I don't feel well"
            ],
            "responses": [
                "I'm so sorry if you need to talk or support I'm here",
                "I understand you, you are not alone, tell me more, do you want to know something about programming? Something about algorithms or a joke?",
                "I'm very sorry, if you need to talk or support I'm here, do you want to know something about programming? Something about algorithms or a joke?"
            ]
        },
        {
            "tag": "I'm happy",
            "patterns": [
                "I'm happy",
                "I feel happy",
                "happy",
                "I feel good",
                "I feel great"
            ],
            "responses": [
                "What a joy to hear that, it makes me happy to know that you are well, how can I help you?",
                "That's great, I love knowing it! How can I help you?",
                "I'm glad to hear that, do you want to know something about programming? Something about algorithms or a joke?"
            ]
        },
        {
            "tag": "tell_me_a_joke",
            "patterns": [
                "tell me a joke",
                "I want to hear a joke",
                "tell me a joke",
                "I want to laugh",
                "I need a joke",
                "tell a joke"
            ],
            "responses": [
                "Why don't birds use Facebook because they already have Twitter?",
                "What does a bee do in the gym?",
                "What is Pepito doing in church playing with his cell phone, he is in airplane mode",
                "What does a gardener say to another gardener, you are a plant",
                "What does a cat say to another cat, you're meow"
            ]
        },
        {
            "tag": "tweet",
            "patterns": [
                "what is a tweet",
                "what is twitter",
                "what is a tweet",
                "what is tweeting",
                "what is a twitterer"
            ],
            "responses": [
                "A tweet is a short message that is published on the social network Twitter.",
                "Twitter is a social network where users can post short messages called tweets.",
                "tweeting is the act of publishing a message on the social network twitter",
                "A Twitter user is a person who uses the social network Twitter to post messages."
            ]
        },
        {
            "tag": "church",
            "patterns": [
                "what is a church",
                "what is a catholic church",
                "What is an evangelical church?"
            ],
            "responses": [
                "A church is a place of religious worship where worshipers gather to pray and worship God.",
                "The Catholic Church is one of the branches of Christianity that follows the doctrine and teachings of Jesus Christ",
                "The evangelical church is a branch of Christianity that is characterized by its emphasis on the preaching of the gospel and the conversion of the faithful."
            ]
        },
        {
            "tag": "tell me_a_joke",
            "patterns": [
                "tell me a joke"
            ],
            "responses": [
                "Why don't birds use Facebook because they already have Twitter?",
                "What does a bee do in the gym?"
            ]
        },
        {
            "tag": "tell me_another_joke",
            "patterns": [
                "tell me another joke",
                "tell me another joke",
                "I want to hear another joke",
                "another joke",
                "tell another joke"
            ],
            "responses": [
                "Why don't birds use Facebook because they already have Twitter?",
                "What does a bee do in the gym?"
            ]
        },
        {
            "tag": "what_are_the_birds",
            "patterns": [
                "what are birds",
                "what are birds",
                "what is a bird",
                "what is a bird"
            ],
            "responses": [
                "Birds are flying animals that have feathers and a beak.",
                "Birds are animals that fly and have feathers.",
                "They are animals that fly and have feathers, wings and generally the ability to fly"
            ]
        },
        {
            "tag": "what_is_a_bird",
            "patterns": [
                "what is a bird"
            ],
            "responses": [
                "A bird is a flying animal that has feathers and a beak.",
                "a bird is an animal that flies and has a feather",
                "A bird is a vertebrate animal with feathers, wings and generally the ability to fly."
            ]
        },
        {
            "tag": "what_is_facebook",
            "patterns": [
                "what is facebook",
                "what is a social network",
                "what is a social network called facebook",
                "facebook"
            ],
            "responses": [
                "Facebook is a social network where people can share content, interact and connect."
            ]
        },
        {
            "tag": "social_network",
            "patterns": [
                "what is a social network"
            ],
            "responses": [
                "A social network is a digital platform where people can interact, share ideas, content and communicate with each other."
            ]
        },
        {
            "tag": "social networks",
            "patterns": [
                "what are social networks"
            ],
            "responses": [
                "Social networks are digital platforms that allow users to connect, share content and communicate with each other."
            ]
        },
        {
            "tag": "people",
            "patterns": [
                "what are people",
                "what is a person",
                "what is a human being"
            ],
            "responses": [
                "People are human beings who have thinking, reasoning and communication capabilities."
            ]
        },
        {
            "tag": "share",
            "patterns": [
                "What does it mean to share?",
                "what is sharing",
                "share"
            ],
            "responses": [
                "Sharing means making something available to others to use or enjoy together."
            ]
        },
        {
            "tag": "connect",
            "patterns": [
                "what is connecting",
                "what does it mean to connect",
                "connect"
            ],
            "responses": [
                "connect is to establish a relationship or link between two or more elements"
            ]
        },
        {
            "tag": "connect",
            "patterns": [
                "what does it mean to connect",
                "connect"
            ],
            "responses": [
                "connect means join or link things, people or ideas so that they interact or work together"
            ]
        },
        {
            "tag": "what_is_twitter",
            "patterns": [
                "what is twitter",
                "twitter"
            ],
            "responses": [
                "Twitter is a platform where users can post short messages called tweets."
            ]
        },
        {
            "tag": "why_the_birds_don't_use_facebook",
            "patterns": [
                "Why don't birds use Facebook?"
            ],
            "responses": [
                "because they already have twitter"
            ]
        },
        {
            "tag": "what_does_a_bee_do_in_the_gym",
            "patterns": [
                "What does a bee do in the gym?"
            ],
            "responses": [
                "zumba"
            ]
        },
        {
            "tag": "zumba",
            "patterns": [
                "what is zumba",
                "what is zumba",
                "zumba"
            ],
            "responses": [
                "Zumba is a physical activity that combines dance and exercise to the rhythm of Latin music"
            ]
        },
        {
            "tag": "bees",
            "patterns": [
                "what are bees",
                "what is a bee",
                "what bees do",
                "bees",
                "what does the bee do"
            ],
            "responses": [
                "Bees are pollinating insects that play a crucial role in the ecosystem and produce honey"
            ]
        },
        {
            "tag": "what_birds_do_in_social_networks",
            "patterns": [
                "What birds do on social networks"
            ],
            "responses": [
                "In this context, the birds use Twitter as part of the joke."
            ]
        },
        {
            "tag": "what_is_a_gym",
            "patterns": [
                "what is a gym",
                "gym"
            ],
            "responses": [
                "A gym is a place where people go to exercise and improve their physical condition."
            ]
        },
        {
            "tag": "I'm encouraged",
            "patterns": [
                "I'm encouraged",
                "I feel encouraged",
                "lively",
                "I feel good",
                "I feel great"
            ],
            "responses": [
                "What a joy to hear that, it makes me happy to know that you are well.",
                "That's great, I love knowing that!",
                "I'm glad to hear that, do you want to know something about programming? Something about algorithms or a joke?"
            ]
        },
        {
            "tag": "I'm wonderful",
            "patterns": [
                "I'm wonderful",
                "I feel wonderful",
                "wonderfully",
                "I feel great",
                "I feel excellent"
            ],
            "responses": [
                "What a joy to hear that, it makes me happy to know that you are well.",
                "That's great, I love knowing that!",
                "I'm glad to hear that, do you want to know something about programming? Something about algorithms or a joke?",
                "I'm glad to hear that, how can I help you?"
            ]
        },
        {
            "tag": "what day do we have",
            "patterns": [
                "what day do we have",
                "What day is today",
                "tell me today",
                "today",
                "do you know what day it is today"
            ],
            "responses": [
                "Today is a big day, how can I help you?",
                "Today is a perfect day to learn something new."
            ]
        },
        {
            "tag": "what day is it",
            "patterns": [
                "what day is it"
            ],
            "responses": [
                "Today is a big day, how can I help you? You want to know what programming is about.",
                "Today is a perfect day to learn something new."
            ]
        },
        {
            "tag": "Yeah",
            "patterns": [
                "What is an if in programming?",
                "what is an if",
                "what is an if in python"
            ],
            "responses": [
                "The if is a control structure that allows you to make decisions in a program",
                "The if is a statement that allows a block of code to be executed if a condition is met.",
                "The if is a control structure that allows a block of code to be executed if a condition is met."
            ]
        },
        {
            "tag": "are you available",
            "patterns": [
                "are you available"
            ],
            "responses": [
                "Of course I am here to help you, I am trained in programming topics and the occasional joke or algorithm.",
                "I am available, tell me how I can help you, I can help you with programming issues, algorithms and one or another joke"
            ]
        },
        {
            "tag": "can you help me",
            "patterns": [
                "can you help me"
            ],
            "responses": [
                "Of course tell me what you need and I will see how to help you.",
                "I'm here for whatever you need, tell me how I can help you"
            ]
        },
        {
            "tag": "help me",
            "patterns": [
                "you help me"
            ],
            "responses": [
                "Of course tell me what you need and I will see how to help you.",
                "I'm here for whatever you need, tell me how I can help you"
            ]
        },
        {
            "tag": "help me",
            "patterns": [
                "help me"
            ],
            "responses": [
                "Of course, tell me what you need and I will see how to help you, I am trained in programming topics and the occasional joke.",
                "I am here for whatever you need, tell me how I can help you, I am trained in programming topics and the occasional joke."
            ]
        },
        {
            "tag": "Hello, can I ask you something?",
            "patterns": [
                "Hello, can I ask you something?",
                "Hello, can I ask you a question?",
                "Hello, can I ask you something?"
            ],
            "responses": [
                "Of course I'm here to answer your questions."
            ]
        },
        {
            "tag": "why_you_exist",
            "patterns": [
                "why do you exist"
            ],
            "responses": [
                "I was created to help you and improve your interactions with technology"
            ]
        },
        {
            "tag": "what_is_programming",
            "patterns": [
                "what is programming",
                "what is programming",
                "what is programming",
                "program",
                "programming"
            ],
            "responses": [
                "It is the creation of code to solve problems or automate tasks on a computer.",
                "It is the process of writing instructions that a computer can understand."
            ]
        },
        {
            "tag": "what_is_instructions",
            "patterns": [
                "what is instructions",
                "what are instructions",
                "what is an instruction",
                "what are the instructions"
            ],
            "responses": [
                "They are specific directions that tell a computer what to do step by step.",
                "They are organized orders that a machine or person follows to perform a task."
            ]
        },
        {
            "tag": "what_is_a_computer",
            "patterns": [
                "what is a computer",
                "what is a pc",
                "what is a computer",
                "what is a laptop",
                "what is a laptop"
            ],
            "responses": [
                "It is an electronic device capable of processing and storing data following instructions.",
                "It is a machine designed to perform calculations and run software programs."
            ]
        },
        {
            "tag": "code",
            "patterns": [
                "What does code creation mean?",
                "what is code",
                "what is programming",
                "what is code creation",
                "what is writing code"
            ],
            "responses": [
                "It is the process of writing lines of text in a programming language to build software.",
                "It is developing instructions that define how a program or system should work."
            ]
        },
        {
            "tag": "what_is_automating",
            "patterns": [
                "what is automation",
                "What does it mean to automate?",
                "What is automation?",
                "What does automation mean?"
            ],
            "responses": [
                "It is making processes or tasks carried out automatically without constant human intervention.",
                "It is using technology to execute repetitive activities efficiently."
            ]
        },
        {
            "tag": "electronic device",
            "patterns": [
                "what is an electronic device",
                "what is a digital device",
                "What is a technological device?",
                "what is an electronic device"
            ],
            "responses": [
                "It is a device that runs on electricity and performs specific tasks using electronic circuits.",
                "It is a machine that uses electrical and electronic components to process information or perform actions."
            ]
        },
        {
            "tag": "process_information",
            "patterns": [
                "What does it mean to process information?",
                "What is information processing?",
                "what is processing data",
                "What does it mean to process data?"
            ],
            "responses": [
                "It is performing operations on data to transform it into useful information.",
                "It is applying algorithms or rules to analyze, organize or convert data."
            ]
        },
        {
            "tag": "store_data",
            "patterns": [
                "what is storing data",
                "What does it mean to store data?",
                "what is saving data",
                "What does it mean to save data?"
            ],
            "responses": [
                "It is saving information in a physical or digital medium for future use.",
                "It is keeping data in an organized way to access it when needed."
            ]
        },
        {
            "tag": "useful_information",
            "patterns": [
                "what is useful information",
                "What does useful information mean?",
                "What is valuable information?",
                "What does valuable information mean?"
            ],
            "responses": [
                "It is knowledge derived from data that has value for making decisions or solving problems.",
                "It is the result of processing data in a way that makes it understandable and actionable."
            ]
        },
        {
            "tag": "derived_knowledge",
            "patterns": [
                "what is derived knowledge",
                "What does derived knowledge mean?",
                "what is obtained knowledge",
                "What does obtained knowledge mean?"
            ],
            "responses": [
                "It is information obtained by processing and analyzing data in a logical and systematic way.",
                "It is the understanding generated from data that has a context or purpose."
            ]
        },
        {
            "tag": "automatic_task",
            "patterns": [
                "What is an automatic task?",
                "What does automatic task mean?",
                "What is an automatic activity?",
                "What does automatic activity mean?"
            ],
            "responses": [
                "It is an activity that is carried out without the need for continuous human intervention.",
                "It is a process that is executed independently through programming or devices."
            ]
        },
        {
            "tag": "organized_steps",
            "patterns": [
                "What are organized steps?",
                "What does organized steps mean?",
                "which are structured instructions",
                "What does structured instructions mean?"
            ],
            "responses": [
                "They are actions arranged in a logical order to achieve a specific objective.",
                "They are structured instructions that guarantee that a process is carried out effectively."
            ]
        },
        {
            "tag": "what_it_means_to_make_decisions",
            "patterns": [
                "What does it mean to make decisions?",
                "what is making decisions",
                "What is choosing an option?",
                "What does it mean to choose an option?"
            ],
            "responses": [
                "It is the process of choosing an option among several available alternatives.",
                "It is analyzing information to select the most appropriate action in a given situation."
            ]
        },
        {
            "tag": "analyze_data",
            "patterns": [
                "what is analyzing data",
                "What does it mean to analyze data?",
                "What is examining information?",
                "What does it mean to examine information?"
            ],
            "responses": [
                "It is examining information in detail to extract patterns, trends or conclusions.",
                "It is the process of evaluating data to understand it and use it in decision making."
            ]
        },
        {
            "tag": "digital_media",
            "patterns": [
                "what is a digital medium",
                "What does digital media mean?",
                "what is a digital medium",
                "What does digital media mean?"
            ],
            "responses": [
                "It is an electronic medium such as hard drives, the cloud or USB devices where information is stored.",
                "It is an environment based on digital technology that allows data to be stored and transmitted."
            ]
        },
        {
            "tag": "transform_data",
            "patterns": [
                "What does it mean to transform data?",
                "what is transforming data",
                "what is modifying information",
                "What does it mean to modify information?"
            ],
            "responses": [
                "It is modifying or reorganizing information to change its format, structure or purpose.",
                "It is converting data into a more useful or understandable form for analysis or use."
            ]
        },
        {
            "tag": "repetitive_task",
            "patterns": [
                "which is a repetitive task",
                "What does repetitive task mean?",
                "which is a repetitive activity",
                "What does repetitive activity mean?"
            ],
            "responses": [
                "It is an action that is performed over and over again in a similar or identical manner.",
                "It is a process that does not change over time and is usually automatable."
            ]
        },
        {
            "tag": "automatable",
            "patterns": [
                "which is automatable",
                "What does automatable mean?",
                "What is an automatable task?",
                "What does an automatable task mean?"
            ],
            "responses": [
                "It is something that can be set to run automatically without human intervention.",
                "It is an activity that can be carried out autonomously by technological systems."
            ]
        },
        {
            "tag": "organized_rules",
            "patterns": [
                "What are organized rules?",
                "What does organized rules mean?",
                "which are structured rules",
                "What does structured norms mean?"
            ],
            "responses": [
                "They are rules arranged in a logical and structured way to guarantee efficient operation.",
                "They are principles that define an order to carry out tasks effectively."
            ]
        },
        {
            "tag": "perform_tasks",
            "patterns": [
                "What does it mean to perform tasks?",
                "what is doing tasks",
                "what is executing activities",
                "What does it mean to execute activities?"
            ],
            "responses": [
                "It is executing specific activities or actions to meet an objective.",
                "It is carrying out a set of steps that lead to an expected result."
            ]
        },
        {
            "tag": "structured_activity",
            "patterns": [
                "which is a structured activity",
                "What does structured activity mean?",
                "what is an organized task",
                "What does organized task mean?"
            ],
            "responses": [
                "It is a planned action with a defined beginning, middle and end.",
                "It is a set of steps organized to achieve a clear purpose."
            ]
        },
        {
            "tag": "identify_patterns",
            "patterns": [
                "what is identifying patterns",
                "What does it mean to identify patterns?",
                "what is recognizing structures",
                "What does it mean to recognize structures?"
            ],
            "responses": [
                "It is recognizing structures or repetitions within a set of data or information.",
                "It is detecting similarities or regularities that help interpret or predict behaviors."
            ]
        },
        {
            "tag": "what_is_code",
            "patterns": [
                "what is code",
                "what is a code",
                "what is a programming code",
                "what is a computer code"
            ],
            "responses": [
                "It is a set of instructions written in a programming language to be executed by a computer.",
                "It is a structured representation of orders that allow you to perform tasks or solve problems using software."
            ]
        },
        {
            "tag": "instruction_set",
            "patterns": [
                "what is a set of instructions",
                "What does a set of instructions mean?",
                "what is a group of orders",
                "What does a group of orders mean?",
                "what are the instructions",
                "what are the orders"
            ],
            "responses": [
                "They are several organized orders that, when executed, achieve an objective or complete a task.",
                "It is a sequence of steps that tells a computer how to perform a specific action."
            ]
        },
        {
            "tag": "structured_representation",
            "patterns": [
                "What is a structured representation?",
                "What does a structured representation mean?",
                "what is an organized model",
                "What does an organized model mean?"
            ],
            "responses": [
                "It is an organized way of presenting information or data following a logical scheme.",
                "It is a clear and orderly model or format that facilitates the understanding and execution of a process."
            ]
        },
        {
            "tag": "what_it_means_to_be_executed",
            "patterns": [
                "What does it mean to be executed?",
                "what is running",
                "what does it mean to execute",
                "what is to carry out",
                "what does it mean to carry out"
            ],
            "responses": [
                "It is carrying out the instructions of a code so that the indicated actions are carried out.",
                "It is processing the orders of a program to generate results or perform tasks."
            ]
        },
        {
            "tag": "what_are_orders",
            "patterns": [
                "what are orders",
                "what is an order",
                "what does order mean",
                "what is an instruction",
                "What does instruction mean?"
            ],
            "responses": [
                "They are specific commands that tell a computer what to do and how to do it.",
                "They are specific instructions that must be followed to complete a process."
            ]
        },
        {
            "tag": "tasks_using_software",
            "patterns": [
                "What does it mean to perform tasks using software?",
                "what is performing tasks with software",
                "what is executing actions with programs",
                "What does it mean to execute actions with programs"
            ],
            "responses": [
                "It is using programs or applications to execute activities or solve problems automatically.",
                "It is using technological tools to carry out specific actions efficiently."
            ]
        },
        {
            "tag": "computer_executing_code",
            "patterns": [
                "what is a computer executing code",
                "What does a computer executing code mean?",
                "what is a pc processing instructions",
                "What does a PC processing instructions mean?"
            ],
            "responses": [
                "It is a device processing instructions written in a programming language.",
                "It is the act of interpreting and following the orders defined in a code to perform actions."
            ]
        },
        {
            "tag": "process_instructions",
            "patterns": [
                "What does it mean to process instructions?",
                "what is processing instructions",
                "what is interpreting instructions",
                "What does it mean to interpret instructions?"
            ],
            "responses": [
                "It is interpreting and carrying out the actions indicated by a set of orders.",
                "It is executing defined steps in code to produce specific results."
            ]
        },
        {
            "tag": "problems_with_code",
            "patterns": [
                "What is solving problems with code?",
                "What does it mean to solve problems with code?",
                "What is solving challenges with programming?",
                "What does it mean to solve challenges with programming?"
            ],
            "responses": [
                "It is writing and executing instructions to find solutions to challenges or needs.",
                "It is using programming languages ​​to automate processes or create tools that simplify tasks."
            ]
        },
        {
            "tag": "write_a_command_set",
            "patterns": [
                "What does it mean to write a command set?",
                "what is writing a set of commands",
                "what is writing instructions",
                "What does it mean to write instructions"
            ],
            "responses": [
                "It is writing instructions in a programming language so that a computer understands them.",
                "It is designing a logical sequence of steps to achieve a goal or perform a task."
            ]
        },
        {
            "tag": "ordered_model",
            "patterns": [
                "what is an ordered model",
                "What does an ordered model mean?",
                "what is an organized structure",
                "What does an organized structure mean?"
            ],
            "responses": [
                "It is an organized structure that facilitates the understanding and execution of a process.",
                "It is a logical scheme that defines how tasks should be performed or data processed."
            ]
        },
        {
            "tag": "what_is_an_algorithm",
            "patterns": [
                "what is an algorithm",
                "What is an algorithm in programming?",
                "what is a computer algorithm",
                "what is a computer algorithm",
                "algorithm"
            ],
            "responses": [
                "It is a sequence of steps defined to solve a problem",
                "is a set of instructions that are executed in order to achieve a goal",
                "is a series of logical steps that describe how to solve a specific task"
            ]
        },
        {
            "tag": "step_set",
            "patterns": [
                "What does a set of steps mean?",
                "which is a set of steps",
                "what is a sequence of steps",
                "What does a sequence of steps mean?"
            ],
            "responses": [
                "They are several actions organized in a logical order to achieve a result.",
                "It is a series of stages that must be followed to complete a task or solve a problem."
            ]
        },
        {
            "tag": "logical_way",
            "patterns": [
                "What does logically defined mean?",
                "which is defined logically",
                "that is structured in a logical way",
                "What does logically structured mean?"
            ],
            "responses": [
                "It is structured in a clear and coherent way, following reasonable rules or principles.",
                "It is designed so that each step makes sense and is aligned with the final objective."
            ]
        },
        {
            "tag": "solve_a_problem_with_an_algorithm",
            "patterns": [
                "What does it mean to solve a problem with an algorithm?",
                "What is solving a problem with an algorithm?",
                "What is solving a problem with an algorithm?",
                "What does it mean to solve a problem with an algorithm?"
            ],
            "responses": [
                "It is using a sequence of clear steps to find a solution to a difficulty or need.",
                "It is applying a set of organized instructions to overcome a challenge or fulfill a purpose."
            ]
        },
        {
            "tag": "written_steps",
            "patterns": [
                "What does a series of written steps mean?",
                "which is a series of written steps",
                "which is a list of detailed steps",
                "What does a list of detailed steps mean?"
            ],
            "responses": [
                "It is a list of detailed actions written in a format that can be understood and followed.",
                "It is a group of instructions documented in a clear and organized manner."
            ]
        },
        {
            "tag": "interpret_an_algorithm",
            "patterns": [
                "What does it mean to interpret an algorithm?",
                "what is interpreting an algorithm",
                "what is analyzing an algorithm",
                "What does it mean to analyze an algorithm?"
            ],
            "responses": [
                "It is analyzing each step of a set of instructions to execute it appropriately.",
                "It is converting the actions defined in an algorithm into operations that the computer can perform."
            ]
        },
        {
            "tag": "run_an_algorithm",
            "patterns": [
                "what is running an algorithm",
                "What does it mean to run an algorithm?",
                "what is applying an algorithm",
                "What does it mean to apply an algorithm?"
            ],
            "responses": [
                "It is carrying out the steps defined in an algorithm to obtain a result.",
                "It is following the instructions of an algorithm to solve a problem or complete a task."
            ]
        },
        {
            "tag": "serves_an_algorithm",
            "patterns": [
                "What is an algorithm for?",
                "What is the usefulness of an algorithm",
                "What is the function of an algorithm?",
                "What is the purpose of an algorithm"
            ],
            "responses": [
                "serves to solve problems in a structured and efficient way",
                "used to automate tasks and find solutions to complex problems",
                "It is essential to create programs and systems that solve specific problems"
            ]
        },
        {
            "tag": "characteristics_of_an_algorithm",
            "patterns": [
                "What are the characteristics of an algorithm",
                "What characteristics does an algorithm have?",
                "What should an algorithm have?"
            ],
            "responses": [
                "It must be finite, have well-defined steps and be precise",
                "has a beginning and an end, and must produce a correct result",
                "must be clear, efficient and applicable in any defined context"
            ]
        },
        {
            "tag": "types_of_algorithms",
            "patterns": [
                "what are the types of algorithms",
                "What types of algorithms exist?",
                "What classifications do the algorithms have?"
            ],
            "responses": [
                "Some types are recursive, iterative, greedy and dynamic algorithms.",
                "They can be search, sorting, optimization or generation",
                "They are classified according to their approach such as divide and conquer, backtracking or probabilistic algorithms."
            ]
        },
        {
            "tag": "recursive_algorithm",
            "patterns": [
                "what is a recursive algorithm",
                "What does recursion mean in algorithms?",
                "what is recursion"
            ],
            "responses": [
                "It is an algorithm that calls itself to solve a problem.",
                "It is a type of algorithm that divides a large problem into smaller subproblems.",
                "is based on defining oneself in terms of oneself until reaching a base case"
            ]
        },
        {
            "tag": "recursive_algorithms",
            "patterns": [
                "What examples are there of recursive algorithms?",
                "tell me examples of recursive algorithms",
                "give examples of recursive algorithms",
                "examples of recursive algorithms"
            ],
            "responses": [
                "calculating the factorial of a number is a classic example",
                "The Fibonacci sequence can be solved with a recursive algorithm",
                "Depth-first search in a graph is another common example."
            ]
        },
        {
            "tag": "sorting_algorithm",
            "patterns": [
                "what is a sorting algorithm",
                "What does it mean to sort data?",
                "What is data ordering?",
                "sorting algorithm"
            ],
            "responses": [
                "is an algorithm designed to rearrange elements in a specific order",
                "Used to sort data in ascending or descending order",
                "It is a technique for organizing lists of data such as numbers or strings."
            ]
        },
        {
            "tag": "most_common_sorting_algorithms",
            "patterns": [
                "What are the most common sorting algorithms?",
                "what sorting algorithms are popular",
                "popular sorting algorithms",
                "tell me common sorting algorithms",
                "most used sorting algorithms"
            ],
            "responses": [
                "some are quicksort, mergesort, bubble sort and insertion sort",
                "the most common include quicksort, heapsort and selection sort",
                "You can find algorithms such as merge sort and radix sort among the most used"
            ]
        },
        {
            "tag": "what_is_quicksort",
            "patterns": [
                "what is quicksort",
                "What does quicksort mean?",
                "what is the quicksort algorithm"
            ],
            "responses": [
                "It is a sorting algorithm based on divide and conquer.",
                "organizes the elements by selecting a pivot and partitioning the data around it",
                "It is an efficient method for sorting large lists of data."
            ]
        },
        {
            "tag": "quicksort_complexity",
            "patterns": [
                "what is the complexity of quicksort",
                "How complex is quicksort?",
                "how much is the complexity of quicksort"
            ],
            "responses": [
                "in the best case and average is o n log n",
                "in the worst case it can be or n squared if the pivots are chosen poorly",
                "It is efficient in most cases but it depends on how the pivots are selected."
            ]
        },
        {
            "tag": "greedy_algorithm",
            "patterns": [
                "what is a greedy algorithm",
                "What does voracity mean in algorithms?",
                "what is voracity"
            ],
            "responses": [
                "It is an algorithm that makes optimal decisions at each step in the hope of finding the overall optimal solution.",
                "It is used in problems where optimal partial solutions lead to the complete solution.",
                "It is an approach to solving problems by breaking the solution into sequential steps."
            ]
        },
        {
            "tag": "examples_of_voracious_algorithms",
            "patterns": [
                "What are examples of greedy algorithms?",
                "What examples are there of voracious algorithms?",
                "tell me examples of voracious algorithms",
                "examples of greedy algorithms",
                "give examples of greedy algorithms"
            ],
            "responses": [
                "Dijkstra's algorithm to find the shortest path in a graph",
                "the fractional knapsack problem can be solved with a greedy approach",
                "Kruskal's algorithm for minimum spanning trees is another example."
            ]
        },
        {
            "tag": "difference_between_voracious_dynamic_algorithms",
            "patterns": [
                "What is the difference between greedy and dynamic algorithms?",
                "What is the difference between greedy and dynamic algorithms?",
                "What distinguishes greedy algorithms from dynamic ones?"
            ],
            "responses": [
                "Greedy algorithms make decisions step by step, while dynamic algorithms solve subproblems and combine solutions.",
                "The voracious ones look for immediate optimal solutions, the dynamic ones store intermediate results to optimize the process.",
                "The voracious ones are simpler but do not always guarantee the optimal solution like the dynamic ones."
            ]
        },
        {
            "tag": "dynamic_algorithm",
            "patterns": [
                "what is a dynamic algorithm",
                "What does dynamism mean in algorithms?",
                "what is dynamic programming"
            ],
            "responses": [
                "It is a method of solving problems by dividing them into subproblems and storing their solutions.",
                "is an approach that avoids recomputations by saving results in memory",
                "It is used for problems that have overlapping subproblems and optimization properties."
            ]
        },
        {
            "tag": "dynamic_algorithms_examples",
            "patterns": [
                "What examples are there of dynamic algorithms?",
                "What are examples of dynamic algorithms",
                "tell me examples of dynamic algorithms",
                "examples of dynamic algorithms",
                "give examples of dynamic algorithms"
            ],
            "responses": [
                "the floyd-warshall algorithm for shortest paths in graphs",
                "The solution to the entire backpack problem is a classic of dynamic programming",
                "The calculation of the Fibonacci sequence with memoization is another example."
            ]
        },
        {
            "tag": "algorithm_instructions",
            "patterns": [
                "What types of instructions does an algorithm have?",
                "What instructions does an algorithm have?",
                "What actions are included in an algorithm"
            ],
            "responses": [
                "can have sequential, conditional and repetitive instructions",
                "Instructions are classified as sequential, decision and repetition.",
                "may include linear flow instructions, branches, and loops"
            ]
        },
        {
            "tag": "sequential_instruction",
            "patterns": [
                "What is a sequential instruction?",
                "What does sequential mean in algorithms?",
                "what is a sequence of instructions"
            ],
            "responses": [
                "It is an instruction that is executed one after another in the order in which they appear",
                "They are steps that are followed in a linear manner without deviating",
                "It is a type of instruction where each action occurs exactly once."
            ]
        },
        {
            "tag": "transform_instruction_set",
            "patterns": [
                "What does it mean to transform a set of instructions?",
                "what is transform instructions",
                "what is modifying a set of orders"
            ],
            "responses": [
                "It is modifying orders to adapt them to a specific format or context.",
                "It is converting defined steps into a structure that can be processed or executed."
            ]
        },
        {
            "tag": "specific_format",
            "patterns": [
                "What is a specific format?",
                "What does a specific format mean?",
                "which is a detailed diagram"
            ],
            "responses": [
                "It is a defined structure that organizes information so that it can be interpreted correctly.",
                "It is a standard provision that ensures that data is understood or used appropriately."
            ]
        },
        {
            "tag": "defined_structure",
            "patterns": [
                "which is a defined structure",
                "What does a defined structure mean?",
                "which is a clear organization"
            ],
            "responses": [
                "It is a previously designed scheme that organizes elements in a coherent way.",
                "It is a logical framework that establishes how the parts of a system or process should be ordered."
            ]
        },
        {
            "tag": "modify_algorithm",
            "patterns": [
                "What does it mean to modify an algorithm?",
                "what is modifying an algorithm",
                "what is changing a set of instructions"
            ],
            "responses": [
                "It is adjusting the steps of a set of instructions to adapt them to new needs or improve their efficiency.",
                "It is changing the logic or structure of an algorithm to optimize its operation."
            ]
        },
        {
            "tag": "optimize_algorithm",
            "patterns": [
                "What does it mean to optimize an algorithm?",
                "what is optimizing an algorithm",
                "what is improving a set of instructions"
            ],
            "responses": [
                "It is improving a set of instructions to make it faster or more efficient in solving a problem.",
                "It is reducing the time or resources necessary to execute an algorithm while maintaining its functionality."
            ]
        },
        {
            "tag": "algorithm_efficiency",
            "patterns": [
                "What is efficiency in an algorithm?",
                "What does efficiency mean in algorithms?",
                "what is the effectiveness of a set of instructions"
            ],
            "responses": [
                "It is the ability to solve a problem using the least amount of time and resources possible.",
                "It is the measure of how well an algorithm performs its task compared to other methods."
            ]
        },
        {
            "tag": "compare_methods",
            "patterns": [
                "What does it mean to compare methods?",
                "what is comparing methods",
                "what is evaluating different approaches"
            ],
            "responses": [
                "It is analyzing different techniques or approaches to identify which is most appropriate or efficient.",
                "It is evaluating the advantages and disadvantages of different processes to choose the best one."
            ]
        },
        {
            "tag": "choose_method",
            "patterns": [
                "What does it mean to choose a method?",
                "What is choosing a method?",
                "What is selecting a technique?"
            ],
            "responses": [
                "It is selecting the most appropriate technique to solve a problem or perform a specific task.",
                "It is making a decision based on the efficiency and characteristics of each available option."
            ]
        },
        {
            "tag": "proper_technique",
            "patterns": [
                "What is an appropriate technique?",
                "What does proper technique mean?",
                "What is an appropriate method?"
            ],
            "responses": [
                "It is an approach or method that effectively meets the needs of a task or problem.",
                "It is a strategy that allows you to achieve a goal accurately and efficiently."
            ]
        },
        {
            "tag": "logic_algorithm",
            "patterns": [
                "What is logic in an algorithm?",
                "What does logic mean in algorithms?",
                "What is the coherence of a set of instructions",
                "What does consistency of instructions mean?"
            ],
            "responses": [
                "It is the rational basis that organizes the steps of a set of instructions to ensure that they fulfill their purpose.",
                "It is the reasoning that guides the sequence and structure of actions within an algorithm."
            ]
        },
        {
            "tag": "examples_sequential_instructions",
            "patterns": [
                "Can you give me examples of sequential instructions?",
                "What examples are there of sequential instructions?",
                "tell me examples of sequential instructions",
                "give examples of sequential instructions",
                "examples of sequential instructions"
            ],
            "responses": [
                "assign a value to a variable, display a message on the screen and perform a sum",
                "read a data from the user, calculate the double and show the result",
                "calculate the average of three numbers, print it and end the program"
            ]
        },
        {
            "tag": "conditional_statement",
            "patterns": [
                "what is a conditional statement",
                "What does conditional statement mean?",
                "What is a decision sentence?"
            ],
            "responses": [
                "It is an instruction that allows you to make decisions based on a condition",
                "used to execute different blocks of code depending on whether a condition is true or false",
                "It is a type of instruction that evaluates an expression and decides the flow of the algorithm"
            ]
        },
        {
            "tag": "examples_conditional_instructions",
            "patterns": [
                "Can you give me examples of conditional statements?",
                "What examples are there of conditional instructions?",
                "tell me examples of conditional statements",
                "give examples of conditional statements",
                "examples of conditional statements"
            ],
            "responses": [
                "If the age is greater than or equal to 18, show that you are of legal age",
                "If the number is positive, print is positive, otherwise print is negative",
                "check if a number is even or odd and show the result"
            ]
        },
        {
            "tag": "repetitive_instruction",
            "patterns": [
                "What is a repetitive instruction?",
                "What does repetitive instruction mean?",
                "what is a loop statement"
            ],
            "responses": [
                "It is an instruction that executes a block of code several times as long as a condition is met.",
                "It is used to perform repetitive tasks automatically",
                "is a type of instruction that repeats an action until a completion criterion is met"
            ]
        },
        {
            "tag": "examples_repetitive_instructions",
            "patterns": [
                "Can you give me examples of repetitive instructions?",
                "What examples are there of repetitive instructions?",
                "tell me examples of repetitive instructions",
                "give examples of repetitive instructions",
                "examples of repetitive instructions"
            ],
            "responses": [
                "repeat until the user enters a number greater than 0",
                "calculate the sum of numbers from 1 to 100 using a loop",
                "display even numbers between 1 and 50 using a for loop"
            ]
        },
        {
            "tag": "algorithm_loop_types",
            "patterns": [
                "What types of loops exist in algorithms",
                "What loops are used in programming?",
                "What types of cycles can be found in algorithms"
            ],
            "responses": [
                "the most common are for, while and do while loops",
                "you can use defined loops like for and indeterminate loops like while",
                "The main types are for for defined iterations and while for conditions"
            ]
        },
        {
            "tag": "for_loop",
            "patterns": [
                "what is a for loop",
                "what does for loop mean",
                "what is a for loop",
                "what does for cycle mean"
            ],
            "responses": [
                "is a loop that repeats a block of code a fixed number of times",
                "It is used when the number of iterations is known in advance",
                "is a structure that includes a beginning, a condition, and an increment or decrement"
            ]
        },
        {
            "tag": "examples_for",
            "patterns": [
                "can you give me examples of a for loop",
                "What examples are there of for loops?",
                "tell me examples of for loops",
                "give examples of for loops",
                "for loop examples"
            ],
            "responses": [
                "display the numbers from 1 to 10 on the screen",
                "calculate the sum of the first 100 integers",
                "print the elements of an array or list one by one"
            ]
        },
        {
            "tag": "while_loop",
            "patterns": [
                "what is a while loop",
                "what does while loop mean",
                "what is a while loop",
                "What does while loop mean?"
            ],
            "responses": [
                "is a loop that executes a block of code as long as a condition is true",
                "It is used when it is not known exactly how many times the task will be repeated",
                "is a structure that evaluates a condition before executing the code block"
            ]
        },
        {
            "tag": "examples_while",
            "patterns": [
                "can you give me examples of a while loop",
                "What examples are there of while loops?",
                "tell me examples of while loops",
                "give examples of while loops",
                "while loop examples"
            ],
            "responses": [
                "keep asking the user for a number until they enter a positive number",
                "add numbers entered by the user until zero is entered",
                "show a counter that increments as long as it is less than 10"
            ]
        },
        {
            "tag": "examples_do while",
            "patterns": [
                "can you give me examples of a do while loop",
                "What examples are there of do while loops?",
                "tell me examples of do while loops",
                "give examples of do while loops",
                "do while loop examples"
            ],
            "responses": [
                "ask the user for a number until they enter one greater than 10",
                "display a message on the screen at least once, then repeat according to a condition",
                "calculate the sum of numbers entered until the user types exit"
            ]
        },
        {
            "tag": "input_output_algorithm_instructions",
            "patterns": [
                "What are the input and output instructions in an algorithm?",
                "What does input and output instructions mean?",
                "What is input and output in an algorithm?"
            ],
            "responses": [
                "are the instructions that allow you to interact with the user or the environment",
                "Input instructions capture data, and output instructions display or send it.",
                "They are used to receive information from the user and display results or messages"
            ]
        },
        {
            "tag": "examples_instructions_input_output",
            "patterns": [
                "Can you give me examples of input and output instructions?",
                "What examples are there of input and output instructions?",
                "tell me examples of input and output instructions",
                "gave examples of input and output instructions",
                "examples of input and output instructions"
            ],
            "responses": [
                "read a number from the user and show its square",
                "ask the user for their name and display a welcome message",
                "capture two numbers and show their sum on the screen"
            ]
        },
        {
            "tag": "programming_language",
            "patterns": [
                "what is a programming language",
                "What does programming language mean?",
                "what is a computer language"
            ],
            "responses": [
                "It is a means of communicating with a computer using instructions",
                "It is a notation system for writing programs that a computer executes.",
                "It is a tool for creating software through machine-understandable instructions."
            ]
        },
        {
            "tag": "writing_instructions_programming_language",
            "patterns": [
                "What does it mean to write instructions in a programming language?",
                "What is writing instructions in a programming language?",
                "what is writing a program"
            ],
            "responses": [
                "It is writing a set of commands in a format that the computer can interpret and execute.",
                "It is using the syntax of a programming language to define how actions should be performed in an algorithm."
            ]
        },
        {
            "tag": "programming_language_syntax",
            "patterns": [
                "What is the syntax of a programming language?",
                "What does syntax mean in a programming language?",
                "What is the structure of a programming language",
                "What does structure mean in a programming language?"
            ],
            "responses": [
                "It is the set of rules that dictate how instructions must be written so that they are understood by a computer.",
                "It is the structure and order in which commands should be organized in a programming language."
            ]
        },
        {
            "tag": "program_language_programming",
            "patterns": [
                "What is a program in a programming language?",
                "What does program mean in a programming language?",
                "what is a computer code",
                "What does computer code mean?",
                "what is a script"
            ],
            "responses": [
                "It is a set of instructions written in a programming language to execute a specific task.",
                "It is an algorithm encoded in a format that a computer can process and execute."
            ]
        },
        {
            "tag": "code_algorithm",
            "patterns": [
                "What does it mean to code an algorithm?",
                "what is coding an algorithm",
                "what is writing computer code",
                "What does it mean to write computer code?",
                "what is programming"
            ],
            "responses": [
                "It is translating a set of logical steps of an algorithm into a programming language so that it can be executed by a computer.",
                "It is writing an algorithm using the syntax and rules of a programming language."
            ]
        },
        {
            "tag": "translate_algorithm",
            "patterns": [
                "What does it mean to translate an algorithm?",
                "what is translating an algorithm",
                "What is converting an algorithm to code?",
                "What does it mean to convert an algorithm to code?"
            ],
            "responses": [
                "It is converting the instructions of an algorithm into a format that can be interpreted by a computer.",
                "It is transforming a set of logical steps into code using a programming language."
            ]
        },
        {
            "tag": "programming_language_types",
            "patterns": [
                "What are the types of programming languages?",
                "What types of computer languages ​​exist?",
                "What classifications do programming languages ​​have?",
                "What types of programming languages ​​are there?"
            ],
            "responses": [
                "The main types are low-level and high-level languages",
                "They are classified into machine languages, assembly languages, and languages ​​such as C or Python.",
                "They can be low level like assembler or high level like java or python"
            ]
        },
        {
            "tag": "low_level_language",
            "patterns": [
                "which is a low level language",
                "What does low level language mean?",
                "which is a language close to hardware"
            ],
            "responses": [
                "It is a language close to computer hardware, like assembly language",
                "It is a type of language that operates directly with machine instructions",
                "It is a less abstract language that requires knowing hardware details"
            ]
        },
        {
            "tag": "low-level_language_examples",
            "patterns": [
                "give me examples of low level languages",
                "What languages ​​are low level?",
                "What languages ​​are close to the hardware?",
                "tell me examples of low level languages",
                "examples of low level languages",
                "give examples of low level languages"
            ],
            "responses": [
                "assembly and machine language are classic examples",
                "microcontrollers often use assembly language",
                "Binary code is the most basic low-level language."
            ]
        },
        {
            "tag": "high_level_language",
            "patterns": [
                "what is a high level language",
                "What does high level language mean?",
                "which is a more abstract language",
                "which is a language close to human language"
            ],
            "responses": [
                "It is a language designed to be easy for humans to understand.",
                "It is a more abstract type of language that hides the details of the hardware",
                "is a tool for writing complex programs with syntax close to natural language"
            ]
        },
        {
            "tag": "high-level_language_examples",
            "patterns": [
                "give me examples of high level languages",
                "What languages ​​are high level?",
                "Which languages ​​are more abstract?",
                "tell me examples of high level languages",
                "examples of high level languages",
                "give examples of high level languages"
            ],
            "responses": [
                "python, java, c++, and javascript are examples of high-level languages",
                "languages ​​like ruby, php and swift are also high level",
                "popular tools like go and kotlin belong to this category"
            ]
        },
        {
            "tag": "difference_language_high_low_level",
            "patterns": [
                "What is the difference between high and low level languages?",
                "What is the difference between high and low level languages?",
                "What distinguishes high-level and low-level languages?",
                "What separates high-level and low-level languages?",
                "What differentiates high- and low-level languages?"
            ],
            "responses": [
                "low level ones are close to the hardware, while high level ones are easier for humans",
                "Low-level languages ​​require more hardware knowledge, high-level languages ​​are more abstract.",
                "In high-level languages ​​you write fewer lines of code for complex tasks"
            ]
        },
        {
            "tag": "compiled_language",
            "patterns": [
                "what is a compiled language",
                "What does compiled language mean?",
                "What is a language that needs compilation?",
                "which is a language that translates into machine code"
            ],
            "responses": [
                "It is a language that is translated into machine code before being executed.",
                "is a type of language where the entire program is converted to binary before being executed",
                "It is a language that needs a compiler to generate an executable"
            ]
        },
        {
            "tag": "examples_compiled_languages",
            "patterns": [
                "can you give me examples of compiled languages",
                "What languages ​​are compiled?",
                "What languages ​​need compilation?",
                "tell me examples of compiled languages",
                "examples of compiled languages",
                "give examples of compiled languages"
            ],
            "responses": [
                "c, c++ and rust are examples of compiled languages",
                "languages ​​like go and fortran are compiled",
                "swift and kotlin can also be compiled"
            ]
        },
        {
            "tag": "interpreted_language",
            "patterns": [
                "what is an interpreted language",
                "What does interpreted language mean?",
                "which is a language that runs in real time",
                "which is a language that does not need compilation"
            ],
            "responses": [
                "It is a language that is executed directly by an interpreter without the need to compile",
                "It is a type of language where instructions are translated and executed in real time",
                "Interpreted languages ​​do not generate a binary file before running"
            ]
        },
        {
            "tag": "examples_interpreted_languages",
            "patterns": [
                "Can you give me examples of interpreted languages?",
                "What languages ​​are interpreted?",
                "What languages ​​run in real time?",
                "tell me examples of interpreted languages",
                "examples of interpreted languages",
                "give examples of interpreted languages"
            ],
            "responses": [
                "python, javascript and ruby ​​are interpreted languages",
                "php and perl are other examples of interpreted languages",
                "languages ​​like lua and bash are also interpreted"
            ]
        },
        {
            "tag": "difference_compiled_interpreted_languages",
            "patterns": [
                "What is the difference between compiled and interpreted languages?",
                "What is the difference between compiled and interpreted languages?",
                "What distinguishes compiled and interpreted languages",
                "What separates compiled and interpreted languages",
                "What differentiates compiled and interpreted languages"
            ],
            "responses": [
                "compiled ones generate an executable before running, interpreted ones do not",
                "The compiled ones are faster in execution, but the interpreted ones are more flexible",
                "Interpreted ones translate instructions in real time, compiled ones do it sooner"
            ]
        },
        {
            "tag": "object_oriented_language",
            "patterns": [
                "what is an object oriented language",
                "What does object-oriented language mean?",
                "which is a language that uses classes and objects",
                "what is poo",
                "what does poo mean",
                "What is object-oriented programming?",
                "What does object-oriented programming mean?"
            ],
            "responses": [
                "It is a language that organizes code into objects that represent real-world entities.",
                "It is a programming paradigm that uses classes and objects to structure the code.",
                "It is a type of language where data and functions are encapsulated in objects"
            ]
        },
        {
            "tag": "object-oriented_language_examples",
            "patterns": [
                "Can you give me examples of object-oriented languages?",
                "What languages ​​are object-oriented?",
                "what languages ​​do poo use",
                "tell me examples of object-oriented languages",
                "examples of object-oriented languages",
                "give examples of object-oriented languages"
            ],
            "responses": [
                "Java, Python, C++ and Ruby are object-oriented languages.",
                "Languages ​​like Kotlin and Swift also use object orientation",
                "c# and javascript support object-oriented programming"
            ]
        },
        {
            "tag": "functional_language",
            "patterns": [
                "what is a functional language",
                "What does functional language mean?",
                "which is a language that treats computations as functions",
                "what is functional programming",
                "What does functional programming mean?"
            ],
            "responses": [
                "is a language that treats computations as evaluations of mathematical functions",
                "It is a paradigm where functions are the main units of the program",
                "functional languages ​​avoid mutable states and data"
            ]
        },
        {
            "tag": "functional_language_examples",
            "patterns": [
                "Can you give me examples of functional languages?",
                "What languages ​​are functional?",
                "What languages ​​use functional programming?",
                "tell me examples of functional languages",
                "examples of functional languages",
                "give examples of functional languages"
            ],
            "responses": [
                "Haskell, Elixir and Erlang are examples of functional languages",
                "languages ​​like f# and clojure are also functional",
                "scala and ocaml support the functional paradigm"
            ]
        },
        {
            "tag": "scripting_language",
            "patterns": [
                "what is a scripting language",
                "What does scripting language mean?",
                "What is a language for writing scripts?",
                "what is script programming",
                "What does script programming mean?"
            ],
            "responses": [
                "is a language designed to automate tasks in an operating system or application",
                "is a type of language used to write scripts that control programs or processes",
                "Scripting languages ​​are commonly interpreted and used for quick tasks."
            ]
        },
        {
            "tag": "scripting_language_examples",
            "patterns": [
                "Can you give me examples of scripting languages?",
                "What languages ​​are scripting?",
                "What languages ​​are used for scripts?",
                "tell me examples of scripting languages",
                "scripting language examples",
                "give examples of scripting languages"
            ],
            "responses": [
                "javascript, python and bash are common scripting languages",
                "languages ​​like ruby, php and perl are also scripting",
                "lua and powershell are other examples of scripting languages"
            ]
        },
        {
            "tag": "python_en",
            "patterns": [
                "what is python",
                "what does python mean",
                "What is a Python programming language?",
                "python"
            ],
            "responses": [
                "It is a high-level, interpreted, multipurpose programming language.",
                "It is a popular language for its simple syntax and large number of libraries",
                "It is a widely used tool for data science, artificial intelligence and web development"
            ]
        },
        {
            "tag": "uses_python",
            "patterns": [
                "what is python used for",
                "what can be done with python",
                "What applications does Python have?"
            ],
            "responses": [
                "It is used in data science, artificial intelligence, web development and automation",
                "It is common in data analysis, machine learning and application development",
                "It is also used to create scripts, manage data and program applications."
            ]
        },
        {
            "tag": "Java_en",
            "patterns": [
                "what is java",
                "what does java mean",
                "What is a Java programming language?",
                "Java"
            ],
            "responses": [
                "It is a high-level, object-oriented, cross-platform programming language.",
                "It is a language known for its portability thanks to the Java virtual machine",
                "It is a popular tool for enterprise applications and mobile development."
            ]
        },
        {
            "tag": "uses_java",
            "patterns": [
                "What is java used for?",
                "what can be done with java",
                "What applications does Java have?"
            ],
            "responses": [
                "It is used to develop business applications, games and software for android",
                "It is common in server applications, distributed systems and web applications",
                "It is also used to program embedded devices and desktop applications."
            ]
        },
        {
            "tag": "javascript_en",
            "patterns": [
                "what is javascript",
                "what does javascript mean",
                "what is a javascript programming language",
                "javascript"
            ],
            "responses": [
                "It is essential for modern frontend development",
                "It is a key tool for client-side and server-side programming.",
                "It is a programming language used to add interactivity to web pages",
                "It is a high-level programming language used primarily for web development.",
                "allows you to create dynamic functionalities such as animations and validations",
                "It is an interpreted language that allows you to create dynamic and interactive web pages."
            ]
        },
        {
            "tag": "uses_javascript",
            "patterns": [
                "What is javascript used for?",
                "what can be done with javascript",
                "What applications does javascript have?",
                "that can be developed with javascript",
                "that can be programmed with javascript"
            ],
            "responses": [
                "used to create interactive web interfaces and modern web applications",
                "It is common in client and server side development with nodejs",
                "It is also used to handle events on web pages and build web games."
            ]
        },
        {
            "tag": "c",
            "patterns": [
                "what is c",
                "what does c mean",
                "what is a c programming language",
                "c",
                "c language"
            ],
            "responses": [
                "It is a low-level, structured and efficient programming language.",
                "It is known for its speed and control over system resources",
                "is a tool used for high-performance operating systems, compilers and applications"
            ]
        },
        {
            "tag": "uses_c",
            "patterns": [
                "what is c used for",
                "what can be done with c",
                "What applications does c have?",
                "which can be developed with c",
                "which can be programmed with c"
            ],
            "responses": [
                "It is used in the development of operating systems and hardware software",
                "It is common for programming embedded devices and high-performance applications.",
                "It is also used in video games, simulations and real-time systems."
            ]
        },
        {
            "tag": "c++",
            "patterns": [
                "what is c++",
                "what does c++ mean",
                "What is a C++ programming language?",
                "c++",
                "c++ language"
            ],
            "responses": [
                "It is a high-level programming language based on C, with support for object-oriented programming.",
                "It is a versatile and efficient language used for complex software development.",
                "It is a C extension that includes advanced features such as classes and objects."
            ]
        },
        {
            "tag": "uses_c++",
            "patterns": [
                "What is c++ used for?",
                "what can be done with c++",
                "What applications does C++ have?",
                "that can be developed with c++",
                "that can be programmed with c++"
            ],
            "responses": [
                "It is used to develop video games, simulation software and graphics engines.",
                "It is common in the development of operating systems and scientific applications",
                "It is also used for high performance applications and embedded systems."
            ]
        },
        {
            "tag": "kotlin",
            "patterns": [
                "what is kotlin",
                "what does kotlin mean",
                "What is a Kotlin programming language?",
                "kotlin"
            ],
            "responses": [
                "is a modern, high-level programming language developed by jetbrains",
                "It is known to be interoperable with Java and mainly used for mobile development.",
                "It is a popular tool for developing Android applications and backend systems."
            ]
        },
        {
            "tag": "uses_kotlin",
            "patterns": [
                "What is Kotlin used for?",
                "what can be done with kotlin",
                "What applications does Kotlin have?",
                "that can be developed with kotlin",
                "that can be programmed with kotlin"
            ],
            "responses": [
                "It is used to develop android applications and backend systems",
                "It is common in projects that require integration with Java",
                "It is also used for cross-platform applications and microservices."
            ]
        },
        {
            "tag": "what is swift",
            "patterns": [
                "what is swift"
            ],
            "responses": [
                "It is a modern programming language developed by Apple for its platforms.",
                "It is known for being fast, secure and easy to learn",
                "It is a popular tool for developing applications for iOS and Macos."
            ]
        },
        {
            "tag": "What is Swift used for?",
            "patterns": [
                "What is Swift used for?"
            ],
            "responses": [
                "It is used to develop applications for iOS, macos, watchos and tvos",
                "It is common in the Apple ecosystem for mobile and desktop applications",
                "It is also used for learning and open source projects in the Apple community."
            ]
        },
        {
            "tag": "what is rust",
            "patterns": [
                "what is rust"
            ],
            "responses": [
                "It is a modern programming language focused on security and performance",
                "It is known for its memory management system that prevents common errors",
                "is a tool used for high performance systems and secure software"
            ]
        },
        {
            "tag": "What is rust used for?",
            "patterns": [
                "What is rust used for?"
            ],
            "responses": [
                "It is used to develop embedded systems, browsers and secure software",
                "It is common in projects where performance and security are critical",
                "It is also used in system applications such as database engines."
            ]
        },
        {
            "tag": "what is go",
            "patterns": [
                "what is go"
            ],
            "responses": [
                "It is a programming language created by Google focused on simplicity and performance.",
                "It is known for being fast, scalable and easy to compile.",
                "It is a popular tool for distributed systems and web services"
            ]
        },
        {
            "tag": "What is go used for?",
            "patterns": [
                "What is go used for?"
            ],
            "responses": [
                "used to develop web services, infrastructure tools and distributed systems",
                "It is common in high-performance applications such as servers and microservices",
                "It is also used in network, cloud computing and container projects."
            ]
        },
        {
            "tag": "python_advantages",
            "patterns": [
                "what are the advantages of python",
                "What advantages does Python have?",
                "why use python",
                "python advantages"
            ],
            "responses": [
                "It is easy to learn and read thanks to its simple syntax",
                "has a large number of libraries and frameworks available",
                "It is cross-platform and widely supported by the community"
            ]
        },
        {
            "tag": "python_disadvantages",
            "patterns": [
                "what are the disadvantages of python",
                "What are the disadvantages of Python?",
                "why not use python",
                "python disadvantages"
            ],
            "responses": [
                "It is slower than other languages ​​like C or Java.",
                "consumes more resources due to its interpreted nature",
                "It is not the best option for real-time applications."
            ]
        },
        {
            "tag": "frameworks",
            "patterns": [
                "What frameworks exist in Python?",
                "What frameworks are used in Python?",
                "python frameworks",
                "popular frameworks in python"
            ],
            "responses": [
                "some popular frameworks are django, flask and fastapi",
                "There are also pandas and numpy for data analysis",
                "tensorflow and pytorch are used for artificial intelligence"
            ]
        },
        {
            "tag": "difference_python_java",
            "patterns": [
                "What is the difference between Python and Java?",
                "what is the difference between python and java",
                "What distinguishes python and java",
                "What separates python and java",
                "what differentiates python and java"
            ],
            "responses": [
                "python has a simpler syntax and is interpreted",
                "java is faster and is compiled into bytecode for the virtual machine",
                "Java is used more for business applications, while Python is common in data analysis."
            ]
        },
        {
            "tag": "java_features",
            "patterns": [
                "What features does Java have?",
                "what makes java special",
                "why use java",
                "java features"
            ],
            "responses": [
                "It is object-oriented and has automatic garbage collection.",
                "It is cross-platform thanks to the Java virtual machine",
                "It has a static typing system that prevents errors at compile time"
            ]
        },
        {
            "tag": "java_advantages",
            "patterns": [
                "what are the advantages of java",
                "What advantages does Java have?",
                "why use java",
                "java advantages"
            ],
            "responses": [
                "It is very scalable and suitable for enterprise applications",
                "It has a mature ecosystem and extensive documentation",
                "It is compatible with a large number of platforms"
            ]
        },
        {
            "tag": "frameworks_java",
            "patterns": [
                "What frameworks exist in Java?",
                "What frameworks are used in Java?",
                "java frameworks",
                "popular frameworks in java"
            ],
            "responses": [
                "some popular frameworks are spring, hibernate and struts",
                "spring boot is common to develop microservices",
                "javafx is used to create graphical interfaces"
            ]
        },
        {
            "tag": "c++_features",
            "patterns": [
                "What characteristics does c++ have?",
                "what makes c++ special",
                "why use c++",
                "c++ features"
            ],
            "responses": [
                "supports object-oriented and functional programming",
                "allows fine-grained control over memory",
                "It is a compiled language that offers high performance"
            ]
        },
        {
            "tag": "difference_c_c++",
            "patterns": [
                "what is the difference between c and c++",
                "what is the difference between c and c++",
                "What distinguishes c and c++",
                "What separates c and c++",
                "What is the difference between c and c++?"
            ],
            "responses": [
                "C is a structured language while C++ supports object-oriented programming.",
                "c++ includes features such as classes, inheritance and polymorphism",
                "c is used for operating systems, while c++ is more common in video games and simulations."
            ]
        },
        {
            "tag": "framework",
            "patterns": [
                "what is a framework",
                "What does framework mean?",
                "what is a programming framework",
                "framework",
                "programming framework"
            ],
            "responses": [
                "It is a predefined code structure that makes application development easier.",
                "is a set of tools and libraries that help solve common problems",
                "serves to streamline and standardize the development process"
            ]
        },
        {
            "tag": "programming_language",
            "patterns": [
                "how to choose a programming language",
                "what programming language to learn",
                "which programming language is better",
                "What programming language is most popular?"
            ],
            "responses": [
                "It depends on the project you want to carry out, such as web development or mobile applications.",
                "consider community support and tools available",
                "think about the learning curve and your long-term goals"
            ]
        },
        {
            "tag": "django",
            "patterns": [
                "what is django",
                "what does django mean",
                "What is a django programming framework?",
                "django"
            ],
            "responses": [
                "It is a high-level framework for web development in Python.",
                "It is known for following the principle of don't repeat yourself and facilitating rapid development.",
                "includes tools to manage databases, authentication and more"
            ]
        },
        {
            "tag": "django_advantages",
            "patterns": [
                "What advantages does django have?",
                "why use django",
                "django advantages",
                "django benefits",
                "why choose django",
                "django advantages"
            ],
            "responses": [
                "It has an integrated and powerful administration system",
                "It is scalable and suitable for small and large projects",
                "follow good practices like the mvc principle"
            ]
        },
        {
            "tag": "flask",
            "patterns": [
                "what is flask",
                "What does flask mean?",
                "What is a Flask programming framework?",
                "flask",
                "framework flask"
            ],
            "responses": [
                "It is a microframework for web development in Python",
                "It is known for being lightweight and easy to extend.",
                "It is lightweight and allows you to create fast APIs with minimal configuration.",
                "allows you to create web applications with minimal configuration",
                "is a python microframework for backend development",
                "It is ideal for small projects and prototypes"
            ]
        },
        {
            "tag": "serves_flask",
            "patterns": [
                "What is flask for?",
                "what can be done with flask",
                "What applications does Flask have?",
                "that can be developed with flask",
                "that can be programmed with flask"
            ],
            "responses": [
                "used to develop small web applications and APIs",
                "It is ideal for projects that require flexibility",
                "It is used in applications where a robust framework like django is not needed"
            ]
        },
        {
            "tag": "frameworks_artificial_intelligence_python",
            "patterns": [
                "What frameworks are there for artificial intelligence in Python?",
                "What frameworks are used for artificial intelligence in Python?",
                "frameworks artificial intelligence python",
                "popular frameworks for artificial intelligence in python"
            ],
            "responses": [
                "some popular ones are tensorflow, pytorch and scikit-learn",
                "tensorflow is used for neural networks and deep learning",
                "scikit-learn is ideal for classical machine learning"
            ]
        },
        {
            "tag": "spring",
            "patterns": [
                "what is spring",
                "what does spring mean",
                "What is a spring programming framework?",
                "spring",
                "spring framework",
                "spring framework"
            ],
            "responses": [
                "It is a framework for developing business applications in Java.",
                "provides tools to develop scalable applications",
                "supports aspect-oriented programming and dependency management"
            ]
        },
        {
            "tag": "serves_spring_boot",
            "patterns": [
                "What is spring boot for?",
                "what can be done with spring boot",
                "What applications does Spring Boot have?",
                "that can be developed with spring boot",
                "that can be programmed with spring boot"
            ],
            "responses": [
                "It is used to create Java applications with minimal configuration",
                "facilitates the development of microservices",
                "It is ideal for projects that require quick implementation"
            ]
        },
        {
            "tag": "hibernate",
            "patterns": [
                "what is hibernate",
                "What does hibernate mean?",
                "What is a hibernate programming framework?",
                "hibernate",
                "hibernate framework"
            ],
            "responses": [
                "is an object-relational mapping framework for java",
                "allows you to interact with databases efficiently",
                "facilitates data persistence in java applications"
            ]
        },
        {
            "tag": "difference_spring_hibernate",
            "patterns": [
                "What is the difference between spring and hibernate?",
                "what is the difference between spring and hibernate",
                "What distinguishes spring and hibernate",
                "What separates spring and hibernate",
                "What is the difference between spring and hibernate?"
            ],
            "responses": [
                "spring is a general framework for enterprise applications",
                "hibernate focuses on data mapping and persistence",
                "spring can integrate hibernate as part of its ecosystem"
            ]
        },
        {
            "tag": "react",
            "patterns": [
                "what is react",
                "what does react mean",
                "what is a react programming framework",
                "react",
                "react framework"
            ],
            "responses": [
                "is a javascript library for building user interfaces",
                "It is developed by Facebook and focuses on reusable components",
                "It is ideal for dynamic and modern web applications"
            ]
        },
        {
            "tag": "serves_react",
            "patterns": [
                "What is react for?",
                "what can be done with react",
                "What applications does react have?",
                "that can be developed with react",
                "that can be programmed with react"
            ],
            "responses": [
                "It is used to create web applications with dynamic interfaces",
                "It is used to build single page or spa websites.",
                "makes it easier to manage state and render components"
            ]
        },
        {
            "tag": "angular",
            "patterns": [
                "what is angular",
                "what does angular mean",
                "what is an angular programming framework",
                "angular",
                "angular framework"
            ],
            "responses": [
                "It is a javascript framework for web application development.",
                "It is maintained by Google and follows a component-based architecture.",
                "offers built-in tools such as dependency injection and routing"
            ]
        },
        {
            "tag": "difference_angular_react",
            "patterns": [
                "What is the difference between Angular and React?",
                "what is the difference between angular and react",
                "What distinguishes angular and react",
                "What separates angular and react",
                "What is the difference between Angular and React?",
                "angular vs react"
            ],
            "responses": [
                "angular is a complete framework while react is a library",
                "react allows more flexibility when integrating external tools",
                "Angular has a steeper learning curve but offers more built-in functionality"
            ]
        },
        {
            "tag": "view",
            "patterns": [
                "what is vue",
                "what does vue mean",
                "What is a vue programming framework?",
                "view",
                "vue framework",
                "vuejs"
            ],
            "responses": [
                "is a progressive javascript framework for building user interfaces",
                "It is known for its simplicity and ease of integration",
                "It is ideal for small and large projects that require modularity"
            ]
        },
        {
            "tag": "frameworks_c++",
            "patterns": [
                "What frameworks exist in c++",
                "What frameworks are used in C++?",
                "c++ frameworks",
                "popular frameworks in c++",
                "frameworks for c++",
                "c++ frameworks"
            ],
            "responses": [
                "some popular ones are qt, boost and bit",
                "qt is used for developing cross-platform applications with graphical interfaces",
                "boost provides libraries for many common tasks such as memory management"
            ]
        },
        {
            "tag": "qt",
            "patterns": [
                "what is qt",
                "what does qt mean",
                "What is a QT programming framework?",
                "qt",
                "framework qt",
                "qt framework",
                "qtc++"
            ],
            "responses": [
                "It is a framework for C++ focused on graphical and cross-platform applications.",
                "includes tools to create modern graphical interfaces",
                "It is used in desktop, mobile and embedded software"
            ]
        },
        {
            "tag": "mobile_development_frameworks",
            "patterns": [
                "What frameworks are there for mobile development?",
                "What frameworks are used for mobile development?",
                "mobile development frameworks",
                "popular frameworks for mobile development",
                "frameworks for mobile development"
            ],
            "responses": [
                "some popular ones are flutter, react native and xamarin",
                "flutter is developed by google and uses dart as the base language",
                "react native allows you to develop mobile applications using javascript"
            ]
        },
        {
            "tag": "flutter",
            "patterns": [
                "what is flutter",
                "what does flutter mean",
                "What is a Flutter programming framework?",
                "flutter",
                "flutter framework",
                "flutter framework"
            ],
            "responses": [
                "It is a Google framework for cross-platform mobile development.",
                "allows you to create native applications with a single code base",
                "use dart as a programming language"
            ]
        },
        {
            "tag": "react_native",
            "patterns": [
                "what is react native",
                "what does react native mean",
                "What is a react native programming framework?",
                "react native",
                "react native framework",
                "react native framework"
            ],
            "responses": [
                "It is a javascript-based framework for mobile development.",
                "allows you to create applications for iOS and Android with a single code base",
                "It is based on the same component philosophy as react"
            ]
        },
        {
            "tag": "frontend",
            "patterns": [
                "what is frontend",
                "What does frontend mean?",
                "what is frontend development",
                "frontend"
            ],
            "responses": [
                "It is the visual part of an application with which users interact",
                "refers to the development of graphic interfaces and user experiences",
                "includes technologies such as html, css and javascript"
            ]
        },
        {
            "tag": "frontend_languages",
            "patterns": [
                "What languages ​​are used in frontend?",
                "What languages ​​are used for frontend development?",
                "frontend languages",
                "frontend languages"
            ],
            "responses": [
                "the main ones are html, css and javascript",
                "Technologies such as typescript and frameworks such as react or angular are also used."
            ]
        },
        {
            "tag": "html",
            "patterns": [
                "what is html",
                "what does html mean",
                "What is an HTML programming language?",
                "html"
            ],
            "responses": [
                "It is a markup language used to structure the content of a web page.",
                "defines the basic structure of a page such as headings, paragraphs and links",
                "It is essential for frontend development"
            ]
        },
        {
            "tag": "css",
            "patterns": [
                "what is css",
                "what does css mean",
                "What is a CSS programming language?",
                "css"
            ],
            "responses": [
                "It is a styling language used to define the appearance of a web page.",
                "allows you to customize colors, fonts and design of elements",
                "used in conjunction with html to enhance the visual experience"
            ]
        },
        {
            "tag": "frameworks_frontend",
            "patterns": [
                "What frameworks are used in frontend",
                "What frameworks are used for frontend development?",
                "frontend frameworks",
                "frontend frameworks"
            ],
            "responses": [
                "some popular ones are react, angular and vue",
                "bootstrap is used for responsive design",
                "tailwind css is a modern tool for styles"
            ]
        },
        {
            "tag": "difference_react_angular",
            "patterns": [
                "What is the difference between react and angular?",
                "what is the difference between react and angular",
                "What distinguishes react and angular",
                "What separates react and angular",
                "What is the difference between react and angular?",
                "react vs angular"
            ],
            "responses": [
                "react is a library while angular is a complete framework",
                "react offers more flexibility, but angular includes more built-in tools",
                "react is used for lightweight projects and angular for robust applications"
            ]
        },
        {
            "tag": "spa",
            "patterns": [
                "what is a spa",
                "what does spa mean",
                "which is a single page application",
                "spa"
            ],
            "responses": [
                "It is a single page application where the content loads dynamically",
                "avoid reloading the entire page when navigating between sections",
                "It is common in frameworks like react, angular and vue"
            ]
        },
        {
            "tag": "backend",
            "patterns": [
                "what is backend",
                "what does backend mean",
                "what is backend development",
                "backend"
            ],
            "responses": [
                "It is the part of a system that manages the logic, databases and servers",
                "is responsible for processing requests and sending responses to the frontend",
                "It is essential to manage the business logic of an application"
            ]
        },
        {
            "tag": "backend_languages",
            "patterns": [
                "What languages ​​are used in the backend?",
                "What languages ​​are used for backend development?",
                "backend languages",
                "backend languages",
                "tell me languages ​​for backend",
                "tell me backend languages",
                "say backend languages"
            ],
            "responses": [
                "some popular ones are java, python, php, ruby ​​and javascript with nodejs",
                "go, c# and kotlin are also used depending on the use case"
            ]
        },
        {
            "tag": "frameworks_backend",
            "patterns": [
                "What frameworks are used in the backend?",
                "What frameworks are used for backend development?",
                "backend frameworks",
                "backend frameworks",
                "tell me frameworks for backend",
                "tell me backend frameworks",
                "di backend frameworks"
            ],
            "responses": [
                "some popular ones are spring boot for java, django and flask for python",
                "laravel for php and express for nodejs are common options",
                "Ruby on rails and .net core are also used"
            ]
        },
        {
            "tag": "nodejs",
            "patterns": [
                "what is nodejs",
                "what does nodejs mean",
                "What is a Nodejs programming language?",
                "nodejs",
                "tell me what is nodejs",
                "tell me what nodejs means",
                "say what is nodejs",
                "say what does nodejs mean"
            ],
            "responses": [
                "It is a javascript execution environment for the backend",
                "allows you to develop scalable applications with a single language",
                "It is known for its efficiency in handling multiple requests"
            ]
        },
        {
            "tag": "rest api",
            "patterns": [
                "what is a rest api",
                "what does api rest mean",
                "what is a restful api",
                "rest api",
                "tell me what is a rest api",
                "tell me what api rest means",
                "say it is a rest api",
                "say what api rest means"
            ],
            "responses": [
                "It is an interface that allows communication between systems using http requests",
                "follows principles such as the separation between client and server",
                "It is common in web applications and mobile services"
            ]
        },
        {
            "tag": "graphql",
            "patterns": [
                "what is graphql",
                "what does graphql mean",
                "What is a graphql programming language?",
                "graphql",
                "tell me what is graphql",
                "tell me what graphql means",
                "say what is graphql",
                "say what graphql means"
            ],
            "responses": [
                "It is an alternative to rest for apis",
                "allows the client to specify exactly what data they need",
                "It is developed by Facebook and is used in modern applications"
            ]
        },
        {
            "tag": "database",
            "patterns": [
                "what is a database",
                "What does database mean?",
                "what is a database system",
                "database",
                "tell me what is a database",
                "tell me what database means",
                "say it is a database",
                "say what does database mean",
                "what is a bd",
                "what does bd mean",
                "what is a db",
                "what does db mean",
                "what is a db system",
                "what is a db system"
            ],
            "responses": [
                "It is a system for storing and organizing information",
                "It is essential for applications that need to handle large amounts of information.",
                "It is a system for storing and managing information in a structured way.",
                "It is used to store data that can be easily consulted and modified",
                "can be sql like mysql and postgresql, or non-sql like mongodb",
                "It is used to store data that will be used by the backend"
            ]
        },
        {
            "tag": "difference_sql_no_sql",
            "patterns": [
                "What is the difference between SQL and non-SQL?",
                "what is the difference between sql and non-sql",
                "What distinguishes sql and non-sql",
                "What separates sql and non-sql",
                "What is the difference between SQL and non-SQL?"
            ],
            "responses": [
                "SQL uses tables with defined schemas, while non-SQL is more flexible.",
                "sql is great for structured data, not sql for unstructured data",
                "sql includes systems such as mysql and postgresql, non-sql includes mongodb and cassandra"
            ]
        },
        {
            "tag": "communicate_frontend_backend",
            "patterns": [
                "How frontend and backend communicate",
                "How the frontend and backend communicate",
                "How the client and server communicate",
                "How the user and the server communicate",
                "How the browser and the server communicate",
                "How the client and the backend communicate",
                "How the user and the backend communicate",
                "How the browser and the backend communicate"
            ],
            "responses": [
                "through apis using protocols like http",
                "The frontend sends requests to the backend and it responds with data",
                "Communication can be in formats such as json or xml"
            ]
        },
        {
            "tag": "full_stack_developer",
            "patterns": [
                "what is a full stack developer",
                "What does full stack developer mean?",
                "What does a full stack developer do?",
                "full stack developer"
            ],
            "responses": [
                "is a developer who works on both frontend and backend",
                "Has knowledge of interface design and server logic",
                "can develop complete applications from start to finish"
            ]
        },
        {
            "tag": "difference_frontend_backend",
            "patterns": [
                "What is the difference between frontend and backend?",
                "what is the difference between frontend and backend",
                "What distinguishes frontend and backend",
                "What separates frontend and backend",
                "What differentiates frontend and backend"
            ],
            "responses": [
                "The frontend is what the user sees, the backend is the logic behind",
                "The frontend uses html, css and javascript, the backend uses languages ​​​​like java or python",
                "The backend is responsible for processing data and managing communication with databases."
            ]
        },
        {
            "tag": "database_types",
            "patterns": [
                "What types of databases exist?",
                "What types of database systems are there?",
                "types of databases",
                "types of database systems",
                "db types",
                "tell me types of databases",
                "tell me types of database systems",
                "say types of databases",
                "say types of database systems"
            ],
            "responses": [
                "There are relational and non-relational databases.",
                "There are also hierarchical, network and object-oriented databases.",
                "They depend on the type of information and the use case."
            ]
        },
        {
            "tag": "relational_database",
            "patterns": [
                "what is a relational database",
                "What does relational database mean?",
                "What is a relational database system?",
                "relational database",
                "tell me what is a relational database",
                "Tell me what does relational database mean?",
                "say it is a relational database",
                "What does relational database mean?",
                "what is a relational bd",
                "What does relational bd mean?",
                "what is a relational db",
                "What does relational db mean?",
                "What is a relational DB system?",
                "what is a relational db system"
            ],
            "responses": [
                "It is a database that organizes information in tables with rows and columns.",
                "uses sql as a language to query and modify data",
                "Examples include mysql, postgresql and sql server"
            ]
        },
        {
            "tag": "non-relational_database",
            "patterns": [
                "What is a non-relational database?",
                "What does non-relational database mean?",
                "What is a non-relational database system?",
                "non-relational database",
                "tell me what is a non-relational database",
                "Tell me what does non-relational database mean?",
                "say it is a non-relational database",
                "What does non-relational database mean?",
                "What is a non-relational database?",
                "What does non-relational bd mean?",
                "what is a non-relational db",
                "What does non-relational db mean?",
                "What is a non-relational DB system?",
                "what is a non-relational db system"
            ],
            "responses": [
                "It is a database that does not use tables to organize data",
                "can store information in formats such as documents, graphs or key-values",
                "Examples include mongodb, cassandra and redis"
            ]
        },
        {
            "tag": "database_schema",
            "patterns": [
                "What is a schema in a database?",
                "What does schema mean in a database?",
                "what is a database schema",
                "database schema",
                "tell me what is a schema in a database",
                "Tell me what does schema mean in a database?",
                "say it is a schema in a database",
                "What does schema mean in a database?",
                "what is a bd scheme",
                "What does bd scheme mean?",
                "what is a db schema",
                "what does db schema mean",
                "what is a database schema",
                "What does database schema mean?"
            ],
            "responses": [
                "It is the structure that defines how data is organized in a database",
                "includes tables, columns, data types, and relationships between tables",
                "It is important in relational databases"
            ]
        },
        {
            "tag": "sql",
            "patterns": [
                "what is sql",
                "what does sql mean",
                "What is an SQL programming language?",
                "sql",
                "tell me what is sql",
                "tell me what sql means",
                "say what is sql",
                "say what sql means"
            ],
            "responses": [
                "is a structured query language used to interact with relational databases",
                "allows you to perform operations such as inserting, querying and deleting data",
                "It is compatible with systems such as mysql, postgresql and oracle"
            ]
        },
        {
            "tag": "mysql",
            "patterns": [
                "what is mysql",
                "what does mysql mean",
                "what is a mysql database system",
                "mysql",
                "tell me what is mysql",
                "tell me what mysql means",
                "say what is mysql",
                "say what does mysql mean"
            ],
            "responses": [
                "It is an open source relational database management system.",
                "It is popular for being fast and easy to use.",
                "commonly used in web applications"
            ]
        },
        {
            "tag": "postgresql",
            "patterns": [
                "what is postgresql",
                "what does postgresql mean",
                "what is a postgresql database system",
                "postgresql",
                "tell me what postgresql is",
                "tell me what postgresql means",
                "say what is postgresql",
                "say what does postgresql mean"
            ],
            "responses": [
                "It is an open source, advanced relational database management system.",
                "offers support for complex transactions and extensibility",
                "It is ideal for enterprise applications and advanced projects"
            ]
        },
        {
            "tag": "sql_server",
            "patterns": [
                "what is sql server",
                "what does sql server mean",
                "what is a sql server database system",
                "sql server",
                "tell me what is sql server",
                "tell me what sql server means",
                "say what is sql server",
                "say what sql server means"
            ],
            "responses": [
                "It is a relational database management system developed by Microsoft.",
                "mainly used in business environments",
                "Offers integration with other Microsoft products such as Azure and Visual Studio"
            ]
        },
        {
            "tag": "mongodb",
            "patterns": [
                "what is mongodb",
                "what does mongodb mean",
                "what is a mongodb database system",
                "mongodb",
                "tell me what mongodb is",
                "tell me what mongodb means",
                "say what is mongodb",
                "say what mongodb means"
            ],
            "responses": [
                "is a non-relational database that stores data in json document format",
                "It is ideal for applications that handle unstructured or semi-structured data",
                "It is popular in modern web applications and distributed systems"
            ]
        },
        {
            "tag": "usa_mongodb",
            "patterns": [
                "What is mongodb used for?",
                "what can be done with mongodb",
                "What applications does mongodb have?",
                "that can be developed with mongodb",
                "that can be programmed with mongodb",
                "tell me what mongodb is used for",
                "tell me what can be done with mongodb",
                "tell me what applications mongodb has",
                "tell me what can be developed with mongodb",
                "tell me what can be programmed with mongodb",
                "tell what mongodb is used for",
                "say what can be done with mongodb",
                "say what applications mongodb has",
                "say it can be developed with mongodb",
                "say it can be programmed with mongodb"
            ],
            "responses": [
                "It is used in web applications, recommendation systems and big data",
                "It is ideal for handling large volumes of data and scaling horizontally",
                "used when a strict structure of tables and columns is not needed"
            ]
        },
        {
            "tag": "redis",
            "patterns": [
                "what is redis",
                "what does redis mean",
                "what is a redis database system",
                "redis",
                "tell me what is redis",
                "tell me what redis means",
                "say what is redis",
                "say what does redis mean"
            ],
            "responses": [
                "It is a non-relational database based on key-value",
                "It is known for its speed and is used as a cache or to store sessions",
                "It is popular in applications that require quick access to data"
            ]
        },
        {
            "tag": "cassandra",
            "patterns": [
                "what is cassandra",
                "What does Cassandra mean?",
                "what is a cassandra database system",
                "cassandra",
                "tell me what is cassandra",
                "tell me what cassandra means",
                "say it's cassandra",
                "say what cassandra means"
            ],
            "responses": [
                "It is a distributed and scalable non-relational database",
                "It is ideal for handling large volumes of data in real time",
                "It is used by companies like Netflix and Twitter for high availability"
            ]
        },
        {
            "tag": "differences_mongodb_redis",
            "patterns": [
                "What are the differences between mongodb and redis?",
                "what is the difference between mongodb and redis",
                "What distinguishes mongodb and redis",
                "What separates mongodb and redis",
                "what differentiates mongodb and redis",
                "mongodb vs redis"
            ],
            "responses": [
                "mongodb stores json documents, while redis uses a key-value model",
                "redis is faster but mongodb is more flexible for complex data",
                "redis is ideal for caching and mongodb for unstructured data"
            ]
        },
        {
            "tag": "compiler",
            "patterns": [
                "what is a compiler",
                "what does compiler mean",
                "what is a compiler program",
                "compiler",
                "tell me what is a compiler",
                "tell me what does compiler mean",
                "say it's a compiler",
                "say what does compiler mean"
            ],
            "responses": [
                "A compiler is a program that translates the source code of a high-level programming language into a low-level language or machine code.",
                "the compiler allows code written in a human-understandable language to be executed by a computer",
                "an example of a compiler is GCC for C or C++"
            ]
        },
        {
            "tag": "interpreter",
            "patterns": [
                "what is an interpreter",
                "What does interpreter mean?",
                "what is an interpreter program",
                "interpreter",
                "tell me he's an interpreter",
                "tell me what interpreter means",
                "say he is an interpreter",
                "say what interpreter means"
            ],
            "responses": [
                "is a type of program that executes the code of a programming language line by line, without having to compile all the code beforehand",
                "Unlike a compiler, an interpreter does not create a machine code file, but rather translates and executes instructions directly",
                "a common example of an interpreter is Python"
            ]
        },
        {
            "tag": "bug",
            "patterns": [
                "what is a bug",
                "what does bug mean",
                "what is a programming error",
                "bug",
                "programming error",
                "tell me it's a bug",
                "tell me what bug means",
                "say it's a bug",
                "say what bug means",
                "what is a programming error",
                "What does programming error mean?",
                "what is a code error",
                "What does code error mean?",
                "what is a code error",
                "What does code failure mean?"
            ],
            "responses": [
                "A bug is an error or flaw in a program's code that causes unexpected or incorrect behavior.",
                "Bugs can be caused by syntax errors, logic errors, or performance problems.",
                "It is important to debug the code to find and fix bugs"
            ]
        },
        {
            "tag": "debugger",
            "patterns": [
                "what is a debugger",
                "what does debugger mean",
                "what is a debugger tool",
                "debugger",
                "debugger tool",
                "tell me what is a debugger",
                "tell me what debugger means",
                "say it's a debugger",
                "say what debugger means"
            ],
            "responses": [
                "A debugger is a tool that allows you to examine the state of a program while it is running, helping to identify and correct bugs.",
                "Debuggers allow you to track code execution, inspect variables, and control program flow.",
                "Some popular debuggers are GDB for C and C++, or the debugger built into IDEs like Visual Studio Code"
            ]
        },
        {
            "tag": "variable",
            "patterns": [
                "what is a variable",
                "What does variable mean?",
                "what is a storage space",
                "variable",
                "tell me what is a variable",
                "tell me what variable means",
                "say it's a variable",
                "variables"
            ],
            "responses": [
                "A variable is a storage space that contains a value that can change during the execution of a program",
                "Variables are used to store data such as numbers, text strings, or even objects",
                "Each variable has a data type that determines what type of values ​​it can store, such as 'int' for integers or 'string' for text"
            ]
        },
        {
            "tag": "data_type",
            "patterns": [
                "what is a data type",
                "What does data type mean?",
                "what is a type of value",
                "data type",
                "tell me what is a data type",
                "tell me what data type means",
                "say it is a data type",
                "What does data type mean?",
                "what is a type of value",
                "What does value type mean?",
                "what is a type of variable",
                "What does variable type mean?"
            ],
            "responses": [
                "A data type is a classification of the values ​​that a variable can store, such as numbers, text, or booleans",
                "Basic data types include integers (int), decimal numbers (float), text (string), and logical values ​​(boolean)",
                "data types can also be more complex, such as lists, dictionaries, or even user-defined classes"
            ]
        },
        {
            "tag": "primitive_data_type",
            "patterns": [
                "which is a primitive data type",
                "What does primitive data type mean?",
                "which is a primitive value type",
                "primitive data type",
                "tell me what is a primitive data type",
                "tell me what primitive data type means",
                "say it is a primitive data type",
                "What does primitive data type mean?",
                "which is a primitive value type",
                "What does primitive value type mean?",
                "which is a primitive variable type",
                "What does primitive variable type mean?"
            ],
            "responses": [
                "A primitive data type is a basic data type that cannot be decomposed into simpler types.",
                "Primitive data types include integers (int), decimals (float), strings (string), and logical values ​​(boolean)",
                "These data types are fundamental and form the basis for building other more complex data types."
            ]
        },
        {
            "tag": "composite_data_type",
            "patterns": [
                "which is a composite data type",
                "What does composite data type mean?",
                "which is a type of composite value",
                "composite data type",
                "tell me what is a composite data type",
                "Tell me what does composite data type mean?",
                "say it is a composite data type",
                "What does composite data type mean?",
                "which is a type of composite value",
                "What does composite value type mean?",
                "which is a type of compound variable",
                "What does composite variable type mean?"
            ],
            "responses": [
                "A composite data type is a data type that is created by combining several primitive data types or even other composite types.",
                "Composite data types include lists (arrays), dictionaries (objects in some languages), tuples, and sets",
                "These data types allow for storing more complex and structured collections of data."
            ]
        },
        {
            "tag": "array",
            "patterns": [
                "what is an array",
                "what does array mean",
                "what is a list of elements",
                "array",
                "list of elements",
                "tell me what is an array",
                "tell me what array means",
                "say it's an array",
                "say what array means",
                "what is an arrangement",
                "What does arrangement mean?",
                "What is a list in programming?",
                "What does list mean in programming?"
            ],
            "responses": [
                "An array is a data structure that stores a collection of elements of the same type",
                "The elements of an array are stored in contiguous memory locations and are accessed using an index",
                "In many programming languages, such as javascript or Python, arrays can be dynamic or fixed size"
            ]
        },
        {
            "tag": "schedule_list",
            "patterns": [
                "what is a list in programming",
                "What does list mean in programming?",
                "what is a list of elements in programming",
                "list in programming",
                "tell me what a list is in programming",
                "tell me what list means in programming",
                "say it is a list in programming",
                "tell what does list mean in programming",
                "What is an arrangement in programming?",
                "What does arrangement mean in programming?",
                "what is an array in programming",
                "What does array mean in programming?"
            ],
            "responses": [
                "A list is a composite data type that stores an ordered collection of elements, which can be of different types",
                "Unlike arrays, lists can store elements of different data types in many languages, such as Python",
                "A list can also be dynamic, that is, its size can be changed during program execution"
            ]
        },
        {
            "tag": "what_dictionary",
            "patterns": [
                "what is a dictionary",
                "what does dictionary mean",
                "what is a hash table",
                "dictionary",
                "hash table",
                "tell me what is a dictionary",
                "tell me what does dictionary mean",
                "say it's a dictionary",
                "say what does dictionary mean",
                "what is a map",
                "what does map mean"
            ],
            "responses": [
                "A dictionary is a data structure that stores key-value pairs",
                "Each element in a dictionary is composed of a unique key and a value associated with that key",
                "Dictionaries are useful when you need to quickly look up a value from a key, such as in Python or javascript"
            ]
        },
        {
            "tag": "tuple",
            "patterns": [
                "what is a tuple",
                "What does tuple mean?",
                "which is an immutable structure",
                "tuple",
                "immutable structure",
                "tell me what is a tuple",
                "tell me what tuple means",
                "say it is a tuple",
                "say what tuple means"
            ],
            "responses": [
                "A tuple is a data structure similar to a list, but with the difference that tuples are immutable, that is, they cannot be modified after their creation.",
                "In many programming languages, such as Python, tuples are used to store data that should not change during program execution",
                "tuples can also contain elements of different data types"
            ]
        },
        {
            "tag": "set",
            "patterns": [
                "what is a set",
                "What does set mean?",
                "which is a collection of unique elements",
                "set",
                "collection of unique elements",
                "tell me what is a set",
                "tell me what does set mean",
                "say it's a set",
                "say what does set mean"
            ],
            "responses": [
                "A set is a collection of unordered elements without duplicates.",
                "Sets are useful when you need to store unique data, without worrying about the order in which it is inserted",
                "In Python, sets are defined using the 'set' class, and are different from lists or tuples in terms of the uniqueness of the elements"
            ]
        },
        {
            "tag": "what_is_string",
            "patterns": [
                "what is a string",
                "what does string mean",
                "what is a text string",
                "string",
                "text string",
                "tell me what is a string",
                "tell me what string means",
                "say it's a string",
                "say what string means"
            ],
            "responses": [
                "A string is a data type that represents a sequence of characters, such as text",
                "Strings can include letters, numbers, and other characters, and are used to manipulate text in most programming languages.",
                "In some languages, strings are immutable, meaning they cannot be modified after they are created, such as in Python or Java"
            ]
        },
        {
            "tag": "what_is_a_boolean",
            "patterns": [
                "what is a boolean",
                "what does boolean mean",
                "what is a logical value",
                "boolean",
                "logical value",
                "tell me what is a boolean",
                "tell me what boolean means",
                "say it's a boolean",
                "say what boolean means"
            ],
            "responses": [
                "A boolean is a data type that has only two possible values: true or false.",
                "Boolean values ​​are used in conditions and control structures, such as 'if' or 'while', to make decisions in a program",
                "Booleans are fundamental in logic programming and conditional expressions"
            ]
        },
        {
            "tag": "null_value",
            "patterns": [
                "which is a null value",
                "What does null value mean?",
                "which is a special value",
                "null value",
                "special value",
                "tell me what is a null value",
                "tell me what null value means",
                "say it is a null value",
                "say what null value means"
            ],
            "responses": [
                "A null value is a special value that represents the absence of a valid or defined value in a variable.",
                "The null value can be used to indicate that a variable has not yet been initialized or that it does not have a value assigned",
                "In some languages, such as javascript, 'null' is used to denote a null value, while in others, such as Python, 'None' is used"
            ]
        },
        {
            "tag": "floating_data_type",
            "patterns": [
                "what is a floating data type",
                "What does floating data type mean?",
                "what is a decimal value",
                "floating data type",
                "decimal value",
                "tell me what is a floating data type",
                "tell me what float data type means",
                "say it is a float data type",
                "say what float data type means"
            ],
            "responses": [
                "A float data type is a numeric type used to represent numbers with decimals.",
                "Float numbers are especially useful for performing precise calculations that include decimal values, such as 3.14 or 0.5",
                "In many programming languages, such as Python or Java, floats are represented with the type 'float'"
            ]
        },
        {
            "tag": "integer_data_type",
            "patterns": [
                "which is an integer data type",
                "What does integer data type mean?",
                "what is a numerical value",
                "integer data type",
                "numerical value",
                "tell me what is an integer data type",
                "tell me what integer data type means",
                "say it is an integer data type",
                "say what integer data type means"
            ],
            "responses": [
                "An integer data type is a numeric type used to represent numbers without decimals, such as 1, 100, or -5",
                "Integers are essential in programming to perform simple mathematical operations, such as counting or iterating over elements",
                "In languages ​​like Python or Java, integers are represented with the 'int' type"
            ]
        },
        {
            "tag": "char_data_type",
            "patterns": [
                "what is the char data type",
                "What does char data type mean?",
                "what is a character value",
                "char data type",
                "character value",
                "tell me what the char data type is",
                "Tell me what does char data type mean?",
                "say what is the data type char",
                "What does char data type mean?",
                "what is a char",
                "what does char mean",
                "what is a character",
                "what does character mean"
            ],
            "responses": [
                "The 'char' data type is used to represent a single character, such as 'a', 'B' or '9'",
                "'char' is commonly used in languages ​​such as C and C++ to manipulate individual characters in text strings",
                "In other languages ​​like Python, characters are treated as strings of length 1"
            ]
        },
        {
            "tag": "complex_data_type",
            "patterns": [
                "What is the complex data type?",
                "What does complex data type mean?",
                "what is a complex value",
                "complex data type",
                "complex value",
                "tell me what is the complex data type",
                "Tell me what does complex data type mean?",
                "say what is the complex data type",
                "What does complex data type mean?",
                "which is a complex",
                "what does complex mean",
                "what is a complex number",
                "What does complex number mean?"
            ],
            "responses": [
                "The complex data type is used to represent numbers that have a real part and an imaginary part, such as 3 + 4i",
                "In some languages, such as Python, you can work with complex numbers using the 'complex' type",
                "Complex numbers are used in areas such as engineering, mathematics, and signal processing."
            ]
        },
        {
            "tag": "what_is_a_function",
            "patterns": [
                "what is a function",
                "What does function mean?",
                "what is a method",
                "function",
                "method",
                "tell me what is a function",
                "tell me what does function mean",
                "say it's a function",
                "say what does function mean",
                "what is a subroutine",
                "What does subroutine mean?",
                "what is a procedure",
                "What does procedure mean?"
            ],
            "responses": [
                "A function is a block of code that performs a specific task and can be reused in different parts of the program.",
                "functions can accept input (parameters) and return a value as a result",
                "In many programming languages, functions allow code to be organized in a modular and efficient way"
            ]
        },
        {
            "tag": "what_is_the_recursion",
            "patterns": [
                "what is recursion",
                "What does recursion mean?",
                "what is a recursive function",
                "recursion",
                "recursive function",
                "tell me what the recursion is",
                "tell me what recursion means",
                "say what the recursion is",
                "say what recursion means",
                "what is a recursive algorithm",
                "What does recursive algorithm mean?",
                "what is a recursive process",
                "What does recursive process mean?"
            ],
            "responses": [
                "Recursion is a technique in programming in which a function calls itself to solve a problem",
                "Generally, recursion is used to solve problems that can be broken down into smaller subproblems, such as trees or binary search.",
                "It is important that a recursive function have a base condition that stops the recursive call"
            ]
        },
        {
            "tag": "ciclo_for_en_javascript",
            "patterns": [
                "como puedo crear un ciclo for en js",
                "dame un ejemplo de un ciclo for en js",
                "como escribo un buble for en js",
                "dame un ejemplo de un ciclo for en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo básico de un ciclo for en JavaScript:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "Puedes usar un for para iterar sobre un arreglo:\n\tconst numeros = [1, 2, 3, 4];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log('Elemento:', numeros[i]);\n\t}"
            ]
        },
        {
            "tag": "declaracion_de_variable_en_encabezado_for_js",
            "patterns": [
                "como declaro una variable en un ciclo en js",
                "dame un ejemplo para declarar una variable en js",
                "donde se declara la variable que se usara para iterar en un ciclo for en js",
                "dame un ejemplo de un ciclo for con la variable declarada en el encabezado."
            ],
            "responses": [
                "Aquí tienes un ejemplo de un ciclo for con la variable declarada en el encabezado:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "En javascript puedes declarar una variable directamente en el encabezado del for, así:\n\tfor (let contador = 10; contador > 0; contador--) {\n\t\tconsole.log('Cuenta regresiva:', contador);\n\t}",
                "La declaración de la variable en el encabezado del ciclo for puede verse así:\n\tfor (let indice = 0; indice < 3; indice++) {\n\t\tconsole.log(`Iteración número: ${indice}`);\n\t}",
                "Un ejemplo donde se declara la variable en el encabezado del for:\n\tfor (let numero = 1; numero <= 5; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}",
                "Así puedes declarar una variable en el encabezado del for en javascript:\n\tfor (let paso = 0; paso < 4; paso++) {\n\t\tconsole.log(`Paso actual: ${paso}`);\n\t}"
            ]
        },
        {
            "tag": "condicional_en_ciclo_for_js",
            "patterns": [
                "como funciona la condicional en un ciclo for en js",
                "dame un ejemplo de la condicional en un ciclo for en js",
                "que hace la condicional en el encabezado de un for",
                "dame un ciclo for con una condicional para iterar",
                "como uso una condicional en un ciclo for en js"
            ],
            "responses": [
                "La condicional en un ciclo for determina cuándo se detiene la iteración. Aquí tienes un ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nEn este caso, el ciclo se detiene cuando la condición `i < 5` deja de cumplirse.",
                "Un ciclo for con una condicional:\n\tfor (let numero = 1; numero <= 3; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}\nLa condición `numero <= 3` evalúa si continuar o no.",
                "La condicional es clave para controlar el ciclo. Ejemplo:\n\tfor (let x = 10; x > 0; x--) {\n\t\tconsole.log(`Cuenta regresiva: ${x}`);\n\t}\nAquí, el ciclo se detiene cuando `x > 0` deja de ser verdadero.",
                "Otro ejemplo con condicional:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nEn este caso, la condición es `i < 10`.",
                "Así puedes usar una condicional en el ciclo for:\n\tfor (let indice = 0; indice !== 5; indice++) {\n\t\tconsole.log(`Indice actual: ${indice}`);\n\t}\nEl ciclo se detiene cuando `indice !== 5` es falso."
            ]
        },
        {
            "tag": "incremento_en_ciclo_for_js",
            "patterns": [
                "como hago para que el ciclo for incremente en js",
                "dame un ejemplo de un ciclo for que vaya en incremento en js",
                "como incremento el valor en un ciclo for en js",
                "dame un for que incremente un contador en js",
                "ejemplo de ciclo for que incremente en cada iteracion"
            ],
            "responses": [
                "Para hacer que un ciclo for incremente, puedes usar el operador `++`. Ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i++` incrementa el valor de `i` en cada iteración.",
                "Un ciclo que incrementa en pasos de 1:\n\tfor (let contador = 1; contador <= 5; contador++) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se incrementa.",
                "Puedes incrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i += 2` aumenta el valor de `i` en 2 en cada iteración.",
                "Ejemplo donde el incremento es controlado manualmente:\n\tfor (let numero = 0; numero < 20; numero += 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo incrementa en pasos de 5.",
                "Un ciclo for con incremento simple:\n\tfor (let x = 1; x <= 10; x++) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl incremento se hace con `x++`."
            ]
        },
        {
            "tag": "decremento_en_ciclo_for_js",
            "patterns": [
                "como hago para que el ciclo for decremente en js",
                "dame un ejemplo de un ciclo for que vaya en decremento en js",
                "como decremento el valor en un ciclo for en js",
                "dame un for que decremente un contador en js",
                "ejemplo de ciclo for que decremente en cada iteracion"
            ],
            "responses": [
                "Para hacer que un ciclo for decremente, usa el operador `--`. Ejemplo:\n\tfor (let i = 5; i > 0; i--) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i--` decrementa el valor de `i` en cada iteración.",
                "Un ciclo que decrementa desde un valor inicial:\n\tfor (let contador = 10; contador >= 1; contador--) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se decrementa.",
                "Puedes decrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 10; i > 0; i -= 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i -= 2` reduce el valor de `i` en 2 en cada iteración.",
                "Ejemplo donde el decremento es controlado manualmente:\n\tfor (let numero = 50; numero >= 0; numero -= 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo decrementa en pasos de 5.",
                "Un ciclo for con decremento simple:\n\tfor (let x = 3; x > 0; x--) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl decremento se realiza con `x--`."
            ]
        },
        {
            "tag": "uso_break_en_ciclo_js",
            "patterns": [
                "como usar break en un ciclo for en js",
                "dame un ejemplo de break en un ciclo en javascript",
                "como funciona el break en un ciclo for en js",
                "como detener un ciclo con break en javascript"
            ],
            "responses": [
                "El `break` se utiliza para salir de un ciclo antes de que termine. Ejemplo con un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}",
                "Puedes usar `break` para salir del ciclo cuando se cumpla una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(num);\n\t}",
                "Un ejemplo con `break` para detener el ciclo cuando un número sea mayor que 10:\n\tfor (let i = 0; i <= 20; i++) {\n\t\tif (i > 10) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}"
            ]
        },
        {
            "tag": "uso_continue_en_ciclo_js",
            "patterns": [
                "como usar continue en un ciclo for en js",
                "dame un ejemplo de continue en un ciclo en javascript",
                "como funciona el continue en un ciclo en js",
                "como saltar una iteracion con continue en javascript"
            ],
            "responses": [
                "El `continue` se utiliza para saltarse una iteración del ciclo y pasar a la siguiente. Ejemplo en un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}",
                "Puedes usar `continue` para saltar una iteración si se cumple una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(num);\n\t}",
                "Un ejemplo con `continue` para omitir números impares:\n\tfor (let i = 0; i <= 10; i++) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}"
            ]
        },
        {
            "tag": "declaracion_de_arrays_en_js",
            "patterns": [
                "como se declara un array en js",
                "dame ejemplos de declaracion de arrays en js",
                "como crear un array en javascript",
                "dame un ejemplo de un array en js",
                "ejemplo de declaracion de arrays en js"
            ],
            "responses": [
                "Un array se puede declarar usando corchetes:\n\tconst numeros [] = [1, 2, 3, 4, 5];\n\tconsole.log(numeros);",
                "También puedes usar la sintaxis genérica para declarar un array:\n\tconst nombres: Array<string> = ['Juan', 'Maria', 'Luis'];\n\tconsole.log(nombres);",
                "Declarar un array vacío y llenarlo luego:\n\tconst datos [] = [];\n\tdatos.push('valor1');\n\tdatos.push('valor2');\n\tconsole.log(datos);"
            ]
        },
        {
            "tag": "acceso_a_elementos_array_con_for_js",
            "patterns": [
                "como acceder a elementos de un array con un ciclo for en tjs",
                "dame ejemplos de recorrer un array con un for en js",
                "como usar un ciclo for para obtener elementos de un array en javascript",
                "dame un ejemplo de acceso a arrays con un for en js",
                "como iterar sobre un array usando for en js"
            ],
            "responses": [
                "Puedes usar un ciclo for para acceder a los elementos de un array:\n\tconst numeros: number[] = [10, 20, 30, 40];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log(`Elemento en índice ${i}: ${numeros[i]}`);\n\t}",
                "Ejemplo básico de iteración con un for:\n\tconst frutas: string[] = ['manzana', 'naranja', 'platano'];\n\tfor (let i = 0; i < frutas.length; i++) {\n\t\tconsole.log(frutas[i]);\n\t}"
            ]
        },
        {
            "tag": "declaracion_y_uso_basico_tuplas_js",
            "patterns": [
                "como se declara una tupla en js",
                "dame ejemplos de como usar tuplas en js",
                "como crear una tupla en javascript",
                "dame un ejemplo de una tupla en js",
                "ejemplo basico de tupla en js"
            ],
            "responses": [
                "Una tupla en javascript se declara especificando los tipos en un arreglo:\n\tconst tupla  = ['Juan', 25];\n\tconsole.log(tupla);",
                "Puedes usar una tupla para representar datos relacionados:\n\tconst coordenadas = [40.7128, -74.0060];\n\tconsole.log(`Latitud: ${coordenadas[0]}, Longitud: ${coordenadas[1]}`);",
                "Ejemplo con tipos mixtos:\n\tconst persona = ['Ana', 30, true];\n\tconsole.log(`Nombre: ${persona[0]}, Edad: ${persona[1]}, Activo: ${persona[2]}`);"
            ]
        },
        {
            "tag": "estructura_basica_if_normal_js",
            "patterns": [
                "como funciona un if en js",
                "dame ejemplos de un if en js",
                "como usar un if en javascript",
                "dame un ejemplo de una estructura if en js",
                "como se estructura un if en js"
            ],
            "responses": [
                "La estructura básica de un `if` en javascript es:\n\tif (condicion) {\n\t\t// código a ejecutar si la condición es verdadera\n\t}\nEjemplo:\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
                "Un ejemplo sencillo de un `if`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
                "Otro ejemplo donde se utiliza una comparación:\n\tlet temperatura = 30;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t}",
                "Puedes comprobar condiciones lógicas en el `if`:\n\tlet edad = 20;\n\tif (edad >= 18) {\n\t\tconsole.log('Acceso permitido');\n\t}",
                "Ejemplo de un `if` simple:\n\tlet numero = 4;\n\tif (numero % 2 === 0) {\n\t\tconsole.log('Es un número par');\n\t}"
            ]
        },
        {
            "tag": "condicionales_compuestas_and_if_js",
            "patterns": [
                "como colocar varias condiciones en un if en js",
                "dame ejemplos de un if con varias condiciones en js",
                "como usar el operador and en un if en javascript",
                "como combinar condiciones dentro de un if en js"
            ],
            "responses": [
                "Puedes usar el operador `&&` para combinar condiciones dentro de un `if`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t}",
                "Ejemplo de múltiples condiciones con `&&`:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t}",
                "Puedes combinar más de una condición usando `&&`:\n\tlet temperatura = 30;\n\tlet humedad = 80;\n\tif (temperatura > 25 && humedad > 70) {\n\t\tconsole.log('Hace calor y está húmedo');\n\t}"
            ]
        },
        {
            "tag": "condicionales_negacion_if_js",
            "patterns": [
                "como usar negacion dentro de un if en js",
                "dame ejemplos de como usar el operador not en un if en javascript",
                "como negar una condicion en un if en js",
                "como poner una condicion falsa en un if en javascript"
            ],
            "responses": [
                "Puedes usar el operador `!` para negar una condición dentro de un `if`:\n\tlet estaLloviendo = false;\n\tif (!estaLloviendo) {\n\t\tconsole.log('No está lloviendo');\n\t}",
                "Negar una condición en un `if`:\n\tlet esMayorDeEdad = false;\n\tif (!esMayorDeEdad) {\n\t\tconsole.log('No eres mayor de edad');\n\t}",
                "El operador `!` puede usarse para verificar si una condición es falsa:\n\tlet tieneLicencia = false;\n\tif (!tieneLicencia) {\n\t\tconsole.log('No tienes licencia');\n\t}"
            ]
        },
        {
            "tag": "condicionales_comparativas_if_js",
            "patterns": [
                "como comparar numeros dentro de un if en js",
                "como usar comparaciones numericas en un if en javascript",
                "dame ejemplos de comparaciones numericas en un if en js",
                "como evaluar condiciones numericas en un if en javascript"
            ],
            "responses": [
                "Puedes comparar números usando operadores como `>`, `<`, `===`, etc.:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
                "Comparación numérica en un `if`:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
                "Uso de `===` para comparar valores numéricos:\n\tlet valor = 100;\n\tif (valor === 100) {\n\t\tconsole.log('El valor es 100');\n\t}",
                "Comparar si un número es menor o igual a un valor:\n\tlet temperatura = 18;\n\tif (temperatura <= 20) {\n\t\tconsole.log('La temperatura es baja');\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_if_else_js",
            "patterns": [
                "como funciona un if else en js",
                "dame ejemplos de un if else en js",
                "como usar un if else en javascript",
                "dame un ejemplo de una estructura if else en js",
                "como se estructura un if else en js"
            ],
            "responses": [
                "La estructura básica de un `if-else` es:\n\tif (condicion) {\n\t\t// código si la condición es verdadera\n\t} else {\n\t\t// código si la condición es falsa\n\t}\nEjemplo:\n\tlet edad = 18;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else {\n\t\tconsole.log('Eres menor de edad');\n\t}",
                "Un ejemplo de uso de `if-else`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t} else {\n\t\tconsole.log('El número es 5 o menor');\n\t}",
                "Puedes utilizar `else` para manejar la parte falsa de la condición:\n\tlet temperatura = 20;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t} else {\n\t\tconsole.log('Hace fresco');\n\t}"
            ]
        },
        {
            "tag": "condicionales_complejas_if_else_js",
            "patterns": [
                "como poner condiciones complejas en un if else en js",
                "dame ejemplos de if else con condiciones multiples en js",
                "como usar operadores logicos en un if else en javascript",
                "como combinar condiciones con if else en js"
            ],
            "responses": [
                "Puedes combinar varias condiciones con operadores lógicos dentro del `if-else`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t} else {\n\t\tconsole.log('El número no está entre 5 y 15');\n\t}",
                "Ejemplo de `if-else` con condiciones lógicas:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t} else {\n\t\tconsole.log('Acceso denegado');\n\t}",
                "Si la primera condición es falsa, puedes comprobar otras condiciones:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}"
            ]
        },
        {
            "tag": "uso_else_if_js",
            "patterns": [
                "como usar un else if en js",
                "dame ejemplos de else if en javascript",
                "como funciona el else if en un if en js",
                "dame un ejemplo de uso de else if en un if en js"
            ],
            "responses": [
                "Puedes usar `else if` para comprobar condiciones adicionales si la primera es falsa:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}",
                "Ejemplo de `else if` para comparar más de una condición:\n\tlet numero = 5;\n\tif (numero > 10) {\n\t\tconsole.log('El número es mayor a 10');\n\t} else if (numero === 5) {\n\t\tconsole.log('El número es 5');\n\t} else {\n\t\tconsole.log('El número es menor a 5');\n\t}",
                "Usando `else if` para crear un bloque de condiciones más específico:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else if (edad >= 13) {\n\t\tconsole.log('Eres un adolescente');\n\t} else {\n\t\tconsole.log('Eres un niño');\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_while_js",
            "patterns": [
                "como se usa un ciclo while en js",
                "dame un ejemplo de un ciclo while en javascript",
                "como funciona el ciclo while en js",
                "como se estructura un ciclo while en javascript"
            ],
            "responses": [
                "La estructura básica de un ciclo `while` es la siguiente:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}\nEste ciclo continuará ejecutándose mientras que la condición sea verdadera.",
                "Ejemplo básico de un ciclo `while`:\n\tlet numero = 0;\n\twhile (numero < 5) {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Un ciclo `while` continuará hasta que la condición sea falsa:\n\tlet contador = 0;\n\twhile (contador < 3) {\n\t\tconsole.log('Contando:', contador);\n\t\tcontador++;\n\t}"
            ]
        },
        {
            "tag": "condiciones_en_while_js",
            "patterns": [
                "como poner una condicion dentro de un ciclo while en js",
                "dame ejemplos de condiciones dentro de un ciclo while en js",
                "como usar condicionales en un while en javascript",
                "como evaluar condiciones en un ciclo while en js"
            ],
            "responses": [
                "Puedes poner una condición dentro del `while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Condición dentro de un ciclo `while` para salir después de 5 iteraciones:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Puedes usar una condición lógica compleja dentro del `while`:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t}"
            ]
        },
        {
            "tag": "uso_break_en_while_js",
            "patterns": [
                "como usar break en un ciclo while en js",
                "dame un ejemplo de break en un ciclo while en javascript",
                "como detener un ciclo while con break en js",
                "como salir de un ciclo while en javascript"
            ],
            "responses": [
                "Puedes usar `break` para salir de un ciclo `while` cuando se cumpla una condición:\n\tlet i = 0;\n\twhile (i < 10) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero === 7) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Un ejemplo de cómo salir de un ciclo `while` con `break`:\n\tlet contador = 0;\n\twhile (contador < 10) {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t}"
            ]
        },
        {
            "tag": "uso_continue_en_while_js",
            "patterns": [
                "como usar continue en un ciclo while en js",
                "dame un ejemplo de continue en un ciclo while en javascript",
                "como saltar una iteracion con continue en while en js",
                "como funciona el continue en un ciclo while en javascript"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `while`:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\twhile (numero < 10) {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Si deseas omitir los números impares dentro de un ciclo `while`, puedes usar `continue`:\n\tlet i = 0;\n\twhile (i <= 10) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_do_while_js",
            "patterns": [
                "como se usa un ciclo do while en js",
                "dame un ejemplo de un ciclo do while en javascript",
                "como funciona el ciclo do while en js",
                "como se estructura un ciclo do while en javascript"
            ],
            "responses": [
                "La estructura básica de un ciclo `do-while` es la siguiente:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);\nEl ciclo ejecuta el código dentro del bloque `do` al menos una vez, y luego evalúa la condición del `while`.",
                "Ejemplo básico de un ciclo `do-while`:\n\tlet numero = 0;\n\tdo {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 3);",
                "Un ciclo `do-while` asegura que el bloque de código se ejecute al menos una vez, incluso si la condición es falsa desde el principio:\n\tlet contador = 0;\n\tdo {\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador > 3);"
            ]
        },
        {
            "tag": "condiciones_en_do_while_js",
            "patterns": [
                "como poner una condicion dentro de un ciclo do while en js",
                "dame ejemplos de condiciones dentro de un ciclo do while en js",
                "como usar condicionales en un do while en javascript",
                "como evaluar condiciones en un ciclo do while en js"
            ],
            "responses": [
                "Puedes poner una condición dentro del `do-while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Ejemplo de cómo poner una condición en un ciclo `do-while` para evaluar si el número es par:\n\tlet numero = 1;\n\tdo {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t} while (numero <= 10);",
                "Puedes usar una condición para salir del ciclo con `break` si se cumple alguna condición:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
            ]
        },
        {
            "tag": "uso_break_en_do_while_js",
            "patterns": [
                "como usar break en un ciclo do while en js",
                "dame un ejemplo de break en un ciclo do while en javascript",
                "como detener un ciclo do while con break en js",
                "como salir de un ciclo do while en javascript"
            ],
            "responses": [
                "Puedes usar `break` para salir de un ciclo `do-while` cuando se cumpla una condición:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero === 2) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
                "Un ejemplo de cómo salir de un ciclo `do-while` con `break`:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
            ]
        },
        {
            "tag": "uso_continue_en_do_while_js",
            "patterns": [
                "como usar continue en un ciclo do while en js",
                "dame un ejemplo de continue en un ciclo do while en javascript",
                "como saltar una iteracion con continue en do while en js",
                "como funciona el continue en un ciclo do while en javascript"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `do-while`:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
                "Si deseas omitir números impares dentro de un ciclo `do-while`, puedes usar `continue`:\n\tlet i = 0;\n\tdo {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i <= 10);"
            ]
        },
        {
            "tag": "estructura_basica_switch_js",
            "patterns": [
                "como usar un switch en js",
                "dame un ejemplo de switch en javascript",
                "como funciona el switch en js",
                "como se estructura un switch en javascript"
            ],
            "responses": [
                "La estructura básica de un `switch` es la siguiente:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Miércoles');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
                "Ejemplo básico de un `switch`:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "Un `switch` en javascript evalúa una expresión y compara su valor con las condiciones (`case`), si coincide ejecuta ese bloque de código:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "uso_break_en_switch_js",
            "patterns": [
                "como usar break en un switch en js",
                "dame un ejemplo de break en un switch en javascript",
                "como salir de un switch con break en js",
                "como terminar un caso en switch en javascript",
                "para que se usa el break en un switch en js"
            ],
            "responses": [
                "Dentro de un `switch`, el `break` se usa para salir de la estructura después de ejecutar un bloque de código para un `case`:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
                "Un `break` evita que el `switch` siga evaluando casos después de encontrar el primero que coincide:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "El `break` es fundamental en un `switch` para evitar la ejecución del siguiente `case` sin importar que la condición no coincida:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "uso_default_en_switch_js",
            "patterns": [
                "como usar default en un switch en js",
                "dame un ejemplo de default en un switch en javascript",
                "como manejar valores no esperados en switch con default en js",
                "como usar el caso default en switch en javascript"
            ],
            "responses": [
                "El `default` en un `switch` maneja cualquier valor que no coincida con ninguno de los `case`. Ejemplo:\n\tlet mes = 10;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "Usar `default` permite manejar cualquier caso no previsto. Ejemplo:\n\tlet numero = 7;\n\tswitch (numero) {\n\t\tcase 1:\n\t\t\tconsole.log('Uno');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Dos');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Número no reconocido');\n\t}",
                "El `default` es útil para manejar cualquier entrada inesperada que no coincida con un `case` específico:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "multiples_casos_en_switch_js",
            "patterns": [
                "como manejar multiples casos en un switch en js",
                "dame un ejemplo de switch con varios casos en javascript",
                "como agrupar varios casos en un switch en js",
                "como usar varios casos en un switch en javascript"
            ],
            "responses": [
                "Puedes manejar múltiples casos en un `switch` agrupándolos sin usar `break` entre ellos:\n\tlet fruta = 'manzana';\n\tswitch (fruta) {\n\t\tcase 'manzana':\n\t\tcase 'pera':\n\t\t\tconsole.log('Es una fruta');\n\t\t\tbreak;\n\t\tcase 'zanahoria':\n\t\t\tconsole.log('Es un vegetal');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('No se reconoció la entrada');\n\t}",
                "Agrupar varios casos es útil si deseas ejecutar el mismo código para varias opciones:\n\tlet numero = 3;\n\tswitch (numero) {\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\t\tconsole.log('Número 1, 2 o 3');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Otro número');\n\t}",
                "Ejemplo de cómo agrupar múltiples `case` para ejecutar la misma acción:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'verde':\n\t\tcase 'amarillo':\n\t\t\tconsole.log('Color cálido');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color frío');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
            ]
        },
        {
            "tag": "declaracion_basica_funcion_js",
            "patterns": [
                "como declarar una funcion en javascript",
                "dame un ejemplo de una funcion en js",
                "como crear una funcion en javascript",
                "cual es la sintaxis para declarar una funcion en js"
            ],
            "responses": [
                "La sintaxis básica para declarar una función en javascript es la siguiente:\n\tfunction saludo() {\n\t\tconsole.log('Hola, mundo');\n\t}",
                "Un ejemplo de una función básica en javascript:\n\tfunction calcularSuma(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
                "Para declarar una función en javascript, simplemente utiliza la palabra clave `function`:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola ' + nombre);\n\t}"
            ]
        },
        {
            "tag": "declaracion_funcion_con_parametros_js",
            "patterns": [
                "como declarar una funcion con parametros en js",
                "dame un ejemplo de una funcion con parametros en javascript",
                "como pasar parametros a una funcion en js",
                "como crear una funcion con parametros en javascript"
            ],
            "responses": [
                "Para declarar una función con parámetros en javascript, se colocan los parámetros entre paréntesis después del nombre de la función:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
                "Ejemplo de una función con parámetros:\n\tfunction multiplicar(a: number, b: number): number {\n\t\treturn a * b;\n\t}",
                "Los parámetros se definen entre paréntesis en la declaración de la función:\n\tfunction mostrarMensaje(mensaje: string): void {\n\t\tconsole.log(mensaje);\n\t}"
            ]
        },
        {
            "tag": "funciones_con_tipado_de_retorno_js",
            "patterns": [
                "como declarar una funcion con tipo de retorno en js",
                "dame un ejemplo de funcion con tipo de retorno en javascript",
                "como especificar el tipo de retorno de una funcion en js",
                "como devolver un valor de una funcion en javascript"
            ],
            "responses": [
                "Para especificar el tipo de retorno de una función en javascript, se coloca el tipo después de los paréntesis:\n\tfunction sumar(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
                "Ejemplo de función con tipo de retorno:\n\tfunction obtenerNombre(): string {\n\t\treturn 'Juan';\n\t}",
                "En javascript, puedes especificar el tipo de retorno de la siguiente manera:\n\tfunction esPositivo(numero: number): boolean {\n\t\treturn numero > 0;\n\t}"
            ]
        },
        {
            "tag": "funciones_con_valores_por_defecto_js",
            "patterns": [
                "como declarar una funcion con valores por defecto en js",
                "dame un ejemplo de funcion con parametros por defecto en javascript",
                "como poner valores por defecto en una funcion en js",
                "como asignar un valor por defecto a un parametro en javascript"
            ],
            "responses": [
                "Puedes asignar valores por defecto a los parámetros de la siguiente manera:\n\tfunction saludar(nombre: string = 'Juan'): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
                "Ejemplo de función con valores por defecto:\n\tfunction calcularPrecio(precio: number, descuento: number = 0): number {\n\t\treturn precio - (precio * descuento);\n\t}",
                "Si un parámetro no se pasa, se utilizará el valor por defecto asignado:\n\tfunction mostrarDetalles(producto: string = 'Producto A'): void {\n\t\tconsole.log('Detalles del ' + producto);\n\t}"
            ]
        },
        {
            "tag": "funciones_anonimas_js",
            "patterns": [
                "como declarar una funcion anonima en js",
                "dame un ejemplo de una funcion anonima en javascript",
                "como usar funciones anonimas en js",
                "que es una funcion anonima en javascript"
            ],
            "responses": [
                "Una función anónima en javascript se declara sin nombre:\n\tlet suma = function(a: number, b: number): number {\n\t\treturn a + b;\n\t};",
                "Ejemplo de función anónima asignada a una variable:\n\tlet saludo = function(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
                "Una función anónima es útil cuando necesitas pasar una función como argumento o asignarla a una variable:\n\tlet multiplicar = function(a: number, b: number): number {\n\t\treturn a * b;\n\t};"
            ]
        },
        {
            "tag": "funciones_flecha_js",
            "patterns": [
                "como usar una funcion flecha en js",
                "dame un ejemplo de una funcion flecha en javascript",
                "como declarar una funcion flecha en js",
                "que son las funciones flecha en javascript"
            ],
            "responses": [
                "Las funciones flecha en javascript tienen una sintaxis más corta. Ejemplo:\n\tlet suma = (a: number, b: number): number => {\n\t\treturn a + b;\n\t};",
                "Un ejemplo de función flecha en javascript:\n\tlet saludo = (nombre: string): void => {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
                "Las funciones flecha son útiles cuando deseas una función más concisa:\n\tlet multiplicar = (a: number, b: number): number => a * b;"
            ]
        },
        {
            "tag": "funciones_recursivas_js",
            "patterns": [
                "como declarar una funcion recursiva en js",
                "dame un ejemplo de funcion recursiva en javascript",
                "como hacer que una funcion se llame a si misma en js",
                "como crear una funcion recursiva en javascript"
            ],
            "responses": [
                "Una función recursiva es aquella que se llama a sí misma. Ejemplo:\n\tfunction factorial(n: number): number {\n\t\tif (n === 0) return 1;\n\t\treturn n * factorial(n - 1);\n\t}",
                "Ejemplo de una función recursiva para calcular la suma de los números del 1 al `n`:\n\tfunction sumaRecursiva(n: number): number {\n\t\tif (n === 1) return 1;\n\t\treturn n + sumaRecursiva(n - 1);\n\t}",
                "Una función recursiva puede ser útil para resolver problemas complejos que se pueden dividir en subproblemas más simples:\n\tfunction fibonacci(n: number): number {\n\t\tif (n <= 1) return n;\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2);\n\t}"
            ]
        },
        {
            "tag": "declaracion_objeto_js",
            "patterns": [
                "como declarar un objeto en javascript",
                "dame un ejemplo de objeto en js",
                "como crear un objeto en javascript",
                "cual es la sintaxis para declarar un objeto en js"
            ],
            "responses": [
                "En javascript, puedes declarar un objeto de la siguiente manera:\n\tlet persona = { nombre: 'Juan', edad: 25 };",
                "Ejemplo básico de un objeto:\n\tlet libro = { titulo: 'javascript para principiantes', autor: 'Juan Pérez', anio: 2021 };",
                "La sintaxis para declarar un objeto es la siguiente:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };"
            ]
        },
        {
            "tag": "tipado_objeto_js",
            "patterns": [
                "como tipar un objeto en javascript",
                "dame un ejemplo de un objeto tipado en js",
                "como usar tipos en un objeto en javascript",
                "como declarar un objeto con tipos en js"
            ],
            "responses": [
                "Para tipar un objeto en javascript, puedes usar una interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
                "Puedes tipar un objeto de la siguiente manera:\n\tlet coche: { marca: string; modelo: string; anio: number } = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };",
                "Un ejemplo de tipado usando interfaces:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet miLibro: Libro = { titulo: 'javascript para todos', autor: 'Pedro' };"
            ]
        },
        {
            "tag": "propiedades_opcionales_objeto_js",
            "patterns": [
                "como declarar propiedades opcionales en un objeto en js",
                "dame un ejemplo de un objeto con propiedades opcionales en javascript",
                "como hacer que una propiedad de un objeto sea opcional en js",
                "como declarar una propiedad opcional en un objeto en javascript"
            ],
            "responses": [
                "Puedes declarar propiedades opcionales usando `?` en la interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan' };",
                "Ejemplo de propiedad opcional:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tanio?: number;\n\t}\n\tlet coche: Coche = { marca: 'Toyota', modelo: 'Corolla' };",
                "Al declarar un objeto con propiedades opcionales:\n\tinterface Usuario {\n\t\tnombre: string;\n\t\tedad?: number;\n\t\temail?: string;\n\t}\n\tlet usuario: Usuario = { nombre: 'Ana' };"
            ]
        },
        {
            "tag": "metodos_objeto_js",
            "patterns": [
                "como agregar metodos a un objeto en javascript",
                "dame un ejemplo de un objeto con metodos en js",
                "como declarar un metodo dentro de un objeto en js",
                "como hacer que un objeto tenga metodos en javascript"
            ],
            "responses": [
                "Puedes agregar métodos dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "acceso_propiedades_objeto_js",
            "patterns": [
                "como acceder a una propiedad de un objeto en javascript",
                "dame un ejemplo de acceso a propiedades de un objeto en js",
                "como obtener el valor de una propiedad de un objeto en javascript",
                "como leer propiedades de un objeto en js"
            ],
            "responses": [
                "Puedes acceder a las propiedades de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tconsole.log(persona.nombre);",
                "Ejemplo de acceso a propiedades:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tconsole.log(coche.marca);",
                "También puedes usar la notación de corchetes para acceder a las propiedades:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tconsole.log(libro['titulo']);"
            ]
        },
        {
            "tag": "modificacion_propiedades_objeto_js",
            "patterns": [
                "como modificar una propiedad de un objeto en javascript",
                "dame un ejemplo de modificar propiedades en un objeto en js",
                "como cambiar el valor de una propiedad de un objeto en javascript",
                "como actualizar propiedades de un objeto en js"
            ],
            "responses": [
                "Puedes modificar una propiedad de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tpersona.edad = 30;",
                "Ejemplo de modificación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tcoche.modelo = 'Camry';",
                "Para cambiar el valor de una propiedad puedes hacer:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tlibro.titulo = 'javascript avanzado';"
            ]
        },
        {
            "tag": "eliminar_propiedad_objeto_js",
            "patterns": [
                "como eliminar una propiedad de un objeto en javascript",
                "dame un ejemplo de eliminar una propiedad en un objeto en js",
                "como borrar una propiedad de un objeto en javascript",
                "como quitar una propiedad de un objeto en js"
            ],
            "responses": [
                "Puedes eliminar una propiedad de un objeto utilizando el operador `delete`:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tdelete persona.edad;",
                "Ejemplo de eliminación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tdelete coche.modelo;",
                "Usa el operador `delete` para eliminar propiedades:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tdelete libro.autor;"
            ]
        },
        {
            "tag": "propiedades_solo_lectura_objeto_js",
            "patterns": [
                "como declarar propiedades de solo lectura en un objeto en javascript",
                "dame un ejemplo de un objeto con propiedades readonly en js",
                "como hacer que una propiedad sea de solo lectura en javascript",
                "como declarar un objeto con propiedades readonly en js"
            ],
            "responses": [
                "Puedes declarar propiedades de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
                "Ejemplo de objeto con propiedades de solo lectura:\n\tlet coche: { readonly marca: string; modelo: string } = { marca: 'Toyota', modelo: 'Corolla' };",
                "La palabra clave `readonly` asegura que una propiedad no pueda ser modificada:\n\tlet libro: { readonly titulo: string; autor: string } = { titulo: 'javascript', autor: 'Juan' };"
            ]
        },
        {
            "tag": "declaracion_metodos_objeto_js",
            "patterns": [
                "como declarar un metodo dentro de un objeto en javascript",
                "dame un ejemplo de un objeto con metodo en javascript",
                "como agregar un metodo a un objeto en js",
                "como hacer que un objeto tenga un metodo en javascript"
            ],
            "responses": [
                "Puedes declarar un método dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_flecha_objeto_js",
            "patterns": [
                "como declarar un metodo de flecha en un objeto en javascript",
                "dame un ejemplo de metodo de flecha en un objeto en javascript",
                "como usar metodos de flecha en objetos en javascript",
                "como hacer que un objeto tenga un metodo de flecha en js"
            ],
            "responses": [
                "Puedes usar una función flecha como método de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: () => {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de método de flecha:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: () => {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Los métodos de flecha no tienen su propio `this`, por lo que se puede usar en situaciones como esta:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: () => {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_parametros_objeto_js",
            "patterns": [
                "como declarar un metodo con parametros en un objeto en javascript",
                "dame un ejemplo de metodo con parametros en un objeto en javascript",
                "como pasar parametros a un metodo dentro de un objeto en javascript",
                "como hacer que un metodo reciba parametros en un objeto en js"
            ],
            "responses": [
                "Puedes agregar parámetros a un método en un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tcambiarNombre: function(nuevoNombre) {\n\t\t\tthis.nombre = nuevoNombre;\n\t\t}\n\t};",
                "Ejemplo de un método con parámetros:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tcambiarModelo: function(nuevoModelo) {\n\t\t\tthis.modelo = nuevoModelo;\n\t\t}\n\t};",
                "Puedes definir un método con parámetros de esta forma:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\tactualizarTitulo: function(nuevoTitulo) {\n\t\t\tthis.titulo = nuevoTitulo;\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_solo_lectura_objeto_js",
            "patterns": [
                "como declarar un metodo de solo lectura en un objeto en javascript",
                "dame un ejemplo de metodo solo lectura en un objeto en javascript",
                "como hacer que un metodo sea de solo lectura en un objeto en javascript",
                "como declarar un metodo readonly en un objeto en js"
            ],
            "responses": [
                "Para hacer que un método sea de solo lectura puedes utilizar `readonly` en el método:\n\tlet persona = {\n\t\treadonly nombre: string;\n\t\tedad: number,\n\t\tgetNombre: function() {\n\t\t\treturn this.nombre;\n\t\t}\n\t};",
                "Ejemplo de método de solo lectura:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tgetMarca: function() {\n\t\t\treturn this.marca;\n\t\t}\n\t};",
                "Puedes declarar un método de solo lectura así:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tgetTitulo: function() {\n\t\t\treturn this.titulo;\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_asincronos_objeto_js",
            "patterns": [
                "como declarar un metodo asincrono en un objeto en javascript",
                "dame un ejemplo de metodo asincrono en un objeto en javascript",
                "como usar async y await en un metodo dentro de un objeto en javascript",
                "como hacer un metodo asincrono dentro de un objeto en js"
            ],
            "responses": [
                "Puedes declarar un método asíncrono en un objeto utilizando `async` y `await`:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tasync obtenerNombre() {\n\t\t\tlet resultado = await fetch('url');\n\t\t\treturn resultado.json();\n\t\t}\n\t};",
                "Ejemplo de un método asincrono:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tasync obtenerModelo() {\n\t\t\tlet respuesta = await fetch('url');\n\t\t\treturn respuesta.json();\n\t\t}\n\t};",
                "Puedes utilizar `async` y `await` para manejar tareas asincrónicas en un método:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tasync obtenerDetalles() {\n\t\t\tlet detalles = await fetch('url');\n\t\t\treturn detalles.json();\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_staticos_objeto_js",
            "patterns": [
                "como declarar un metodo estatico en un objeto en javascript",
                "dame un ejemplo de metodo estatico en un objeto en javascript",
                "como usar metodos staticos en objetos en javascript",
                "como declarar un metodo estatico en js"
            ],
            "responses": [
                "Puedes declarar un método estático utilizando `static`:\n\tclass Persona {\n\t\tstatic saludar() {\n\t\t\tconsole.log('Hola');\n\t\t}\n\t}\n\tPersona.saludar();",
                "Ejemplo de un método estático:\n\tclass Coche {\n\t\tstatic mostrarInfo() {\n\t\t\tconsole.log('Información del coche');\n\t\t}\n\t}\n\tCoche.mostrarInfo();",
                "Métodos estáticos se pueden declarar en una clase como este ejemplo:\n\tclass Libro {\n\t\tstatic mostrarTitulo() {\n\t\t\tconsole.log('Título del libro');\n\t\t}\n\t}\n\tLibro.mostrarTitulo();"
            ]
        },
        {
            "tag": "metodos_this_objeto_js",
            "patterns": [
                "como usar this dentro de un metodo en js",
                "dame un ejemplo de un metodo con this en un objeto en javascript",
                "como hacer que un metodo acceda a propiedades usando this en javascript",
                "como funciona this dentro de un metodo en javascript"
            ],
            "responses": [
                "Dentro de un método, `this` hace referencia al objeto actual:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tmostrarEdad: function() {\n\t\t\tconsole.log(this.edad);\n\t\t}\n\t};",
                "Ejemplo de uso de `this`:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarMarca: function() {\n\t\t\tconsole.log(this.marca);\n\t\t}\n\t};",
                "Cuando usas `this`, accedes a las propiedades del objeto al que pertenece el método:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tmostrarTitulo: function() {\n\t\t\tconsole.log(this.titulo);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "declaracion_basica_interface_js",
            "patterns": [
                "como declarar una interface en javascript",
                "dame un ejemplo de como declarar una interface en js",
                "como se declara una interface en javascript",
                "ensename un ejemplo de una interface en javascript"
            ],
            "responses": [
                "Puedes declarar una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
                "Ejemplo básico de una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Una interface se declara así:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "extension_interfaces_js",
            "patterns": [
                "como extender una interface en javascript",
                "dame un ejemplo de extension de interface en javascript",
                "como hacer que una interface herede otra en js",
                "puedes extender una interface en javascript"
            ],
            "responses": [
                "Puedes extender una interface utilizando `extends`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tinterface Empleado extends Persona {\n\t\tpuesto: string;\n\t}\n\tlet empleado: Empleado = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tpuesto: 'Desarrollador'\n\t};",
                "Ejemplo de extensión de interfaces:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tinterface Deportivo extends Coche {\n\t\tvelocidadMaxima: number;\n\t}\n\tlet cocheDeportivo: Deportivo = {\n\t\tmarca: 'Ferrari',\n\t\tmodelo: 'F8',\n\t\tvelocidadMaxima: 340\n\t};",
                "Una interface puede extender a otra para agregar más propiedades:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tinterface Ebook extends Libro {\n\t\ttamanoMB: number;\n\t}\n\tlet ebook: Ebook = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\ttamanoMB: 10\n\t};"
            ]
        },
        {
            "tag": "interfaces_metodos_js",
            "patterns": [
                "como declarar un metodo en una interface en javascript",
                "dame un ejemplo de una interface con metodo en javascript",
                "como agregar metodos a una interface en js",
                "se pueden declarar metodos en una interface en javascript"
            ],
            "responses": [
                "Puedes declarar métodos dentro de una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t\tsaludar(): void;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de una interface con método:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tmostrarInfo(): void;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar una interface con un método como este:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\timprimirInfo(): void;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "interfaces_propiedades_opcionales_js",
            "patterns": [
                "como declarar propiedades opcionales en una interface en javascript",
                "dame un ejemplo de propiedades opcionales en una interface en javascript",
                "como hacer que una propiedad sea opcional en una interface en js",
                "se pueden hacer propiedades opcionales en una interface en javascript"
            ],
            "responses": [
                "Puedes hacer que una propiedad sea opcional usando el signo `?`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan'\n\t};",
                "Ejemplo de propiedad opcional en una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tcolor?: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Para declarar propiedades opcionales puedes usar `?`:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\tfechaPublicacion?: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "interfaces_propiedades_readonly_js",
            "patterns": [
                "como declarar propiedades de solo lectura en una interface en javascript",
                "dame un ejemplo de propiedad readonly en una interface en javascript",
                "como hacer que una propiedad sea readonly en una interface en js",
                "se pueden hacer propiedades readonly en una interface en javascript"
            ],
            "responses": [
                "Puedes hacer que una propiedad sea de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
                "Ejemplo de propiedad de solo lectura:\n\tinterface Coche {\n\t\treadonly marca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Para declarar propiedades de solo lectura puedes usar `readonly`:\n\tinterface Libro {\n\t\treadonly titulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "interfaces_indices_js",
            "patterns": [
                "como declarar indices en una interface en javascript",
                "dame un ejemplo de propiedad con indice en una interface en javascript",
                "como usar indices para propiedades en una interface en js",
                "se pueden declarar propiedades con indice en una interface en javascript"
            ],
            "responses": [
                "Puedes declarar índices utilizando la siguiente sintaxis:\n\tinterface Persona {\n\t\t[nombre: string]: number;\n\t}\n\tlet edades: Persona = {\n\t\t'Juan': 25,\n\t\t'Ana': 30\n\t};",
                "Ejemplo con índice en una interface:\n\tinterface Coche {\n\t\t[modelo: string]: number;\n\t}\n\tlet precios: Coche = {\n\t\t'Corolla': 25000,\n\t\t'Camry': 35000\n\t};",
                "Para usar índices en una interface puedes hacer lo siguiente:\n\tinterface Libro {\n\t\t[autor: string]: string;\n\t}\n\tlet autoresLibros: Libro = {\n\t\t'Juan': 'javascript',\n\t\t'Pedro': 'javascript'\n\t};"
            ]
        },
        {
            "tag": "interfaces_funciones_js",
            "patterns": [
                "como usar una interface en una funcion en javascript",
                "dame un ejemplo de funcion con interface en javascript",
                "como aplicar una interface a una funcion en js",
                "se pueden utilizar interfaces con funciones en javascript"
            ],
            "responses": [
                "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
                "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
                "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'javascript', autor: 'Juan'});"
            ]
        },
        {
            "tag": "interfaces_funciones_js",
            "patterns": [
                "como usar una interface en una funcion en javascript",
                "dame un ejemplo de funcion con interface en javascript",
                "como aplicar una interface a una funcion en js",
                "se pueden utilizar interfaces con funciones en javascript"
            ],
            "responses": [
                "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
                "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
                "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'javascript', autor: 'Juan'});"
            ]
        },
        {
            "tag": "declaracion_basica_enum_js",
            "patterns": [
                "como declarar un enum en js",
                "dame un ejemplo de un enum en javascript",
                "como se declara un enum en javascript",
                "ensename un ejemplo de un enum en javascript"
            ],
            "responses": [
                "Puedes declarar un enum de esta manera:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo básico de un enum:\n\tenum Estado {\n\t\tActivo,\n\t\tInactivo,\n\t\tPendiente\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum en javascript se declara así:\n\tenum Color {\n\t\tRojo,\n\t\tVerde,\n\t\tAzul\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "enum_valores_especificos_js",
            "patterns": [
                "como asignar valores a un enum en javascript",
                "dame un ejemplo de enum con valores especificos en javascript",
                "como asignar un valor a cada elemento en un enum en js",
                "puedes asignar valores a un enum en javascript"
            ],
            "responses": [
                "Puedes asignar valores a los elementos de un enum de esta manera:\n\tenum Direccion {\n\t\tArriba = 1,\n\t\tAbajo = 2,\n\t\tIzquierda = 3,\n\t\tDerecha = 4\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo de enum con valores específicos:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum con valores específicos se declara así:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "enum_cadenas_texto_js",
            "patterns": [
                "como declarar un enum con cadenas de texto en javascript",
                "dame un ejemplo de enum con cadenas en javascript",
                "como asignar cadenas de texto en un enum en js",
                "puedes usar cadenas de texto en un enum en javascript"
            ],
            "responses": [
                "Puedes usar cadenas de texto en un enum así:\n\tenum Direccion {\n\t\tArriba = 'ARRIBA',\n\t\tAbajo = 'ABAJO',\n\t\tIzquierda = 'IZQUIERDA',\n\t\tDerecha = 'DERECHA'\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo de enum con cadenas de texto:\n\tenum Estado {\n\t\tActivo = 'activo',\n\t\tInactivo = 'inactivo',\n\t\tPendiente = 'pendiente'\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum con cadenas de texto se declara de esta manera:\n\tenum Color {\n\t\tRojo = 'rojo',\n\t\tVerde = 'verde',\n\t\tAzul = 'azul'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "acceso_valores_enum_js",
            "patterns": [
                "como acceder a un valor de un enum en javascript",
                "dame un ejemplo de acceso a valores de un enum en javascript",
                "como obtener el valor de un enum en js",
                "puedes acceder a los valores de un enum en javascript"
            ],
            "responses": [
                "Puedes acceder a un valor de un enum así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tconsole.log(miDireccion); // 0",
                "Ejemplo de acceso a un valor de un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tconsole.log(estadoUsuario); // 1",
                "Para acceder a un valor de un enum, puedes hacer lo siguiente:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;\n\tconsole.log(colorFavorito); // '#00FF00'"
            ]
        },
        {
            "tag": "iteracion_enum_js",
            "patterns": [
                "como iterar sobre los valores de un enum en javascript",
                "dame un ejemplo de iteracion de un enum en javascript",
                "como recorrer un enum en js",
                "puedes iterar sobre los valores de un enum en javascript"
            ],
            "responses": [
                "Puedes iterar sobre los valores de un enum utilizando `for...in`:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tfor (let direccion in Direccion) {\n\t\tconsole.log(direccion);\n\t}",
                "Ejemplo de iteración sobre un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tfor (let estado in Estado) {\n\t\tconsole.log(estado);\n\t}",
                "Puedes recorrer los valores de un enum de esta manera:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tfor (let color in Color) {\n\t\tconsole.log(color);\n\t}"
            ]
        },
        {
            "tag": "enum_switch_js",
            "patterns": [
                "como usar un enum en un switch en javascript",
                "dame un ejemplo de uso de enum en un switch en javascript",
                "como aplicar un enum en un switch en js",
                "puedes usar enums en un switch en javascript"
            ],
            "responses": [
                "Puedes usar un enum en un switch así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tswitch (miDireccion) {\n\t\tcase Direccion.Arriba:\n\t\t\tconsole.log('Vas hacia arriba');\n\t\t\tbreak;\n\t\tcase Direccion.Abajo:\n\t\t\tconsole.log('Vas hacia abajo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Dirección desconocida');\n\t}",
                "Ejemplo de uso de enum en un switch:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tswitch (estadoUsuario) {\n\t\tcase Estado.Activo:\n\t\t\tconsole.log('El usuario está activo');\n\t\t\tbreak;\n\t\tcase Estado.Inactivo:\n\t\t\tconsole.log('El usuario está inactivo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Estado desconocido');\n\t}",
                "Un ejemplo con enum en un switch sería:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Rojo;\n\tswitch (colorFavorito) {\n\t\tcase Color.Rojo:\n\t\t\tconsole.log('Color favorito es rojo');\n\t\t\tbreak;\n\t\tcase Color.Verde:\n\t\t\tconsole.log('Color favorito es verde');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
            ]
        },
        {
            "tag": "busqueda_secuencial_paso_a_paso",
            "patterns": [
                "explicame paso a paso la busqueda secuencial en javascript",
                "como funciona la busqueda secuencial paso a paso en js",
                "puedes darme un ejemplo paso a paso de busqueda secuencial",
                "como es el flujo de busqueda secuencial en javascript",
                "quiero entender la busqueda secuencial paso a paso"
            ],
            "responses": [
                "Aquí tienes el algoritmo de búsqueda secuencial explicado paso a paso:\n\n1. **Definimos la función**:\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n\nEsta función recibe un arreglo y el valor que queremos buscar.\n\n2. **Recorremos el arreglo usando un bucle**:\n\nfor (let i = 0; i < arreglo.length; i++) {\n\nIteramos sobre cada elemento del arreglo, usando el índice `i` para acceder a los valores.\n\n3. **Verificamos si el valor actual es el buscado**:\n\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n\nComparamos el valor actual con el valor buscado. Si coinciden, devolvemos el índice.\n\n4. **Devolvemos -1 si no encontramos el valor**:\n\nreturn -1; // Si no se encuentra el valor\n\nEsto indica que el valor no está en el arreglo.\n\n5. **Ejemplo completo**:\n\nconst numeros = [4, 2, 7, 9, 5];\nconst resultado = busquedaSecuencial(numeros, 7);\nconsole.log(resultado); // Salida: 2\n"
            ]
        },
        {
            "tag": "ciclo_for_busqueda_secuencial",
            "patterns": [
                "como se implementa el ciclo for en la busqueda secuencial en js",
                "puedes darme solo el ciclo for del algoritmo de busqueda secuencial en js",
                "como recorre el arreglo la busqueda secuencial en js",
                "quiero ver el bucle de la busqueda secuencial en js",
                "dame la parte del ciclo for de la busqueda secuencial en js"
            ],
            "responses": [
                "El ciclo for en la búsqueda secuencial recorre el arreglo elemento por elemento:\n\n\nfor (let i = 0; i < arreglo.length; i++) {\n    // Aquí se evalúan los elementos uno por uno\n}\n"
            ]
        },
        {
            "tag": "condicional_if_busqueda_secuencial",
            "patterns": [
                "como funciona el condicional if en la busqueda secuencial en js",
                "puedes darme el condicional if del algoritmo de busqueda secuencial en js",
                "como verifica si el valor es el buscado en la busqueda secuencial en js",
                "quiero ver la condicion if de la busqueda secuencial en js",
                "dame la parte del if en la busqueda secuencial en js"
            ],
            "responses": [
                "El condicional if verifica si el valor actual es el buscado:\n\n\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_secuencial",
            "patterns": [
                "que pasa si no se encuentra el valor en la busqueda secuencial en js",
                "puedes darme la parte donde no encuentra el valor en js",
                "como retorna -1 en la busqueda secuencial en js",
                "quiero ver la devolucion de -1 en el algoritmo de busqueda secuencial en js",
                "dame la parte donde no encuentra el valor en la busqueda secuencial en js"
            ],
            "responses": [
                "Si el valor no se encuentra, el algoritmo devuelve -1:\n\n\nreturn -1; // Si no se encuentra el valor\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_secuencial",
            "patterns": [
                "como se define la funcion en la busqueda secuencial en js",
                "puedes darme solo la parte donde se define la funcion en js",
                "como empieza la busqueda secuencial en js",
                "quiero ver la cabecera de la funcion de busqueda secuencial en js",
                "dame la parte donde se define la funcion en busqueda secuencial en js"
            ],
            "responses": [
                "La función de búsqueda secuencial se define así:\n\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "argumentos_busqueda_secuencial",
            "patterns": [
                "que argumentos recibe la busqueda secuencial en js",
                "puedes explicarme los parametros de la busqueda secuencial en js",
                "como funcionan los argumentos en el algoritmo de busqueda secuencial en js",
                "que parametros necesita la funcion de busqueda secuencial en js",
                "dame los argumentos de la busqueda secuencial en js"
            ],
            "responses": [
                "La función de búsqueda secuencial recibe dos argumentos:\n\n1. **arreglo**: Es el arreglo que será recorrido.\n2. **valorBuscado**: Es el valor que queremos encontrar.\n\nEjemplo:\n\nbusquedaSecuencial([4, 2, 7, 9], 7);\n"
            ]
        },
        {
            "tag": "indice_encontrado_busqueda_secuencial",
            "patterns": [
                "como devuelve el indice encontrado en busqueda secuencial en js",
                "puedes darme la parte donde retorna el indice en la busqueda secuencial en js",
                "que hace cuando encuentra el valor buscado en la busqueda secuencial en js",
                "quiero ver como devuelve el indice encontrado en busqueda secuencial en js",
                "dame la parte donde retorna el indice en busqueda secuencial en js"
            ],
            "responses": [
                "Cuando el valor buscado es encontrado, la función devuelve el índice:\n\n\nreturn i; // Devuelve el índice donde se encontró el valor\n"
            ]
        },
        {
            "tag": "uso_practico_busqueda_secuencial",
            "patterns": [
                "como uso la busqueda secuencial en un caso practico en js",
                "puedes darme un ejemplo practico de busqueda secuencial en js",
                "que necesito para probar la busqueda secuencial en js",
                "quiero ver como se usa la busqueda secuencial en un programa en js",
                "dame un ejemplo de uso de busqueda secuencial en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo práctico del uso de la búsqueda secuencial:\n\n\nconst numeros = [1, 3, 5, 7, 9];\nconst valorBuscado = 7;\nconst resultado = busquedaSecuencial(numeros, valorBuscado);\n\nif (resultado !== -1) {\n    console.log(`Valor encontrado en el índice ${resultado}`);\n} else {\n    console.log('Valor no encontrado');\n}\n\nEsto muestra si el valor fue encontrado y su índice, o indica que no está presente."
            ]
        },
        {
            "tag": "complejidad_busqueda_secuencial",
            "patterns": [
                "cual es la complejidad de la busqueda secuencial",
                "puedes explicarme la eficiencia de la busqueda secuencial",
                "que tan eficiente es el algoritmo de busqueda secuencial",
                "quiero saber la complejidad de busqueda secuencial",
                "dame la complejidad temporal de la busqueda secuencial"
            ],
            "responses": [
                "La complejidad de la búsqueda secuencial es:\n\n- **Mejor caso**: O(1), cuando el valor buscado está en el primer elemento.\n- **Peor caso**: O(n), cuando el valor está al final o no está en el arreglo.\n- **Caso promedio**: O(n/2), que se simplifica a O(n).\n\nEsto la hace poco eficiente para arreglos grandes si el valor buscado no está cerca del inicio."
            ]
        },
        {
            "tag": "busqueda_binaria_js",
            "patterns": [
                "como funciona la busqueda binaria en javascript",
                "que es la busqueda binaria en js",
                "puedes explicarme el algoritmo de busqueda binaria en javascript",
                "dame el codigo del algoritmo de busqueda binaria en js",
                "como implemento la busqueda binaria en javascript"
            ],
            "responses": [
                "La búsqueda binaria es un algoritmo eficiente para encontrar un elemento en un arreglo ordenado. Se divide el rango de búsqueda a la mitad en cada paso. Aquí tienes el código básico en javascript:\n\n\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    let inicio = 0;\n    let fin = arreglo.length - 1;\n\n    while (inicio <= fin) {\n        let medio = Math.floor((inicio + fin) / 2);\n\n        if (arreglo[medio] === valorBuscado) {\n            return medio; // Devuelve el índice si encuentra el valor\n        } else if (arreglo[medio] < valorBuscado) {\n            inicio = medio + 1; // Ajusta el inicio\n        } else {\n            fin = medio - 1; // Ajusta el final\n        }\n    }\n\n    return -1; // Retorna -1 si el valor no está presente\n}\n\n// Ejemplo de uso\nconst numeros = [1, 3, 5, 7, 9];\nconst resultado = busquedaBinaria(numeros, 7);\nconsole.log(resultado); // Salida: 3\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_binaria_js",
            "patterns": [
                "como se define la funcion en la busqueda binaria en javascript",
                "puedes darme solo la parte donde se define la funcion en busqueda binaria",
                "como empieza la busqueda binaria en js",
                "quiero ver la cabecera de la funcion de busqueda binaria en javascript",
                "dame la parte donde se define la funcion en la busqueda binaria en js"
            ],
            "responses": [
                "La función de búsqueda binaria en javascript se define así:\n\n\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "inicializacion_variables_busqueda_binaria_js",
            "patterns": [
                "como se inicializan las variables en la busqueda binaria en javascript",
                "puedes darme la parte donde se inicializan las variables en busqueda binaria",
                "como se establecen las variables inicio, fin y medio en busqueda binaria",
                "quiero ver la inicializacion de variables en busqueda binaria en js",
                "dame la parte donde se inicializan las variables en la busqueda binaria en js"
            ],
            "responses": [
                "En la búsqueda binaria, las variables se inicializan de la siguiente manera:\n\n\nlet inicio = 0;\nlet fin = arreglo.length - 1;\nlet medio = Math.floor((inicio + fin) / 2);\n"
            ]
        },
        {
            "tag": "condicion_bucle_busqueda_binaria_js",
            "patterns": [
                "como se implementa el bucle while en la busqueda binaria en javascript",
                "puedes darme solo la parte del bucle while en busqueda binaria",
                "como funciona el ciclo while en busqueda binaria en js",
                "quiero ver el bucle while de la busqueda binaria en javascript",
                "dame la condicion del bucle en la busqueda binaria en js"
            ],
            "responses": [
                "El bucle while controla la búsqueda dividiendo el rango a la mitad:\n\n\nwhile (inicio <= fin) {\n    // Aquí va el código para evaluar y ajustar los límites\n}\n"
            ]
        },
        {
            "tag": "condicional_valor_busqueda_binaria_js",
            "patterns": [
                "como funciona el if en la busqueda binaria en javascript",
                "puedes darme solo la parte del if en busqueda binaria",
                "como compara el valor buscado en busqueda binaria en js",
                "quiero ver la condicion if de la busqueda binaria en javascript",
                "dame la parte del if en la busqueda binaria en js"
            ],
            "responses": [
                "El condicional `if` verifica si el valor buscado es igual al valor en el índice medio:\n\n\nif (arreglo[medio] === valorBuscado) {\n    return medio; // Devuelve el índice si encuentra el valor\n}\n"
            ]
        },
        {
            "tag": "ajuste_limites_busqueda_binaria_js",
            "patterns": [
                "como se ajustan los limites en la busqueda binaria en javascript",
                "puedes darme la parte donde se ajustan inicio y fin en busqueda binaria",
                "como se modifican los limites en busqueda binaria en js",
                "quiero ver el ajuste de inicio y fin en busqueda binaria en javascript",
                "dame la parte donde se ajustan los limites en la busqueda binaria en js"
            ],
            "responses": [
                "En la búsqueda binaria, los límites se ajustan dependiendo del valor comparado:\n\n\nif (arreglo[medio] < valorBuscado) {\n    inicio = medio + 1; // Ajusta el inicio\n} else {\n    fin = medio - 1; // Ajusta el final\n}\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_binaria_js",
            "patterns": [
                "que pasa si no se encuentra el valor en busqueda binaria en javascript",
                "puedes darme la parte donde no encuentra el valor en busqueda binaria",
                "como retorna -1 en la busqueda binaria en js",
                "quiero ver como indica que no encontro el valor en busqueda binaria en javascript",
                "dame la parte donde no encuentra el valor en la busqueda binaria en js"
            ],
            "responses": [
                "Si el valor no se encuentra, la función devuelve -1:\n\n\nreturn -1; // Retorna -1 si el valor no está presente\n"
            ]
        },
        {
            "tag": "complejidad_busqueda_binaria_js",
            "patterns": [
                "cual es la complejidad de la busqueda binaria en javascript",
                "puedes explicarme la eficiencia de la busqueda binaria en js",
                "que tan eficiente es el algoritmo de busqueda binaria en javascript",
                "quiero saber la complejidad de busqueda binaria en js",
                "dame la complejidad temporal de la busqueda binaria en javascript"
            ],
            "responses": [
                "La complejidad de la búsqueda binaria es:\n\n- **Mejor caso**: O(1), cuando el valor está en el medio.\n- **Peor caso**: O(log n), cuando el rango de búsqueda se divide hasta que queda un solo elemento.\n\nEsto la hace mucho más eficiente que la búsqueda secuencial para arreglos grandes."
            ]
        },
        {
            "tag": "ordenamiento_burbuja_js",
            "patterns": [
                "como funciona el ordenamiento por burbuja en javascript",
                "que es el algoritmo de burbuja en js",
                "puedes explicarme el algoritmo de ordenamiento burbuja en javascript",
                "dame el codigo del algoritmo de burbuja en js",
                "como implemento el algoritmo de burbuja en javascript",
                "dime el codigo del ordenamiento burbuja en js",
                "como ordenar un arreglo con burbuja en js",
                "quiero ver el codigo del ordenamiento burbuja en js",
                "como se ordena un arreglo con burbuja en js",
                "quiero entender el ordenamiento burbuja en js",
                "dame el codigo para un ordenamiento burbuja en js",
                "como se hace el ordenamiento burbuja en js",
                "puedes darme un ejemplo de ordenamiento burbuja en js",
                "como se implementa el ordenamiento burbuja en js"
            ],
            "responses": [
                "El ordenamiento por burbuja es un algoritmo que compara elementos adyacentes en un arreglo y los intercambia si están en el orden incorrecto. Esto se repite hasta que el arreglo esté completamente ordenado. Aquí tienes el código en javascript:\n\n\nfunction ordenamientoBurbuja(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Intercambio de elementos\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n// Ejemplo de uso\nconst numeros = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(ordenamientoBurbuja(numeros));\n// Salida: [11, 12, 22, 25, 34, 64, 90]\n"
            ]
        },
        {
            "tag": "definicion_funcion_ordenamiento_burbuja_js",
            "patterns": [
                "como se define la funcion en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte donde se define la funcion en el algoritmo de burbuja en javascript",
                "como empieza el ordenamiento burbuja en js",
                "quiero ver la cabecera de la funcion de ordenamiento burbuja en javascript",
                "dame la parte donde se define la funcion en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La función del ordenamiento burbuja en javascript se define así:\n\n\nfunction ordenamientoBurbuja(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "inicializacion_variable_n_ordenamiento_burbuja_js",
            "patterns": [
                "como se inicializa la variable n en el ordenamiento burbuja en javascript",
                "puedes darme la parte donde se inicializa n en el algoritmo de burbuja en javascript",
                "como se establece el tamano del arreglo en el algoritmo de burbuja en js",
                "quiero ver como se inicializa n en ordenamiento burbuja en javascript",
                "dame la parte donde se inicializa n en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La variable `n` se inicializa con la longitud del arreglo:\n\n\nlet n = arr.length;\n"
            ]
        },
        {
            "tag": "estructura_bucle_anidado_burbuja_js",
            "patterns": [
                "como funcionan los bucles en el ordenamiento burbuja en javascript",
                "puedes darme la parte del bucle en el algoritmo de burbuja en javascript",
                "como son los ciclos en el algoritmo de burbuja en js",
                "quiero ver el bucle anidado del ordenamiento burbuja en javascript",
                "dame la parte de los ciclos en el algoritmo de burbuja en js"
            ],
            "responses": [
                "El algoritmo utiliza un bucle anidado para recorrer el arreglo:\n\n\nfor (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        // Comparación e intercambio aquí\n    }\n}\n"
            ]
        },
        {
            "tag": "condicion_comparacion_burbuja_js",
            "patterns": [
                "como se comparan los elementos en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte donde se comparan los elementos en el algoritmo de burbuja en javascript",
                "como funciona la condicion del if en el algoritmo de burbuja en js",
                "quiero ver la comparacion entre elementos en el ordenamiento burbuja en javascript",
                "dame la parte del if en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La condición `if` verifica si el elemento actual es mayor que el siguiente:\n\n\nif (arr[j] > arr[j + 1]) {\n    // Intercambio de elementos\n}\n"
            ]
        },
        {
            "tag": "intercambio_elementos_burbuja_js",
            "patterns": [
                "como se intercambian los elementos en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte del intercambio en el algoritmo de burbuja en javascript",
                "como se hace el swap en el algoritmo de burbuja en js",
                "quiero ver como se intercambian los elementos en el ordenamiento burbuja en javascript",
                "dame la parte del intercambio en el algoritmo de burbuja en js"
            ],
            "responses": [
                "El intercambio de elementos se realiza con una variable temporal:\n\n\nlet temp = arr[j];\narr[j] = arr[j + 1];\narr[j + 1] = temp;\n"
            ]
        },
        {
            "tag": "complejidad_ordenamiento_burbuja_js",
            "patterns": [
                "cual es la complejidad del ordenamiento burbuja en javascript",
                "puedes explicarme la eficiencia del algoritmo de burbuja en js",
                "que tan eficiente es el algoritmo de burbuja en javascript",
                "quiero saber la complejidad del ordenamiento burbuja en js",
                "dame la complejidad temporal del algoritmo de burbuja en javascript"
            ],
            "responses": [
                "La complejidad del ordenamiento burbuja es:\n\n- **Mejor caso**: O(n), si el arreglo ya está ordenado (con optimización).\n- **Peor caso**: O(n²), cuando el arreglo está en orden inverso.\n- **Caso promedio**: O(n²), debido al doble bucle.\n\nEsto hace que el algoritmo no sea eficiente para grandes volúmenes de datos."
            ]
        }, 
        {
            "tag": "quick_sort_js",
            "patterns": [
                "como funciona el quick sort en javascript",
                "que es el algoritmo de quick sort en js",
                "puedes explicarme el algoritmo de quick sort en javascript",
                "dame el codigo del quick sort en js",
                "como implemento el quick sort en javascript"
            ],
            "responses": [
                "El Quick Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en subarreglos usando un elemento como pivote, colocando los elementos menores a la izquierda y los mayores a la derecha. Luego aplica recursividad para ordenar las partes. Aquí tienes el código completo en javascript:\n\n\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[arr.length - 1];\n    const left = [];\n    const right = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\n// Ejemplo de uso\nconst numeros = [34, 7, 23, 32, 5, 62];\nconsole.log(quickSort(numeros));\n// Salida: [5, 7, 23, 32, 34, 62]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_quick_sort_js",
            "patterns": [
                "como se define la funcion en el quick sort en javascript",
                "puedes darme solo la parte donde se define la funcion en el quick sort",
                "como empieza el quick sort en js",
                "quiero ver la cabecera de la funcion de quick sort en javascript",
                "dame la parte donde se define la funcion en el quick sort en js"
            ],
            "responses": [
                "La definición de la función Quick Sort en javascript es esta:\n\n\nfunction quickSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_quick_sort_js",
            "patterns": [
                "cual es la condicion base en el quick sort en javascript",
                "puedes darme la parte de la condicion base en el quick sort",
                "como termina la recursion en el quick sort en js",
                "quiero ver la condicion base del quick sort en javascript",
                "dame la parte donde se establece la condicion base en el quick sort en js"
            ],
            "responses": [
                "La condición base del Quick Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
        },
        {
            "tag": "particionamiento_quick_sort_js",
            "patterns": [
                "como se realiza el particionamiento en el quick sort en javascript",
                "puedes darme solo la parte del particionamiento en el quick sort",
                "como se dividen los elementos en el quick sort en js",
                "quiero ver como se particiona el arreglo en el quick sort en javascript",
                "dame la parte del particionamiento en el quick sort en js"
            ],
            "responses": [
                "El particionamiento del Quick Sort divide el arreglo en dos subarreglos con base en un pivote:\n\n\nconst pivot = arr[arr.length - 1];\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
        },
        {
            "tag": "combinacion_subarreglos_quick_sort_js",
            "patterns": [
                "como se combinan los subarreglos en el quick sort en javascript",
                "puedes darme solo la parte de la combinacion en el quick sort",
                "como se unen los elementos en el quick sort en js",
                "quiero ver como se combinan los subarreglos en el quick sort en javascript",
                "dame la parte de la combinacion en el quick sort en js"
            ],
            "responses": [
                "La combinación de los subarreglos con el pivote se realiza así:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
        },
        {
            "tag": "complejidad_quick_sort_js",
            "patterns": [
                "cual es la complejidad del quick sort en javascript",
                "puedes explicarme la eficiencia del quick sort en js",
                "que tan eficiente es el quick sort en javascript",
                "quiero saber la complejidad del quick sort en js",
                "dame la complejidad temporal del quick sort en javascript"
            ],
            "responses": [
                "La complejidad del Quick Sort es:\n\n- **Mejor caso**: O(n log n), cuando los pivotes dividen el arreglo de manera equilibrada.\n- **Peor caso**: O(n²), cuando el pivote es el elemento más grande o más pequeño en cada partición.\n- **Caso promedio**: O(n log n), debido a la naturaleza recursiva del algoritmo."
            ]
        },
        {
            "tag": "seleccion_pivote_quick_sort_js",
            "patterns": [
                "como se selecciona el pivote en el quick sort en javascript",
                "puedes darme solo la parte donde se elige el pivote en el quick sort",
                "como funciona el pivote en el quick sort en js",
                "quiero ver como se define el pivote en el quick sort en javascript",
                "dame la parte del pivote en el quick sort en js"
            ],
            "responses": [
                "El pivote se selecciona como el último elemento del arreglo:\n\n\nconst pivot = arr[arr.length - 1];\n\n"
            ]
        },
        {
            "tag": "llenado_subarreglos_quick_sort_js",
            "patterns": [
                "como se llenan los subarreglos en el quick sort en javascript",
                "puedes darme solo la parte donde se distribuyen los elementos en el quick sort",
                "como se separan los elementos en el quick sort en js",
                "quiero ver como se llenan los subarreglos en el quick sort en javascript",
                "dame la parte de los subarreglos en el quick sort en js"
            ],
            "responses": [
                "Los elementos se separan en los subarreglos izquierdo y derecho en base al pivote:\n\n\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
        },
        {
            "tag": "recursion_quick_sort_js",
            "patterns": [
                "como funciona la recursion en el quick sort en javascript",
                "puedes darme la parte donde se aplica la recursion en el quick sort",
                "como se llaman los subarreglos recursivamente en el quick sort en js",
                "quiero ver la recursion del quick sort en javascript",
                "dame la parte de la recursion en el quick sort en js"
            ],
            "responses": [
                "La recursión se aplica al ordenar los subarreglos izquierdo y derecho:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
        },
        {
            "tag": "merge_sort_js",
            "patterns": [
                "como funciona el merge sort en javascript",
                "que es el algoritmo de merge sort en js",
                "puedes explicarme el algoritmo de merge sort en javascript",
                "dame el codigo del merge sort en js",
                "como implemento el merge sort en javascript"
            ],
            "responses": [
                "El Merge Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en partes más pequeñas, las ordena y luego las combina. Aquí tienes el código completo en javascript:\n\n\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    const result = [];\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    return [...result, ...left, ...right];\n}\n\n// Ejemplo de uso\nconst numeros = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(numeros));\n// Salida: [3, 9, 10, 27, 38, 43, 82]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_sort_js",
            "patterns": [
                "como se define la funcion en el merge sort en javascript",
                "puedes darme solo la parte donde se define la funcion en el merge sort en js",
                "como empieza el merge sort en js",
                "quiero ver la cabecera de la funcion de merge sort en javascript",
                "dame la parte donde se define la funcion en el merge sort en js"
            ],
            "responses": [
                "La función principal del Merge Sort se define así:\n\n\nfunction mergeSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_merge_sort_js",
            "patterns": [
                "cual es la condicion base en el merge sort en javascript",
                "puedes darme la parte de la condicion base en el merge sort en js",
                "como termina la recursion en el merge sort en js",
                "quiero ver la condicion base del merge sort en javascript",
                "dame la parte donde se establece la condicion base en el merge sort en js"
            ],
            "responses": [
                "La condición base del Merge Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
        },
        {
            "tag": "division_arreglo_merge_sort_js",
            "patterns": [
                "como se divide el arreglo en el merge sort en javascript",
                "puedes darme la parte donde se divide el arreglo en el merge sort en js",
                "como funciona la division en el merge sort en js",
                "quiero ver como se divide el arreglo en el merge sort en javascript",
                "dame la parte de la division en el merge sort en js"
            ],
            "responses": [
                "El arreglo se divide en mitades utilizando el índice medio:\n\n\nconst mid = Math.floor(arr.length / 2);\nconst left = arr.slice(0, mid);\nconst right = arr.slice(mid);\n\n"
            ]
        },
        {
            "tag": "recursion_merge_sort_js",
            "patterns": [
                "como funciona la recursion en el merge sort en javascript",
                "puedes darme la parte donde se aplica la recursion en el merge sort en js",
                "como se llaman las mitades recursivamente en el merge sort en js",
                "quiero ver la recursion del merge sort en javascript",
                "dame la parte de la recursion en el merge sort en js"
            ],
            "responses": [
                "La recursión se aplica al ordenar las mitades izquierda y derecha:\n\n\nreturn merge(mergeSort(left), mergeSort(right));\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_js",
            "patterns": [
                "como se define la funcion merge en el merge sort en javascript",
                "puedes darme solo la parte donde se define la funcion merge en el merge sort en js",
                "como empieza la funcion merge en js",
                "quiero ver la cabecera de la funcion merge en javascript",
                "dame la parte donde se define la funcion merge en el merge sort en js"
            ],
            "responses": [
                "La función merge combina dos subarreglos ordenados en uno solo:\n\n\nfunction merge(left, right) {\n    // Aquí va el cuerpo de la función merge\n}\n\n"
            ]
        },
        {
            "tag": "comparacion_merge_js",
            "patterns": [
                "como se comparan los elementos en el merge sort en javascript",
                "puedes darme la parte donde se comparan los elementos en el merge sort en js",
                "como funciona la comparacion en el merge sort en js",
                "quiero ver la comparacion de los elementos en el merge sort en javascript",
                "dame la parte de la comparacion en el merge sort en js"
            ],
            "responses": [
                "Los elementos se comparan para determinar cuál agregar al resultado:\n\n\nif (left[0] < right[0]) {\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n\n"
            ]
        },
        {
            "tag": "combinar_restos_merge_js",
            "patterns": [
                "como se combinan los restos en el merge sort en javascript",
                "puedes darme la parte donde se combinan los elementos restantes en el merge sort en js",
                "como se manejan los restos en el merge sort en js",
                "quiero ver como se combinan los restos en el merge sort en javascript",
                "dame la parte de la combinacion de restos en el merge sort en js"
            ],
            "responses": [
                "Los elementos restantes de las mitades se combinan al resultado final:\n\n\nreturn [...result, ...left, ...right];\n\n"
            ]
        },
        {
            "tag": "complejidad_merge_sort_js",
            "patterns": [
                "cual es la complejidad del merge sort en javascript",
                "puedes explicarme la eficiencia del merge sort en js",
                "que tan eficiente es el merge sort en javascript",
                "quiero saber la complejidad del merge sort en js",
                "dame la complejidad temporal del merge sort en javascript"
            ],
            "responses": [
                "La complejidad del Merge Sort es:\n\n- **Mejor caso**: O(n log n), siempre, ya que divide y combina eficientemente.\n- **Peor caso**: O(n log n), ya que el algoritmo sigue siendo eficiente.\n- **Caso promedio**: O(n log n), independientemente de cómo estén ordenados los datos inicialmente."
            ]
        },
        {
            "tag": "definicion_funcion_fibonacci_js",
            "patterns": [
                "como se define la funcion de fibonacci en javascript",
                "puedes darme la parte donde se define la funcion fibonacci",
                "como empieza el algoritmo de fibonacci en js",
                "quiero ver la cabecera de la funcion fibonacci en javascript",
                "dame la parte donde se define la funcion fibonacci en js"
            ],
            "responses": [
                "La función de Fibonacci se define así:\n\n\nfunction fibonacci(n) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_fibonacci_js",
            "patterns": [
                "cual es la condicion base en el algoritmo de fibonacci en javascript",
                "puedes darme la condicion base del fibonacci en js",
                "como se detiene la recursion en fibonacci en js",
                "quiero ver la condicion base de fibonacci en javascript",
                "dame la parte de la condicion base en fibonacci en js"
            ],
            "responses": [
                "La condición base del algoritmo de Fibonacci es:\n\n\nif (n <= 1) {\n    return n;\n}\n\nEsto asegura que el cálculo termine cuando n sea 0 o 1."
            ]
        },
        {
            "tag": "recursion_fibonacci_js",
            "patterns": [
                "como funciona la recursion en el fibonacci en javascript",
                "puedes darme la parte donde se aplica la recursion en fibonacci",
                "como se llaman las funciones recursivas en fibonacci en js",
                "quiero ver la recursion del fibonacci en javascript",
                "dame la parte de la recursion en fibonacci en js"
            ],
            "responses": [
                "La recursión en Fibonacci se realiza llamando a la función con valores decrecientes:\n\n\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n\nEsto calcula la suma de los dos números anteriores en la serie."
            ]
        },
        {
            "tag": "fibonacci_iterativo_js",
            "patterns": [
                "como implemento fibonacci de manera iterativa en javascript",
                "puedes darme una version iterativa del algoritmo de fibonacci",
                "como funciona el fibonacci iterativo en js",
                "quiero ver el codigo de fibonacci iterativo en javascript",
                "dame una implementacion iterativa de fibonacci en js"
            ],
            "responses": [
                "Aquí tienes una versión iterativa del algoritmo de Fibonacci, que es más eficiente en términos de memoria y rendimiento:\n\n\nfunction fibonacciIterativo(n) {\n    if (n <= 1) {\n        return n;\n    }\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciIterativo(10)); // Salida: 55\n\n"
            ]
        },
        {
            "tag": "almacenamiento_fibonacci_js",
            "patterns": [
                "como uso almacenamiento para optimizar fibonacci en javascript",
                "puedes darme una version con almacenamiento de fibonacci en js",
                "como funciona el memoization en fibonacci en javascript",
                "quiero ver una implementacion optimizada de fibonacci con memoization en js",
                "dame un algoritmo optimizado de fibonacci con almacenamiento en javascript"
            ],
            "responses": [
                "El almacenamiento (memoization) se utiliza para guardar cálculos previos y mejorar la eficiencia del algoritmo. Aquí tienes una implementación optimizada de Fibonacci con memoization:\n\n\nfunction fibonacciMemoization(n, memo = {}) {\n    if (n in memo) {\n        return memo[n];\n    }\n    if (n <= 1) {\n        return n;\n    }\n    memo[n] = fibonacciMemoization(n - 1, memo) + fibonacciMemoization(n - 2, memo);\n    return memo[n];\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciMemoization(10)); // Salida: 55\n\n"
            ]
        },
        {
            "tag": "complejidad_fibonacci_recursivo_js",
            "patterns": [
                "cual es la complejidad del fibonacci recursivo en javascript",
                "puedes explicarme la eficiencia del fibonacci recursivo en js",
                "que tan eficiente es el fibonacci recursivo en javascript",
                "quiero saber la complejidad del fibonacci recursivo en js",
                "dame la complejidad temporal del fibonacci recursivo en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo recursivo de Fibonacci es:\n\n- **Complejidad temporal**: O(2^n), ya que cada llamada genera dos llamadas adicionales.\n- **Complejidad espacial**: O(n), debido a la profundidad de la pila de llamadas.\nEsto lo hace ineficiente para valores grandes de n."
            ]
        },
        {
            "tag": "complejidad_fibonacci_memoization_js",
            "patterns": [
                "cual es la complejidad del fibonacci con memoization en javascript",
                "puedes explicarme la eficiencia del fibonacci optimizado con memoization en js",
                "que tan eficiente es el fibonacci con memoization en javascript",
                "quiero saber la complejidad del fibonacci con memoization en js",
                "dame la complejidad temporal del fibonacci optimizado en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo de Fibonacci con memoization es:\n\n- **Complejidad temporal**: O(n), ya que cada número en la serie se calcula solo una vez.\n- **Complejidad espacial**: O(n), debido al almacenamiento en el objeto memo.\nEsto lo hace altamente eficiente comparado con la versión recursiva estándar."
            ]
        },
        {
            "tag": "busqueda_en_profundidad_js",
            "patterns": [
                "como funciona la busqueda en profundidad en javascript",
                "que es el algoritmo de busqueda en profundidad en js",
                "puedes explicarme el dfs en javascript",
                "dame el codigo de busqueda en profundidad en js",
                "como implemento la busqueda en profundidad en javascript"
            ],
            "responses": [
                "La búsqueda en profundidad (DFS) es un algoritmo que explora tanto como sea posible por un camino antes de retroceder. Aquí tienes una implementación básica en javascript:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    console.log(start);\n    visited.add(start);\n\n    for (const neighbor of graph[start]) {\n        if (!visited.has(neighbor)) {\n            dfs(graph, neighbor, visited);\n        }\n    }\n}\n\n// Ejemplo de uso\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\ndfs(graph, 'A');\n\nEste código imprimirá los nodos visitados en el orden DFS."
            ]
        },
        {
            "tag": "definicion_funcion_dfs_js",
            "patterns": [
                "como se define la funcion de busqueda en profundidad en javascript",
                "puedes darme la cabecera de la funcion dfs",
                "como empieza el dfs en js",
                "quiero ver la definicion de la funcion dfs en javascript",
                "dame la parte donde se define la funcion de busqueda en profundidad en js"
            ],
            "responses": [
                "La función principal de DFS en javascript se define así:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    // Cuerpo del algoritmo aquí\n}\n\n"
            ]
        },
        {
            "tag": "marcar_nodo_visitado_dfs_js",
            "patterns": [
                "como se marca un nodo como visitado en dfs en javascript",
                "puedes darme la parte donde se marcan los nodos visitados en dfs",
                "como se registra un nodo visitado en el dfs en js",
                "quiero ver como se marcan los nodos en busqueda en profundidad en javascript",
                "dame la parte donde se registra un nodo como visitado en dfs en js"
            ],
            "responses": [
                "Un nodo se marca como visitado agregándolo a un conjunto:\n\n\nvisited.add(start);\n\nEsto evita visitar el mismo nodo más de una vez."
            ]
        },
        {
            "tag": "recorrer_vecinos_dfs_js",
            "patterns": [
                "como se recorren los vecinos en dfs en javascript",
                "puedes darme la parte donde se recorren los nodos adyacentes en dfs",
                "como funciona el recorrido de vecinos en busqueda en profundidad en js",
                "quiero ver el codigo para recorrer los vecinos en dfs en javascript",
                "dame la parte donde se recorren los vecinos en dfs en js"
            ],
            "responses": [
                "El recorrido de vecinos se realiza con un bucle for:\n\n\nfor (const neighbor of graph[start]) {\n    if (!visited.has(neighbor)) {\n        dfs(graph, neighbor, visited);\n    }\n}\n\nEsto garantiza que todos los nodos adyacentes sean explorados."
            ]
        },
        {
            "tag": "estructura_grafo_dfs_js",
            "patterns": [
                "como se define el grafo para dfs en javascript",
                "puedes mostrarme como se estructura el grafo en dfs",
                "como funciona la estructura de datos para el grafo en dfs en js",
                "quiero ver como se representa el grafo para busqueda en profundidad en javascript",
                "dame un ejemplo de grafo para dfs en js"
            ],
            "responses": [
                "Un grafo para DFS se representa típicamente como un objeto donde las claves son nodos y los valores son listas de nodos adyacentes. Ejemplo:\n\n\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\n\nEsto permite representar la conectividad entre los nodos."
            ]
        },
        {
            "tag": "dfs_iterativo_js",
            "patterns": [
                "como se implementa dfs iterativo en javascript",
                "puedes mostrarme una version iterativa del dfs en js",
                "como funciona el dfs iterativo en javascript",
                "quiero ver el codigo de dfs iterativo en javascript",
                "dame una implementacion iterativa de dfs en js"
            ],
            "responses": [
                "Aquí tienes una implementación iterativa del DFS utilizando una pila:\n\n\nfunction dfsIterativo(graph, start) {\n    const stack = [start];\n    const visited = new Set();\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n\n        if (!visited.has(node)) {\n            console.log(node);\n            visited.add(node);\n            for (const neighbor of graph[node]) {\n                stack.push(neighbor);\n            }\n        }\n    }\n}\n\n// Ejemplo de uso\ndfsIterativo(graph, 'A');\n\nEsto utiliza una pila en lugar de la recursión para controlar el flujo del algoritmo."
            ]
        },
        {
            "tag": "complejidad_dfs_js",
            "patterns": [
                "cual es la complejidad del dfs en javascript",
                "puedes explicarme la eficiencia del dfs en js",
                "que tan eficiente es el dfs en javascript",
                "quiero saber la complejidad del dfs en js",
                "dame la complejidad temporal del dfs en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo DFS es:\n\n- **Complejidad temporal**: O(V + E), donde V es el número de vértices y E es el número de aristas.\n- **Complejidad espacial**: O(V), debido al almacenamiento de los nodos visitados y la pila de llamadas (en la versión recursiva) o la pila explícita (en la versión iterativa).\nEsto lo hace eficiente para explorar grafos con muchos nodos y aristas."
            ]
        },
        {
            "tag": "inicializacion_pila_dfs_iterativo_js",
            "patterns": [
                "como se inicializa la pila en dfs iterativo en javascript",
                "puedes mostrarme la parte donde se crea la pila en dfs iterativo",
                "como empieza la pila en dfs iterativo en js",
                "quiero ver la inicializacion de la pila en dfs iterativo en javascript",
                "dame la parte donde se inicializa la pila en dfs iterativo en js"
            ],
            "responses": [
                "En la implementación iterativa de DFS, la pila se inicializa con el nodo inicial:\n\n\nconst stack = [start];\n\nEsto establece el punto de partida para explorar el grafo."
            ]
        },
        {
            "tag": "verificacion_nodo_no_visitado_dfs_js",
            "patterns": [
                "como se verifica que un nodo no ha sido visitado en dfs en javascript",
                "puedes mostrarme como se asegura que un nodo no sea visitado dos veces en dfs",
                "como se comprueba si un nodo ha sido visitado en busqueda en profundidad en js",
                "quiero ver como se verifica el estado de un nodo en dfs en javascript",
                "dame la parte donde se verifica si un nodo ya fue visitado en dfs en js"
            ],
            "responses": [
                "Para garantizar que un nodo no sea visitado dos veces, se utiliza la función `has` del conjunto de nodos visitados:\n\n\nif (!visited.has(node)) {\n    // Procesar el nodo\n}\n\nEsto asegura que cada nodo se procese una sola vez."
            ]
        },
        {
            "tag": "agregar_vecinos_pila_dfs_js",
            "patterns": [
                "como se agregan los vecinos a la pila en dfs en javascript",
                "puedes mostrarme la parte donde se añaden los nodos vecinos en dfs iterativo",
                "como funciona el agregado de vecinos en dfs en js",
                "quiero ver como se añaden los vecinos a la pila en busqueda en profundidad en javascript",
                "dame la parte donde se añaden los nodos vecinos a la pila en dfs en js"
            ],
            "responses": [
                "En la versión iterativa de DFS, los vecinos del nodo actual se agregan a la pila con el bucle:\n\n\nfor (const neighbor of graph[node]) {\n    stack.push(neighbor);\n}\n\nEsto asegura que los nodos conectados sean explorados en futuras iteraciones."
            ]
        },
        {
            "tag": "impresion_nodos_visitados_dfs_js",
            "patterns": [
                "como se imprimen los nodos visitados en dfs en javascript",
                "puedes mostrarme como se registran los nodos visitados en dfs",
                "como se manejan los nodos procesados en busqueda en profundidad en js",
                "quiero ver como se imprimen los nodos visitados en dfs en javascript",
                "dame la parte donde se imprimen los nodos en dfs en js"
            ],
            "responses": [
                "Los nodos visitados se imprimen utilizando la función `console.log` justo después de ser marcados como visitados:\n\n\nconsole.log(node);\n\nEsto registra cada nodo visitado en el orden de exploración."
            ]
        },
        {
            "tag": "uso_set_nodos_visitados_dfs_js",
            "patterns": [
                "por que se usa un set para nodos visitados en dfs en javascript",
                "puedes mostrarme como se utiliza el set en dfs",
                "como funciona el set para nodos en busqueda en profundidad en js",
                "quiero entender el uso del set en dfs en javascript",
                "dame la parte donde se explica el uso del set para nodos visitados en dfs en js"
            ],
            "responses": [
                "El `Set` se utiliza para almacenar los nodos visitados porque permite comprobar si un nodo ya fue visitado de manera eficiente:\n\n\nvisited.add(node);\nif (!visited.has(neighbor)) {\n    // Procesar el vecino\n}\n\nEsta estructura tiene operaciones de inserción y verificación en tiempo constante."
            ]
        },
        {
            "tag": "heap_sort_js",
            "patterns": [
                "que es el algoritmo de heap sort en javascript",
                "como funciona el heap sort en js",
                "puedes explicarme el heap sort en javascript",
                "dame el codigo completo del algoritmo heap sort en js",
                "como implemento el heap sort en javascript"
            ],
            "responses": [
                "El algoritmo de Heap Sort es un algoritmo de ordenamiento que utiliza la estructura de datos de un heap (montículo). Primero construye un heap máximo a partir del arreglo, luego intercambia el primer elemento (el máximo) con el último, reduce el tamaño del heap y aplica heapify nuevamente. Aquí tienes el código completo en javascript:\n\n\nfunction heapSort(arr) {\n\tlet n = arr.length;\n\n\t// Construir un heap máximo\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, n, i);\n\t}\n\n\t// Extraer elementos del heap uno por uno\n\tfor (let i = n - 1; i > 0; i--) {\n\t\t// Mover el máximo actual al final\n\t\t[arr[0], arr[i]] = [arr[i], arr[0]];\n\n\t\t// Aplicar heapify al heap reducido\n\t\theapify(arr, i, 0);\n\t}\n\n\treturn arr;\n}\n\nfunction heapify(arr, n, i) {\n\tlet largest = i;\n\tconst left = 2 * i + 1;\n\tconst right = 2 * i + 2;\n\n\t// Si el hijo izquierdo es más grande que el nodo raíz\n\tif (left < n && arr[left] > arr[largest]) {\n\t\tlargest = left;\n\t}\n\n\t// Si el hijo derecho es más grande que el nodo raíz\n\tif (right < n && arr[right] > arr[largest]) {\n\t\tlargest = right;\n\t}\n\n\t// Si el nodo raíz no es el más grande\n\tif (largest !== i) {\n\t\t[arr[i], arr[largest]] = [arr[largest], arr[i]];\n\t\theapify(arr, n, largest);\n\t}\n}\n\n// Ejemplo de uso\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n"
            ]
        },
        {
            "tag": "construccion_heap_maximo_js",
            "patterns": [
                "como se construye el heap maximo en heap sort en javascript",
                "puedes mostrarme la parte donde se crea el heap maximo",
                "como se inicializa el heap maximo en js",
                "quiero ver la construccion del heap maximo en heap sort en javascript",
                "dame la parte donde se construye el heap maximo en heap sort en js"
            ],
            "responses": [
                "El heap máximo se construye aplicando la función `heapify` desde la mitad del arreglo hacia atrás:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n"
            ]
        },
        {
            "tag": "extraccion_maximo_heap_sort_js",
            "patterns": [
                "como se extrae el elemento maximo en heap sort en javascript",
                "puedes mostrarme la parte donde se intercambia el primer elemento con el ultimo",
                "como se hace el intercambio en heap sort en js",
                "quiero ver la extraccion del maximo en heap sort en javascript",
                "dame la parte del intercambio en heap sort en js"
            ],
            "responses": [
                "En Heap Sort, el máximo (primer elemento) se intercambia con el último:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n\nEsto mueve el elemento más grande al final del arreglo ordenado."
            ]
        },
        {
            "tag": "complejidad_heap_sort_js",
            "patterns": [
                "cual es la complejidad del heap sort en javascript",
                "puedes explicarme la eficiencia del heap sort en js",
                "que tan eficiente es el heap sort en js",
                "quiero saber la complejidad temporal del heap sort en javascript",
                "dame la complejidad del heap sort en js"
            ],
            "responses": [
                "La complejidad del Heap Sort es:\n\n- **Mejor caso**: O(n log n)\n- **Peor caso**: O(n log n)\n- **Caso promedio**: O(n log n)\n\nEsto lo hace eficiente y estable en términos de complejidad."
            ]
        },
        {
            "tag": "definicion_funcion_heap_sort_js",
            "patterns": [
                "como se define la funcion principal en heap sort en javascript",
                "puedes darme la cabecera de la funcion heap sort en js",
                "como empieza la funcion heap sort en js",
                "quiero ver la cabecera de la funcion de heap sort en javascript",
                "dame el fragmento donde se define la funcion principal de heap sort en js"
            ],
            "responses": [
                "La definición de la función principal de Heap Sort es la siguiente:\n\n\nfunction heapSort(arr) {\n\t// Aquí empieza el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "iteracion_heap_maximo_js",
            "patterns": [
                "como se itera para construir el heap maximo en heap sort en js",
                "puedes darme el fragmento donde se itera para construir el heap maximo en js",
                "quiero ver el bucle para construir el heap maximo en heap sort en js",
                "como se hace la iteracion para construir el heap maximo en javascript",
                "dame la parte donde se construye el heap maximo en heap sort en js"
            ],
            "responses": [
                "La iteración para construir el Heap máximo en el algoritmo Heap Sort es la siguiente:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n"
            ]
        },
        {
            "tag": "intercambio_elementos_heap_sort_js",
            "patterns": [
                "como se intercambian los elementos en heap sort en js",
                "puedes darme el código para intercambiar elementos en heap sort en js",
                "quiero ver cómo se hace el intercambio de elementos en heap sort en js",
                "dame el fragmento donde se intercambian elementos en heap sort en javascript",
                "como se intercambian los elementos en heap sort en js"
            ],
            "responses": [
                "El intercambio de elementos en Heap Sort se realiza de la siguiente manera:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n"
            ]
        },
        {
            "tag": "ejemplo_heap_sort_js",
            "patterns": [
                "puedes darme un ejemplo de uso del heap sort en javascript",
                "quiero ver un ejemplo completo de heap sort en js",
                "como se utiliza el heap sort en un arreglo de ejemplo",
                "dame un ejemplo práctico de heap sort en javascript",
                "como se usa el algoritmo heap sort en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo de uso del Heap Sort en javascript:\n\n\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n"
            ]
        },
        {
            "tag": "tamano_arreglo_heap_sort_js",
            "patterns": [
                "como se obtiene el tamaño del arreglo en heap sort en js",
                "puedes mostrarme el fragmento donde se obtiene el tamaño del arreglo en heap sort en js",
                "como se define la variable que guarda el tamaño del arreglo en heap sort en js",
                "quiero ver cómo se maneja el tamaño del arreglo en heap sort en javascript",
                "dame la parte donde se obtiene el tamaño del arreglo en heap sort en js"
            ],
            "responses": [
                "El tamaño del arreglo se obtiene así:\n\n\nlet n = arr.length;\n"
            ]
        },
        {
            "tag": "ciclo_for_en_javascript",
            "patterns": [
                "como puedo crear un ciclo for en js",
                "dame un ejemplo de un ciclo for en js",
                "como escribo un buble for en js",
                "dame un ejemplo de un ciclo for en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo básico de un ciclo for en JavaScript:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "Puedes usar un for para iterar sobre un arreglo:\n\tconst numeros = [1, 2, 3, 4];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log('Elemento:', numeros[i]);\n\t}"
            ]
        },
        {
            "tag": "declaracion_de_variable_en_encabezado_for_js",
            "patterns": [
                "como declaro una variable en un ciclo en js",
                "dame un ejemplo para declarar una variable en js",
                "donde se declara la variable que se usara para iterar en un ciclo for en js",
                "dame un ejemplo de un ciclo for con la variable declarada en el encabezado."
            ],
            "responses": [
                "Aquí tienes un ejemplo de un ciclo for con la variable declarada en el encabezado:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
                "En javascript puedes declarar una variable directamente en el encabezado del for, así:\n\tfor (let contador = 10; contador > 0; contador--) {\n\t\tconsole.log('Cuenta regresiva:', contador);\n\t}",
                "La declaración de la variable en el encabezado del ciclo for puede verse así:\n\tfor (let indice = 0; indice < 3; indice++) {\n\t\tconsole.log(`Iteración número: ${indice}`);\n\t}",
                "Un ejemplo donde se declara la variable en el encabezado del for:\n\tfor (let numero = 1; numero <= 5; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}",
                "Así puedes declarar una variable en el encabezado del for en javascript:\n\tfor (let paso = 0; paso < 4; paso++) {\n\t\tconsole.log(`Paso actual: ${paso}`);\n\t}"
            ]
        },
        {
            "tag": "condicional_en_ciclo_for_js",
            "patterns": [
                "como funciona la condicional en un ciclo for en js",
                "dame un ejemplo de la condicional en un ciclo for en js",
                "que hace la condicional en el encabezado de un for",
                "dame un ciclo for con una condicional para iterar en js",
                "como uso una condicional en un ciclo for en js"
            ],
            "responses": [
                "La condicional en un ciclo for determina cuándo se detiene la iteración. Aquí tienes un ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nEn este caso, el ciclo se detiene cuando la condición `i < 5` deja de cumplirse.",
                "Un ciclo for con una condicional:\n\tfor (let numero = 1; numero <= 3; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}\nLa condición `numero <= 3` evalúa si continuar o no.",
                "La condicional es clave para controlar el ciclo. Ejemplo:\n\tfor (let x = 10; x > 0; x--) {\n\t\tconsole.log(`Cuenta regresiva: ${x}`);\n\t}\nAquí, el ciclo se detiene cuando `x > 0` deja de ser verdadero.",
                "Otro ejemplo con condicional:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nEn este caso, la condición es `i < 10`.",
                "Así puedes usar una condicional en el ciclo for:\n\tfor (let indice = 0; indice !== 5; indice++) {\n\t\tconsole.log(`Indice actual: ${indice}`);\n\t}\nEl ciclo se detiene cuando `indice !== 5` es falso."
            ]
        },
        {
            "tag": "incremento_en_ciclo_for_js",
            "patterns": [
                "como hago para que el ciclo for incremente en js",
                "dame un ejemplo de un ciclo for que vaya en incremento en js",
                "como incremento el valor en un ciclo for en js",
                "dame un for que incremente un contador en js",
                "ejemplo de ciclo for que incremente en cada iteracion"
            ],
            "responses": [
                "Para hacer que un ciclo for incremente, puedes usar el operador `++`. Ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i++` incrementa el valor de `i` en cada iteración.",
                "Un ciclo que incrementa en pasos de 1:\n\tfor (let contador = 1; contador <= 5; contador++) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se incrementa.",
                "Puedes incrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i += 2` aumenta el valor de `i` en 2 en cada iteración.",
                "Ejemplo donde el incremento es controlado manualmente:\n\tfor (let numero = 0; numero < 20; numero += 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo incrementa en pasos de 5.",
                "Un ciclo for con incremento simple:\n\tfor (let x = 1; x <= 10; x++) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl incremento se hace con `x++`."
            ]
        },
        {
            "tag": "decremento_en_ciclo_for_js",
            "patterns": [
                "como hago para que el ciclo for decremente en js",
                "dame un ejemplo de un ciclo for que vaya en decremento en js",
                "como decremento el valor en un ciclo for en js",
                "dame un for que decremente un contador en js",
                "ejemplo de ciclo for que decremente en cada iteracion"
            ],
            "responses": [
                "Para hacer que un ciclo for decremente, usa el operador `--`. Ejemplo:\n\tfor (let i = 5; i > 0; i--) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i--` decrementa el valor de `i` en cada iteración.",
                "Un ciclo que decrementa desde un valor inicial:\n\tfor (let contador = 10; contador >= 1; contador--) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se decrementa.",
                "Puedes decrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 10; i > 0; i -= 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i -= 2` reduce el valor de `i` en 2 en cada iteración.",
                "Ejemplo donde el decremento es controlado manualmente:\n\tfor (let numero = 50; numero >= 0; numero -= 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo decrementa en pasos de 5.",
                "Un ciclo for con decremento simple:\n\tfor (let x = 3; x > 0; x--) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl decremento se realiza con `x--`."
            ]
        },
        {
            "tag": "uso_break_en_ciclo_js",
            "patterns": [
                "como usar break en un ciclo for en js",
                "dame un ejemplo de break en un ciclo en javascript",
                "como funciona el break en un ciclo for en js",
                "como detener un ciclo con break en javascript"
            ],
            "responses": [
                "El `break` se utiliza para salir de un ciclo antes de que termine. Ejemplo con un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}",
                "Puedes usar `break` para salir del ciclo cuando se cumpla una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(num);\n\t}",
                "Un ejemplo con `break` para detener el ciclo cuando un número sea mayor que 10:\n\tfor (let i = 0; i <= 20; i++) {\n\t\tif (i > 10) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}"
            ]
        },
        {
            "tag": "uso_continue_en_ciclo_js",
            "patterns": [
                "como usar continue en un ciclo for en js",
                "dame un ejemplo de continue en un ciclo en javascript",
                "como funciona el continue en un ciclo en js",
                "como saltar una iteracion con continue en javascript"
            ],
            "responses": [
                "El `continue` se utiliza para saltarse una iteración del ciclo y pasar a la siguiente. Ejemplo en un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}",
                "Puedes usar `continue` para saltar una iteración si se cumple una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(num);\n\t}",
                "Un ejemplo con `continue` para omitir números impares:\n\tfor (let i = 0; i <= 10; i++) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}"
            ]
        },
        {
            "tag": "declaracion_de_arrays_en_js",
            "patterns": [
                "como se declara un array en js",
                "dame ejemplos de declaracion de arrays en js",
                "como crear un array en javascript",
                "dame un ejemplo de un array en js",
                "ejemplo de declaracion de arrays en js"
            ],
            "responses": [
                "Un array se puede declarar usando corchetes:\n\tconst numeros [] = [1, 2, 3, 4, 5];\n\tconsole.log(numeros);",
                "También puedes usar la sintaxis genérica para declarar un array:\n\tconst nombres: Array<string> = ['Juan', 'Maria', 'Luis'];\n\tconsole.log(nombres);",
                "Declarar un array vacío y llenarlo luego:\n\tconst datos [] = [];\n\tdatos.push('valor1');\n\tdatos.push('valor2');\n\tconsole.log(datos);"
            ]
        },
        {
            "tag": "acceso_a_elementos_array_con_for_js",
            "patterns": [
                "como acceder a elementos de un array con un ciclo for en tjs",
                "dame ejemplos de recorrer un array con un for en js",
                "como usar un ciclo for para obtener elementos de un array en javascript",
                "dame un ejemplo de acceso a arrays con un for en js",
                "como iterar sobre un array usando for en js"
            ],
            "responses": [
                "Puedes usar un ciclo for para acceder a los elementos de un array:\n\tconst numeros: number[] = [10, 20, 30, 40];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log(`Elemento en índice ${i}: ${numeros[i]}`);\n\t}",
                "Ejemplo básico de iteración con un for:\n\tconst frutas: string[] = ['manzana', 'naranja', 'platano'];\n\tfor (let i = 0; i < frutas.length; i++) {\n\t\tconsole.log(frutas[i]);\n\t}"
            ]
        },
        {
            "tag": "declaracion_y_uso_basico_tuplas_js",
            "patterns": [
                "como se declara una tupla en js",
                "dame ejemplos de como usar tuplas en js",
                "como crear una tupla en javascript",
                "dame un ejemplo de una tupla en js",
                "ejemplo basico de tupla en js"
            ],
            "responses": [
                "Una tupla en javascript se declara especificando los tipos en un arreglo:\n\tconst tupla  = ['Juan', 25];\n\tconsole.log(tupla);",
                "Puedes usar una tupla para representar datos relacionados:\n\tconst coordenadas = [40.7128, -74.0060];\n\tconsole.log(`Latitud: ${coordenadas[0]}, Longitud: ${coordenadas[1]}`);",
                "Ejemplo con tipos mixtos:\n\tconst persona = ['Ana', 30, true];\n\tconsole.log(`Nombre: ${persona[0]}, Edad: ${persona[1]}, Activo: ${persona[2]}`);"
            ]
        },
        {
            "tag": "estructura_basica_if_normal_js",
            "patterns": [
                "como funciona un if en js",
                "dame ejemplos de un if en js",
                "como usar un if en javascript",
                "dame un ejemplo de una estructura if en js",
                "como se estructura un if en js"
            ],
            "responses": [
                "La estructura básica de un `if` en javascript es:\n\tif (condicion) {\n\t\t// código a ejecutar si la condición es verdadera\n\t}\nEjemplo:\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
                "Un ejemplo sencillo de un `if`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
                "Otro ejemplo donde se utiliza una comparación:\n\tlet temperatura = 30;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t}",
                "Puedes comprobar condiciones lógicas en el `if`:\n\tlet edad = 20;\n\tif (edad >= 18) {\n\t\tconsole.log('Acceso permitido');\n\t}",
                "Ejemplo de un `if` simple:\n\tlet numero = 4;\n\tif (numero % 2 === 0) {\n\t\tconsole.log('Es un número par');\n\t}"
            ]
        },
        {
            "tag": "condicionales_compuestas_and_if_js",
            "patterns": [
                "como colocar varias condiciones en un if en js",
                "dame ejemplos de un if con varias condiciones en js",
                "como usar el operador and en un if en javascript",
                "como combinar condiciones dentro de un if en js"
            ],
            "responses": [
                "Puedes usar el operador `&&` para combinar condiciones dentro de un `if`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t}",
                "Ejemplo de múltiples condiciones con `&&`:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t}",
                "Puedes combinar más de una condición usando `&&`:\n\tlet temperatura = 30;\n\tlet humedad = 80;\n\tif (temperatura > 25 && humedad > 70) {\n\t\tconsole.log('Hace calor y está húmedo');\n\t}"
            ]
        },
        {
            "tag": "condicionales_negacion_if_js",
            "patterns": [
                "como usar negacion dentro de un if en js",
                "dame ejemplos de como usar el operador not en un if en javascript",
                "como negar una condicion en un if en js",
                "como poner una condicion falsa en un if en javascript"
            ],
            "responses": [
                "Puedes usar el operador `!` para negar una condición dentro de un `if`:\n\tlet estaLloviendo = false;\n\tif (!estaLloviendo) {\n\t\tconsole.log('No está lloviendo');\n\t}",
                "Negar una condición en un `if`:\n\tlet esMayorDeEdad = false;\n\tif (!esMayorDeEdad) {\n\t\tconsole.log('No eres mayor de edad');\n\t}",
                "El operador `!` puede usarse para verificar si una condición es falsa:\n\tlet tieneLicencia = false;\n\tif (!tieneLicencia) {\n\t\tconsole.log('No tienes licencia');\n\t}"
            ]
        },
        {
            "tag": "condicionales_comparativas_if_js",
            "patterns": [
                "como comparar numeros dentro de un if en js",
                "como usar comparaciones numericas en un if en javascript",
                "dame ejemplos de comparaciones numericas en un if en js",
                "como evaluar condiciones numericas en un if en javascript"
            ],
            "responses": [
                "Puedes comparar números usando operadores como `>`, `<`, `===`, etc.:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
                "Comparación numérica en un `if`:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
                "Uso de `===` para comparar valores numéricos:\n\tlet valor = 100;\n\tif (valor === 100) {\n\t\tconsole.log('El valor es 100');\n\t}",
                "Comparar si un número es menor o igual a un valor:\n\tlet temperatura = 18;\n\tif (temperatura <= 20) {\n\t\tconsole.log('La temperatura es baja');\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_if_else_js",
            "patterns": [
                "como funciona un if else en js",
                "dame ejemplos de un if else en js",
                "como usar un if else en javascript",
                "dame un ejemplo de una estructura if else en js",
                "como se estructura un if else en js"
            ],
            "responses": [
                "La estructura básica de un `if-else` es:\n\tif (condicion) {\n\t\t// código si la condición es verdadera\n\t} else {\n\t\t// código si la condición es falsa\n\t}\nEjemplo:\n\tlet edad = 18;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else {\n\t\tconsole.log('Eres menor de edad');\n\t}",
                "Un ejemplo de uso de `if-else`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t} else {\n\t\tconsole.log('El número es 5 o menor');\n\t}",
                "Puedes utilizar `else` para manejar la parte falsa de la condición:\n\tlet temperatura = 20;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t} else {\n\t\tconsole.log('Hace fresco');\n\t}"
            ]
        },
        {
            "tag": "condicionales_complejas_if_else_js",
            "patterns": [
                "como poner condiciones complejas en un if else en js",
                "dame ejemplos de if else con condiciones multiples en js",
                "como usar operadores logicos en un if else en javascript",
                "como combinar condiciones con if else en js"
            ],
            "responses": [
                "Puedes combinar varias condiciones con operadores lógicos dentro del `if-else`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t} else {\n\t\tconsole.log('El número no está entre 5 y 15');\n\t}",
                "Ejemplo de `if-else` con condiciones lógicas:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t} else {\n\t\tconsole.log('Acceso denegado');\n\t}",
                "Si la primera condición es falsa, puedes comprobar otras condiciones:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}"
            ]
        },
        {
            "tag": "uso_else_if_js",
            "patterns": [
                "como usar un else if en js",
                "dame ejemplos de else if en javascript",
                "como funciona el else if en un if en js",
                "dame un ejemplo de uso de else if en un if en js"
            ],
            "responses": [
                "Puedes usar `else if` para comprobar condiciones adicionales si la primera es falsa:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}",
                "Ejemplo de `else if` para comparar más de una condición:\n\tlet numero = 5;\n\tif (numero > 10) {\n\t\tconsole.log('El número es mayor a 10');\n\t} else if (numero === 5) {\n\t\tconsole.log('El número es 5');\n\t} else {\n\t\tconsole.log('El número es menor a 5');\n\t}",
                "Usando `else if` para crear un bloque de condiciones más específico:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else if (edad >= 13) {\n\t\tconsole.log('Eres un adolescente');\n\t} else {\n\t\tconsole.log('Eres un niño');\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_while_js",
            "patterns": [
                "como se usa un ciclo while en js",
                "dame un ejemplo de un ciclo while en javascript",
                "como funciona el ciclo while en js",
                "como se estructura un ciclo while en javascript"
            ],
            "responses": [
                "La estructura básica de un ciclo `while` es la siguiente:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}\nEste ciclo continuará ejecutándose mientras que la condición sea verdadera.",
                "Ejemplo básico de un ciclo `while`:\n\tlet numero = 0;\n\twhile (numero < 5) {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Un ciclo `while` continuará hasta que la condición sea falsa:\n\tlet contador = 0;\n\twhile (contador < 3) {\n\t\tconsole.log('Contando:', contador);\n\t\tcontador++;\n\t}"
            ]
        },
        {
            "tag": "condiciones_en_while_js",
            "patterns": [
                "como poner una condicion dentro de un ciclo while en js",
                "dame ejemplos de condiciones dentro de un ciclo while en js",
                "como usar condicionales en un while en javascript",
                "como evaluar condiciones en un ciclo while en js"
            ],
            "responses": [
                "Puedes poner una condición dentro del `while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Condición dentro de un ciclo `while` para salir después de 5 iteraciones:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Puedes usar una condición lógica compleja dentro del `while`:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t}"
            ]
        },
        {
            "tag": "uso_break_en_while_js",
            "patterns": [
                "como usar break en un ciclo while en js",
                "dame un ejemplo de break en un ciclo while en javascript",
                "como detener un ciclo while con break en js",
                "como salir de un ciclo while en javascript"
            ],
            "responses": [
                "Puedes usar `break` para salir de un ciclo `while` cuando se cumpla una condición:\n\tlet i = 0;\n\twhile (i < 10) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero === 7) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Un ejemplo de cómo salir de un ciclo `while` con `break`:\n\tlet contador = 0;\n\twhile (contador < 10) {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t}"
            ]
        },
        {
            "tag": "uso_continue_en_while_js",
            "patterns": [
                "como usar continue en un ciclo while en js",
                "dame un ejemplo de continue en un ciclo while en javascript",
                "como saltar una iteracion con continue en while en js",
                "como funciona el continue en un ciclo while en javascript"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `while`:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\twhile (numero < 10) {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
                "Si deseas omitir los números impares dentro de un ciclo `while`, puedes usar `continue`:\n\tlet i = 0;\n\twhile (i <= 10) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}"
            ]
        },
        {
            "tag": "estructura_basica_do_while_js",
            "patterns": [
                "como se usa un ciclo do while en js",
                "dame un ejemplo de un ciclo do while en javascript",
                "como funciona el ciclo do while en js",
                "como se estructura un ciclo do while en javascript"
            ],
            "responses": [
                "La estructura básica de un ciclo `do-while` es la siguiente:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);\nEl ciclo ejecuta el código dentro del bloque `do` al menos una vez, y luego evalúa la condición del `while`.",
                "Ejemplo básico de un ciclo `do-while`:\n\tlet numero = 0;\n\tdo {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 3);",
                "Un ciclo `do-while` asegura que el bloque de código se ejecute al menos una vez, incluso si la condición es falsa desde el principio:\n\tlet contador = 0;\n\tdo {\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador > 3);"
            ]
        },
        {
            "tag": "condiciones_en_do_while_js",
            "patterns": [
                "como poner una condicion dentro de un ciclo do while en js",
                "dame ejemplos de condiciones dentro de un ciclo do while en js",
                "como usar condicionales en un do while en javascript",
                "como evaluar condiciones en un ciclo do while en js"
            ],
            "responses": [
                "Puedes poner una condición dentro del `do-while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Ejemplo de cómo poner una condición en un ciclo `do-while` para evaluar si el número es par:\n\tlet numero = 1;\n\tdo {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t} while (numero <= 10);",
                "Puedes usar una condición para salir del ciclo con `break` si se cumple alguna condición:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
            ]
        },
        {
            "tag": "uso_break_en_do_while_js",
            "patterns": [
                "como usar break en un ciclo do while en js",
                "dame un ejemplo de break en un ciclo do while en javascript",
                "como detener un ciclo do while con break en js",
                "como salir de un ciclo do while en javascript"
            ],
            "responses": [
                "Puedes usar `break` para salir de un ciclo `do-while` cuando se cumpla una condición:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero === 2) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
                "Un ejemplo de cómo salir de un ciclo `do-while` con `break`:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
            ]
        },
        {
            "tag": "uso_continue_en_do_while_js",
            "patterns": [
                "como usar continue en un ciclo do while en js",
                "dame un ejemplo de continue en un ciclo do while en javascript",
                "como saltar una iteracion con continue en do while en js",
                "como funciona el continue en un ciclo do while en javascript"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `do-while`:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
                "Si deseas omitir números impares dentro de un ciclo `do-while`, puedes usar `continue`:\n\tlet i = 0;\n\tdo {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i <= 10);"
            ]
        },
        {
            "tag": "estructura_basica_switch_js",
            "patterns": [
                "como usar un switch en js",
                "dame un ejemplo de switch en javascript",
                "como funciona el switch en js",
                "como se estructura un switch en javascript"
            ],
            "responses": [
                "La estructura básica de un `switch` es la siguiente:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Miércoles');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
                "Ejemplo básico de un `switch`:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "Un `switch` en javascript evalúa una expresión y compara su valor con las condiciones (`case`), si coincide ejecuta ese bloque de código:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "uso_break_en_switch_js",
            "patterns": [
                "como usar break en un switch en js",
                "dame un ejemplo de break en un switch en javascript",
                "como salir de un switch con break en js",
                "como terminar un caso en switch en javascript",
                "para que se usa el break en un switch en js"
            ],
            "responses": [
                "Dentro de un `switch`, el `break` se usa para salir de la estructura después de ejecutar un bloque de código para un `case`:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
                "Un `break` evita que el `switch` siga evaluando casos después de encontrar el primero que coincide:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "El `break` es fundamental en un `switch` para evitar la ejecución del siguiente `case` sin importar que la condición no coincida:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "uso_default_en_switch_js",
            "patterns": [
                "como usar default en un switch en js",
                "dame un ejemplo de default en un switch en javascript",
                "como manejar valores no esperados en switch con default en js",
                "como usar el caso default en switch en javascript"
            ],
            "responses": [
                "El `default` en un `switch` maneja cualquier valor que no coincida con ninguno de los `case`. Ejemplo:\n\tlet mes = 10;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
                "Usar `default` permite manejar cualquier caso no previsto. Ejemplo:\n\tlet numero = 7;\n\tswitch (numero) {\n\t\tcase 1:\n\t\t\tconsole.log('Uno');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Dos');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Número no reconocido');\n\t}",
                "El `default` es útil para manejar cualquier entrada inesperada que no coincida con un `case` específico:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
            ]
        },
        {
            "tag": "multiples_casos_en_switch_js",
            "patterns": [
                "como manejar multiples casos en un switch en js",
                "dame un ejemplo de switch con varios casos en javascript",
                "como agrupar varios casos en un switch en js",
                "como usar varios casos en un switch en javascript"
            ],
            "responses": [
                "Puedes manejar múltiples casos en un `switch` agrupándolos sin usar `break` entre ellos:\n\tlet fruta = 'manzana';\n\tswitch (fruta) {\n\t\tcase 'manzana':\n\t\tcase 'pera':\n\t\t\tconsole.log('Es una fruta');\n\t\t\tbreak;\n\t\tcase 'zanahoria':\n\t\t\tconsole.log('Es un vegetal');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('No se reconoció la entrada');\n\t}",
                "Agrupar varios casos es útil si deseas ejecutar el mismo código para varias opciones:\n\tlet numero = 3;\n\tswitch (numero) {\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\t\tconsole.log('Número 1, 2 o 3');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Otro número');\n\t}",
                "Ejemplo de cómo agrupar múltiples `case` para ejecutar la misma acción:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'verde':\n\t\tcase 'amarillo':\n\t\t\tconsole.log('Color cálido');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color frío');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
            ]
        },
        {
            "tag": "declaracion_basica_funcion_js",
            "patterns": [
                "como declarar una funcion en javascript",
                "dame un ejemplo de una funcion en js",
                "como crear una funcion en javascript",
                "cual es la sintaxis para declarar una funcion en js"
            ],
            "responses": [
                "La sintaxis básica para declarar una función en javascript es la siguiente:\n\tfunction saludo() {\n\t\tconsole.log('Hola, mundo');\n\t}",
                "Un ejemplo de una función básica en javascript:\n\tfunction calcularSuma(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
                "Para declarar una función en javascript, simplemente utiliza la palabra clave `function`:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola ' + nombre);\n\t}"
            ]
        },
        {
            "tag": "declaracion_funcion_con_parametros_js",
            "patterns": [
                "como declarar una funcion con parametros en js",
                "dame un ejemplo de una funcion con parametros en javascript",
                "como pasar parametros a una funcion en js",
                "como crear una funcion con parametros en javascript"
            ],
            "responses": [
                "Para declarar una función con parámetros en javascript, se colocan los parámetros entre paréntesis después del nombre de la función:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
                "Ejemplo de una función con parámetros:\n\tfunction multiplicar(a: number, b: number): number {\n\t\treturn a * b;\n\t}",
                "Los parámetros se definen entre paréntesis en la declaración de la función:\n\tfunction mostrarMensaje(mensaje: string): void {\n\t\tconsole.log(mensaje);\n\t}"
            ]
        },
        {
            "tag": "funciones_con_tipado_de_retorno_js",
            "patterns": [
                "como declarar una funcion con tipo de retorno en js",
                "dame un ejemplo de funcion con tipo de retorno en javascript",
                "como especificar el tipo de retorno de una funcion en js",
                "como devolver un valor de una funcion en javascript"
            ],
            "responses": [
                "Para especificar el tipo de retorno de una función en javascript, se coloca el tipo después de los paréntesis:\n\tfunction sumar(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
                "Ejemplo de función con tipo de retorno:\n\tfunction obtenerNombre(): string {\n\t\treturn 'Juan';\n\t}",
                "En javascript, puedes especificar el tipo de retorno de la siguiente manera:\n\tfunction esPositivo(numero: number): boolean {\n\t\treturn numero > 0;\n\t}"
            ]
        },
        {
            "tag": "funciones_con_valores_por_defecto_js",
            "patterns": [
                "como declarar una funcion con valores por defecto en js",
                "dame un ejemplo de funcion con parametros por defecto en javascript",
                "como poner valores por defecto en una funcion en js",
                "como asignar un valor por defecto a un parametro en javascript"
            ],
            "responses": [
                "Puedes asignar valores por defecto a los parámetros de la siguiente manera:\n\tfunction saludar(nombre: string = 'Juan'): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
                "Ejemplo de función con valores por defecto:\n\tfunction calcularPrecio(precio: number, descuento: number = 0): number {\n\t\treturn precio - (precio * descuento);\n\t}",
                "Si un parámetro no se pasa, se utilizará el valor por defecto asignado:\n\tfunction mostrarDetalles(producto: string = 'Producto A'): void {\n\t\tconsole.log('Detalles del ' + producto);\n\t}"
            ]
        },
        {
            "tag": "funciones_anonimas_js",
            "patterns": [
                "como declarar una funcion anonima en js",
                "dame un ejemplo de una funcion anonima en javascript",
                "como usar funciones anonimas en js",
                "que es una funcion anonima en javascript"
            ],
            "responses": [
                "Una función anónima en javascript se declara sin nombre:\n\tlet suma = function(a: number, b: number): number {\n\t\treturn a + b;\n\t};",
                "Ejemplo de función anónima asignada a una variable:\n\tlet saludo = function(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
                "Una función anónima es útil cuando necesitas pasar una función como argumento o asignarla a una variable:\n\tlet multiplicar = function(a: number, b: number): number {\n\t\treturn a * b;\n\t};"
            ]
        },
        {
            "tag": "funciones_flecha_js",
            "patterns": [
                "como usar una funcion flecha en js",
                "dame un ejemplo de una funcion flecha en javascript",
                "como declarar una funcion flecha en js",
                "que son las funciones flecha en javascript"
            ],
            "responses": [
                "Las funciones flecha en javascript tienen una sintaxis más corta. Ejemplo:\n\tlet suma = (a: number, b: number): number => {\n\t\treturn a + b;\n\t};",
                "Un ejemplo de función flecha en javascript:\n\tlet saludo = (nombre: string): void => {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
                "Las funciones flecha son útiles cuando deseas una función más concisa:\n\tlet multiplicar = (a: number, b: number): number => a * b;"
            ]
        },
        {
            "tag": "funciones_recursivas_js",
            "patterns": [
                "como declarar una funcion recursiva en js",
                "dame un ejemplo de funcion recursiva en javascript",
                "como hacer que una funcion se llame a si misma en js",
                "como crear una funcion recursiva en javascript"
            ],
            "responses": [
                "Una función recursiva es aquella que se llama a sí misma. Ejemplo:\n\tfunction factorial(n: number): number {\n\t\tif (n === 0) return 1;\n\t\treturn n * factorial(n - 1);\n\t}",
                "Ejemplo de una función recursiva para calcular la suma de los números del 1 al `n`:\n\tfunction sumaRecursiva(n: number): number {\n\t\tif (n === 1) return 1;\n\t\treturn n + sumaRecursiva(n - 1);\n\t}",
                "Una función recursiva puede ser útil para resolver problemas complejos que se pueden dividir en subproblemas más simples:\n\tfunction fibonacci(n: number): number {\n\t\tif (n <= 1) return n;\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2);\n\t}"
            ]
        },
        {
            "tag": "declaracion_objeto_js",
            "patterns": [
                "como declarar un objeto en javascript",
                "dame un ejemplo de objeto en js",
                "como crear un objeto en javascript",
                "cual es la sintaxis para declarar un objeto en js"
            ],
            "responses": [
                "En javascript, puedes declarar un objeto de la siguiente manera:\n\tlet persona = { nombre: 'Juan', edad: 25 };",
                "Ejemplo básico de un objeto:\n\tlet libro = { titulo: 'javascript para principiantes', autor: 'Juan Pérez', anio: 2021 };",
                "La sintaxis para declarar un objeto es la siguiente:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };"
            ]
        },
        {
            "tag": "tipado_objeto_js",
            "patterns": [
                "como tipar un objeto en javascript",
                "dame un ejemplo de un objeto tipado en js",
                "como usar tipos en un objeto en javascript",
                "como declarar un objeto con tipos en js"
            ],
            "responses": [
                "Para tipar un objeto en javascript, puedes usar una interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
                "Puedes tipar un objeto de la siguiente manera:\n\tlet coche: { marca: string; modelo: string; anio: number } = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };",
                "Un ejemplo de tipado usando interfaces:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet miLibro: Libro = { titulo: 'javascript para todos', autor: 'Pedro' };"
            ]
        },
        {
            "tag": "propiedades_opcionales_objeto_js",
            "patterns": [
                "como declarar propiedades opcionales en un objeto en js",
                "dame un ejemplo de un objeto con propiedades opcionales en javascript",
                "como hacer que una propiedad de un objeto sea opcional en js",
                "como declarar una propiedad opcional en un objeto en javascript"
            ],
            "responses": [
                "Puedes declarar propiedades opcionales usando `?` en la interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan' };",
                "Ejemplo de propiedad opcional:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tanio?: number;\n\t}\n\tlet coche: Coche = { marca: 'Toyota', modelo: 'Corolla' };",
                "Al declarar un objeto con propiedades opcionales:\n\tinterface Usuario {\n\t\tnombre: string;\n\t\tedad?: number;\n\t\temail?: string;\n\t}\n\tlet usuario: Usuario = { nombre: 'Ana' };"
            ]
        },
        {
            "tag": "metodos_objeto_js",
            "patterns": [
                "como agregar metodos a un objeto en javascript",
                "dame un ejemplo de un objeto con metodos en js",
                "como declarar un metodo dentro de un objeto en js",
                "como hacer que un objeto tenga metodos en javascript"
            ],
            "responses": [
                "Puedes agregar métodos dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "acceso_propiedades_objeto_js",
            "patterns": [
                "como acceder a una propiedad de un objeto en javascript",
                "dame un ejemplo de acceso a propiedades de un objeto en js",
                "como obtener el valor de una propiedad de un objeto en javascript",
                "como leer propiedades de un objeto en js"
            ],
            "responses": [
                "Puedes acceder a las propiedades de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tconsole.log(persona.nombre);",
                "Ejemplo de acceso a propiedades:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tconsole.log(coche.marca);",
                "También puedes usar la notación de corchetes para acceder a las propiedades:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tconsole.log(libro['titulo']);"
            ]
        },
        {
            "tag": "modificacion_propiedades_objeto_js",
            "patterns": [
                "como modificar una propiedad de un objeto en javascript",
                "dame un ejemplo de modificar propiedades en un objeto en js",
                "como cambiar el valor de una propiedad de un objeto en javascript",
                "como actualizar propiedades de un objeto en js"
            ],
            "responses": [
                "Puedes modificar una propiedad de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tpersona.edad = 30;",
                "Ejemplo de modificación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tcoche.modelo = 'Camry';",
                "Para cambiar el valor de una propiedad puedes hacer:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tlibro.titulo = 'javascript avanzado';"
            ]
        },
        {
            "tag": "eliminar_propiedad_objeto_js",
            "patterns": [
                "como eliminar una propiedad de un objeto en javascript",
                "dame un ejemplo de eliminar una propiedad en un objeto en js",
                "como borrar una propiedad de un objeto en javascript",
                "como quitar una propiedad de un objeto en js"
            ],
            "responses": [
                "Puedes eliminar una propiedad de un objeto utilizando el operador `delete`:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tdelete persona.edad;",
                "Ejemplo de eliminación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tdelete coche.modelo;",
                "Usa el operador `delete` para eliminar propiedades:\n\tlet libro = { titulo: 'javascript', autor: 'Juan' };\n\tdelete libro.autor;"
            ]
        },
        {
            "tag": "propiedades_solo_lectura_objeto_js",
            "patterns": [
                "como declarar propiedades de solo lectura en un objeto en javascript",
                "dame un ejemplo de un objeto con propiedades readonly en js",
                "como hacer que una propiedad sea de solo lectura en javascript",
                "como declarar un objeto con propiedades readonly en js"
            ],
            "responses": [
                "Puedes declarar propiedades de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
                "Ejemplo de objeto con propiedades de solo lectura:\n\tlet coche: { readonly marca: string; modelo: string } = { marca: 'Toyota', modelo: 'Corolla' };",
                "La palabra clave `readonly` asegura que una propiedad no pueda ser modificada:\n\tlet libro: { readonly titulo: string; autor: string } = { titulo: 'javascript', autor: 'Juan' };"
            ]
        },
        {
            "tag": "declaracion_metodos_objeto_js",
            "patterns": [
                "como declarar un metodo dentro de un objeto en javascript",
                "dame un ejemplo de un objeto con metodo en javascript",
                "como agregar un metodo a un objeto en js",
                "como hacer que un objeto tenga un metodo en javascript"
            ],
            "responses": [
                "Puedes declarar un método dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_flecha_objeto_js",
            "patterns": [
                "como declarar un metodo de flecha en un objeto en javascript",
                "dame un ejemplo de metodo de flecha en un objeto en javascript",
                "como usar metodos de flecha en objetos en javascript",
                "como hacer que un objeto tenga un metodo de flecha en js"
            ],
            "responses": [
                "Puedes usar una función flecha como método de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: () => {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de método de flecha:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: () => {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Los métodos de flecha no tienen su propio `this`, por lo que se puede usar en situaciones como esta:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: () => {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_parametros_objeto_js",
            "patterns": [
                "como declarar un metodo con parametros en un objeto en javascript",
                "dame un ejemplo de metodo con parametros en un objeto en javascript",
                "como pasar parametros a un metodo dentro de un objeto en javascript",
                "como hacer que un metodo reciba parametros en un objeto en js"
            ],
            "responses": [
                "Puedes agregar parámetros a un método en un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tcambiarNombre: function(nuevoNombre) {\n\t\t\tthis.nombre = nuevoNombre;\n\t\t}\n\t};",
                "Ejemplo de un método con parámetros:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tcambiarModelo: function(nuevoModelo) {\n\t\t\tthis.modelo = nuevoModelo;\n\t\t}\n\t};",
                "Puedes definir un método con parámetros de esta forma:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\tactualizarTitulo: function(nuevoTitulo) {\n\t\t\tthis.titulo = nuevoTitulo;\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_solo_lectura_objeto_js",
            "patterns": [
                "como declarar un metodo de solo lectura en un objeto en javascript",
                "dame un ejemplo de metodo solo lectura en un objeto en javascript",
                "como hacer que un metodo sea de solo lectura en un objeto en javascript",
                "como declarar un metodo readonly en un objeto en js"
            ],
            "responses": [
                "Para hacer que un método sea de solo lectura puedes utilizar `readonly` en el método:\n\tlet persona = {\n\t\treadonly nombre: string;\n\t\tedad: number,\n\t\tgetNombre: function() {\n\t\t\treturn this.nombre;\n\t\t}\n\t};",
                "Ejemplo de método de solo lectura:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tgetMarca: function() {\n\t\t\treturn this.marca;\n\t\t}\n\t};",
                "Puedes declarar un método de solo lectura así:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tgetTitulo: function() {\n\t\t\treturn this.titulo;\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_asincronos_objeto_js",
            "patterns": [
                "como declarar un metodo asincrono en un objeto en javascript",
                "dame un ejemplo de metodo asincrono en un objeto en javascript",
                "como usar async y await en un metodo dentro de un objeto en javascript",
                "como hacer un metodo asincrono dentro de un objeto en js"
            ],
            "responses": [
                "Puedes declarar un método asíncrono en un objeto utilizando `async` y `await`:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tasync obtenerNombre() {\n\t\t\tlet resultado = await fetch('url');\n\t\t\treturn resultado.json();\n\t\t}\n\t};",
                "Ejemplo de un método asincrono:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tasync obtenerModelo() {\n\t\t\tlet respuesta = await fetch('url');\n\t\t\treturn respuesta.json();\n\t\t}\n\t};",
                "Puedes utilizar `async` y `await` para manejar tareas asincrónicas en un método:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tasync obtenerDetalles() {\n\t\t\tlet detalles = await fetch('url');\n\t\t\treturn detalles.json();\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "metodos_staticos_objeto_js",
            "patterns": [
                "como declarar un metodo estatico en un objeto en javascript",
                "dame un ejemplo de metodo estatico en un objeto en javascript",
                "como usar metodos staticos en objetos en javascript",
                "como declarar un metodo estatico en js"
            ],
            "responses": [
                "Puedes declarar un método estático utilizando `static`:\n\tclass Persona {\n\t\tstatic saludar() {\n\t\t\tconsole.log('Hola');\n\t\t}\n\t}\n\tPersona.saludar();",
                "Ejemplo de un método estático:\n\tclass Coche {\n\t\tstatic mostrarInfo() {\n\t\t\tconsole.log('Información del coche');\n\t\t}\n\t}\n\tCoche.mostrarInfo();",
                "Métodos estáticos se pueden declarar en una clase como este ejemplo:\n\tclass Libro {\n\t\tstatic mostrarTitulo() {\n\t\t\tconsole.log('Título del libro');\n\t\t}\n\t}\n\tLibro.mostrarTitulo();"
            ]
        },
        {
            "tag": "metodos_this_objeto_js",
            "patterns": [
                "como usar this dentro de un metodo en js",
                "dame un ejemplo de un metodo con this en un objeto en javascript",
                "como hacer que un metodo acceda a propiedades usando this en javascript",
                "como funciona this dentro de un metodo en javascript"
            ],
            "responses": [
                "Dentro de un método, `this` hace referencia al objeto actual:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tmostrarEdad: function() {\n\t\t\tconsole.log(this.edad);\n\t\t}\n\t};",
                "Ejemplo de uso de `this`:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarMarca: function() {\n\t\t\tconsole.log(this.marca);\n\t\t}\n\t};",
                "Cuando usas `this`, accedes a las propiedades del objeto al que pertenece el método:\n\tlet libro = {\n\t\ttitulo: 'javascript',\n\t\tmostrarTitulo: function() {\n\t\t\tconsole.log(this.titulo);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "declaracion_basica_interface_js",
            "patterns": [
                "como declarar una interface en javascript",
                "dame un ejemplo de como declarar una interface en js",
                "como se declara una interface en javascript",
                "ensename un ejemplo de una interface en javascript"
            ],
            "responses": [
                "Puedes declarar una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
                "Ejemplo básico de una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Una interface se declara así:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "extension_interfaces_js",
            "patterns": [
                "como extender una interface en javascript",
                "dame un ejemplo de extension de interface en javascript",
                "como hacer que una interface herede otra en js",
                "puedes extender una interface en javascript"
            ],
            "responses": [
                "Puedes extender una interface utilizando `extends`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tinterface Empleado extends Persona {\n\t\tpuesto: string;\n\t}\n\tlet empleado: Empleado = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tpuesto: 'Desarrollador'\n\t};",
                "Ejemplo de extensión de interfaces:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tinterface Deportivo extends Coche {\n\t\tvelocidadMaxima: number;\n\t}\n\tlet cocheDeportivo: Deportivo = {\n\t\tmarca: 'Ferrari',\n\t\tmodelo: 'F8',\n\t\tvelocidadMaxima: 340\n\t};",
                "Una interface puede extender a otra para agregar más propiedades:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tinterface Ebook extends Libro {\n\t\ttamanoMB: number;\n\t}\n\tlet ebook: Ebook = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\ttamanoMB: 10\n\t};"
            ]
        },
        {
            "tag": "interfaces_metodos_js",
            "patterns": [
                "como declarar un metodo en una interface en javascript",
                "dame un ejemplo de una interface con metodo en javascript",
                "como agregar metodos a una interface en js",
                "se pueden declarar metodos en una interface en javascript"
            ],
            "responses": [
                "Puedes declarar métodos dentro de una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t\tsaludar(): void;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
                "Ejemplo de una interface con método:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tmostrarInfo(): void;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
                "Puedes declarar una interface con un método como este:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\timprimirInfo(): void;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
            ]
        },
        {
            "tag": "interfaces_propiedades_opcionales_js",
            "patterns": [
                "como declarar propiedades opcionales en una interface en javascript",
                "dame un ejemplo de propiedades opcionales en una interface en javascript",
                "como hacer que una propiedad sea opcional en una interface en js",
                "se pueden hacer propiedades opcionales en una interface en javascript"
            ],
            "responses": [
                "Puedes hacer que una propiedad sea opcional usando el signo `?`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan'\n\t};",
                "Ejemplo de propiedad opcional en una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tcolor?: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Para declarar propiedades opcionales puedes usar `?`:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\tfechaPublicacion?: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "interfaces_propiedades_readonly_js",
            "patterns": [
                "como declarar propiedades de solo lectura en una interface en javascript",
                "dame un ejemplo de propiedad readonly en una interface en javascript",
                "como hacer que una propiedad sea readonly en una interface en js",
                "se pueden hacer propiedades readonly en una interface en javascript"
            ],
            "responses": [
                "Puedes hacer que una propiedad sea de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
                "Ejemplo de propiedad de solo lectura:\n\tinterface Coche {\n\t\treadonly marca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
                "Para declarar propiedades de solo lectura puedes usar `readonly`:\n\tinterface Libro {\n\t\treadonly titulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'javascript',\n\t\tautor: 'Juan'\n\t};"
            ]
        },
        {
            "tag": "interfaces_indices_js",
            "patterns": [
                "como declarar indices en una interface en javascript",
                "dame un ejemplo de propiedad con indice en una interface en javascript",
                "como usar indices para propiedades en una interface en js",
                "se pueden declarar propiedades con indice en una interface en javascript"
            ],
            "responses": [
                "Puedes declarar índices utilizando la siguiente sintaxis:\n\tinterface Persona {\n\t\t[nombre: string]: number;\n\t}\n\tlet edades: Persona = {\n\t\t'Juan': 25,\n\t\t'Ana': 30\n\t};",
                "Ejemplo con índice en una interface:\n\tinterface Coche {\n\t\t[modelo: string]: number;\n\t}\n\tlet precios: Coche = {\n\t\t'Corolla': 25000,\n\t\t'Camry': 35000\n\t};",
                "Para usar índices en una interface puedes hacer lo siguiente:\n\tinterface Libro {\n\t\t[autor: string]: string;\n\t}\n\tlet autoresLibros: Libro = {\n\t\t'Juan': 'javascript',\n\t\t'Pedro': 'javascript'\n\t};"
            ]
        },
        {
            "tag": "interfaces_funciones_js",
            "patterns": [
                "como usar una interface en una funcion en javascript",
                "dame un ejemplo de funcion con interface en javascript",
                "como aplicar una interface a una funcion en js",
                "se pueden utilizar interfaces con funciones en javascript"
            ],
            "responses": [
                "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
                "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
                "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'javascript', autor: 'Juan'});"
            ]
        },
        {
            "tag": "interfaces_funciones_js",
            "patterns": [
                "como usar una interface en una funcion en javascript",
                "dame un ejemplo de funcion con interface en javascript",
                "como aplicar una interface a una funcion en js",
                "se pueden utilizar interfaces con funciones en javascript"
            ],
            "responses": [
                "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
                "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
                "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'javascript', autor: 'Juan'});"
            ]
        },
        {
            "tag": "declaracion_basica_enum_js",
            "patterns": [
                "como declarar un enum en js",
                "dame un ejemplo de un enum en javascript",
                "como se declara un enum en javascript",
                "ensename un ejemplo de un enum en javascript"
            ],
            "responses": [
                "Puedes declarar un enum de esta manera:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo básico de un enum:\n\tenum Estado {\n\t\tActivo,\n\t\tInactivo,\n\t\tPendiente\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum en javascript se declara así:\n\tenum Color {\n\t\tRojo,\n\t\tVerde,\n\t\tAzul\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "enum_valores_especificos_js",
            "patterns": [
                "como asignar valores a un enum en javascript",
                "dame un ejemplo de enum con valores especificos en javascript",
                "como asignar un valor a cada elemento en un enum en js",
                "puedes asignar valores a un enum en javascript"
            ],
            "responses": [
                "Puedes asignar valores a los elementos de un enum de esta manera:\n\tenum Direccion {\n\t\tArriba = 1,\n\t\tAbajo = 2,\n\t\tIzquierda = 3,\n\t\tDerecha = 4\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo de enum con valores específicos:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum con valores específicos se declara así:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "enum_cadenas_texto_js",
            "patterns": [
                "como declarar un enum con cadenas de texto en javascript",
                "dame un ejemplo de enum con cadenas en javascript",
                "como asignar cadenas de texto en un enum en js",
                "puedes usar cadenas de texto en un enum en javascript"
            ],
            "responses": [
                "Puedes usar cadenas de texto en un enum así:\n\tenum Direccion {\n\t\tArriba = 'ARRIBA',\n\t\tAbajo = 'ABAJO',\n\t\tIzquierda = 'IZQUIERDA',\n\t\tDerecha = 'DERECHA'\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
                "Ejemplo de enum con cadenas de texto:\n\tenum Estado {\n\t\tActivo = 'activo',\n\t\tInactivo = 'inactivo',\n\t\tPendiente = 'pendiente'\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
                "Un enum con cadenas de texto se declara de esta manera:\n\tenum Color {\n\t\tRojo = 'rojo',\n\t\tVerde = 'verde',\n\t\tAzul = 'azul'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
            ]
        },
        {
            "tag": "acceso_valores_enum_js",
            "patterns": [
                "como acceder a un valor de un enum en javascript",
                "dame un ejemplo de acceso a valores de un enum en javascript",
                "como obtener el valor de un enum en js",
                "puedes acceder a los valores de un enum en javascript"
            ],
            "responses": [
                "Puedes acceder a un valor de un enum así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tconsole.log(miDireccion); // 0",
                "Ejemplo de acceso a un valor de un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tconsole.log(estadoUsuario); // 1",
                "Para acceder a un valor de un enum, puedes hacer lo siguiente:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;\n\tconsole.log(colorFavorito); // '#00FF00'"
            ]
        },
        {
            "tag": "iteracion_enum_js",
            "patterns": [
                "como iterar sobre los valores de un enum en javascript",
                "dame un ejemplo de iteracion de un enum en javascript",
                "como recorrer un enum en js",
                "puedes iterar sobre los valores de un enum en javascript"
            ],
            "responses": [
                "Puedes iterar sobre los valores de un enum utilizando `for...in`:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tfor (let direccion in Direccion) {\n\t\tconsole.log(direccion);\n\t}",
                "Ejemplo de iteración sobre un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tfor (let estado in Estado) {\n\t\tconsole.log(estado);\n\t}",
                "Puedes recorrer los valores de un enum de esta manera:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tfor (let color in Color) {\n\t\tconsole.log(color);\n\t}"
            ]
        },
        {
            "tag": "enum_switch_js",
            "patterns": [
                "como usar un enum en un switch en javascript",
                "dame un ejemplo de uso de enum en un switch en javascript",
                "como aplicar un enum en un switch en js",
                "puedes usar enums en un switch en javascript"
            ],
            "responses": [
                "Puedes usar un enum en un switch así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tswitch (miDireccion) {\n\t\tcase Direccion.Arriba:\n\t\t\tconsole.log('Vas hacia arriba');\n\t\t\tbreak;\n\t\tcase Direccion.Abajo:\n\t\t\tconsole.log('Vas hacia abajo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Dirección desconocida');\n\t}",
                "Ejemplo de uso de enum en un switch:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tswitch (estadoUsuario) {\n\t\tcase Estado.Activo:\n\t\t\tconsole.log('El usuario está activo');\n\t\t\tbreak;\n\t\tcase Estado.Inactivo:\n\t\t\tconsole.log('El usuario está inactivo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Estado desconocido');\n\t}",
                "Un ejemplo con enum en un switch sería:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Rojo;\n\tswitch (colorFavorito) {\n\t\tcase Color.Rojo:\n\t\t\tconsole.log('Color favorito es rojo');\n\t\t\tbreak;\n\t\tcase Color.Verde:\n\t\t\tconsole.log('Color favorito es verde');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
            ]
        },
        {
            "tag": "busqueda_secuencial_paso_a_paso",
            "patterns": [
                "explicame paso a paso la busqueda secuencial en javascript",
                "como funciona la busqueda secuencial paso a paso en js",
                "puedes darme un ejemplo paso a paso de busqueda secuencial",
                "como es el flujo de busqueda secuencial en javascript",
                "quiero entender la busqueda secuencial paso a paso"
            ],
            "responses": [
                "Aquí tienes el algoritmo de búsqueda secuencial explicado paso a paso:\n\n1. **Definimos la función**:\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n\nEsta función recibe un arreglo y el valor que queremos buscar.\n\n2. **Recorremos el arreglo usando un bucle**:\n\nfor (let i = 0; i < arreglo.length; i++) {\n\nIteramos sobre cada elemento del arreglo, usando el índice `i` para acceder a los valores.\n\n3. **Verificamos si el valor actual es el buscado**:\n\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n\nComparamos el valor actual con el valor buscado. Si coinciden, devolvemos el índice.\n\n4. **Devolvemos -1 si no encontramos el valor**:\n\nreturn -1; // Si no se encuentra el valor\n\nEsto indica que el valor no está en el arreglo.\n\n5. **Ejemplo completo**:\n\nconst numeros = [4, 2, 7, 9, 5];\nconst resultado = busquedaSecuencial(numeros, 7);\nconsole.log(resultado); // Salida: 2\n"
            ]
        },
        {
            "tag": "ciclo_for_busqueda_secuencial",
            "patterns": [
                "como se implementa el ciclo for en la busqueda secuencial en js",
                "puedes darme solo el ciclo for del algoritmo de busqueda secuencial en js",
                "como recorre el arreglo la busqueda secuencial en js",
                "quiero ver el bucle de la busqueda secuencial en js",
                "dame la parte del ciclo for de la busqueda secuencialen en js"
            ],
            "responses": [
                "El ciclo for en la búsqueda secuencial recorre el arreglo elemento por elemento:\n\n\nfor (let i = 0; i < arreglo.length; i++) {\n    // Aquí se evalúan los elementos uno por uno\n}\n"
            ]
        },
        {
            "tag": "condicional_if_busqueda_secuencial",
            "patterns": [
                "como funciona el condicional if en la busqueda secuencial en js",
                "puedes darme el condicional if del algoritmo de busqueda secuencial en js",
                "como verifica si el valor es el buscado en la busqueda secuencial en js",
                "quiero ver la condicion if de la busqueda secuencial en js",
                "dame la parte del if en la busqueda secuencial en js"
            ],
            "responses": [
                "El condicional if verifica si el valor actual es el buscado:\n\n\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_secuencial",
            "patterns": [
                "que pasa si no se encuentra el valor en la busqueda secuencial en js",
                "puedes darme la parte donde no encuentra el valor en js",
                "como retorna -1 en la busqueda secuencial en js",
                "quiero ver la devolucion de -1 en el algoritmo de busqueda secuencial en js",
                "dame la parte donde no encuentra el valor en la busqueda secuencial en js"
            ],
            "responses": [
                "Si el valor no se encuentra, el algoritmo devuelve -1:\n\n\nreturn -1; // Si no se encuentra el valor\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_secuencial",
            "patterns": [
                "como se define la funcion en la busqueda secuencial en js",
                "puedes darme solo la parte donde se define la funcion en js",
                "como empieza la busqueda secuencial en js",
                "quiero ver la cabecera de la funcion de busqueda secuencial en js",
                "dame la parte donde se define la funcion en busqueda secuencial en js"
            ],
            "responses": [
                "La función de búsqueda secuencial se define así:\n\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "argumentos_busqueda_secuencial",
            "patterns": [
                "que argumentos recibe la busqueda secuencial en js",
                "puedes explicarme los parametros de la busqueda secuencial en js",
                "como funcionan los argumentos en el algoritmo de busqueda secuencial en js",
                "que parametros necesita la funcion de busqueda secuencial en js",
                "dame los argumentos de la busqueda secuencial en js"
            ],
            "responses": [
                "La función de búsqueda secuencial recibe dos argumentos:\n\n1. **arreglo**: Es el arreglo que será recorrido.\n2. **valorBuscado**: Es el valor que queremos encontrar.\n\nEjemplo:\n\nbusquedaSecuencial([4, 2, 7, 9], 7);\n"
            ]
        },
        {
            "tag": "indice_encontrado_busqueda_secuencial",
            "patterns": [
                "como devuelve el indice encontrado en busqueda secuencial en js",
                "puedes darme la parte donde retorna el indice en la busqueda secuencial en js",
                "que hace cuando encuentra el valor buscado en la busqueda secuencial en js",
                "quiero ver como devuelve el indice encontrado en busqueda secuencial en js",
                "dame la parte donde retorna el indice en busqueda secuencial en js"
            ],
            "responses": [
                "Cuando el valor buscado es encontrado, la función devuelve el índice:\n\n\nreturn i; // Devuelve el índice donde se encontró el valor\n"
            ]
        },
        {
            "tag": "uso_practico_busqueda_secuencial",
            "patterns": [
                "como uso la busqueda secuencial en un caso practico en js",
                "puedes darme un ejemplo practico de busqueda secuencial en js",
                "que necesito para probar la busqueda secuencial en js",
                "quiero ver como se usa la busqueda secuencial en un programa en js",
                "dame un ejemplo de uso de busqueda secuencial en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo práctico del uso de la búsqueda secuencial:\n\n\nconst numeros = [1, 3, 5, 7, 9];\nconst valorBuscado = 7;\nconst resultado = busquedaSecuencial(numeros, valorBuscado);\n\nif (resultado !== -1) {\n    console.log(`Valor encontrado en el índice ${resultado}`);\n} else {\n    console.log('Valor no encontrado');\n}\n\nEsto muestra si el valor fue encontrado y su índice, o indica que no está presente."
            ]
        },
        {
            "tag": "complejidad_busqueda_secuencial",
            "patterns": [
                "cual es la complejidad de la busqueda secuencial",
                "puedes explicarme la eficiencia de la busqueda secuencial",
                "que tan eficiente es el algoritmo de busqueda secuencial",
                "quiero saber la complejidad de busqueda secuencial",
                "dame la complejidad temporal de la busqueda secuencial"
            ],
            "responses": [
                "La complejidad de la búsqueda secuencial es:\n\n- **Mejor caso**: O(1), cuando el valor buscado está en el primer elemento.\n- **Peor caso**: O(n), cuando el valor está al final o no está en el arreglo.\n- **Caso promedio**: O(n/2), que se simplifica a O(n).\n\nEsto la hace poco eficiente para arreglos grandes si el valor buscado no está cerca del inicio."
            ]
        },
        {
            "tag": "busqueda_binaria_js",
            "patterns": [
                "como funciona la busqueda binaria en javascript",
                "que es la busqueda binaria en js",
                "puedes explicarme el algoritmo de busqueda binaria en javascript",
                "dame el codigo del algoritmo de busqueda binaria en js",
                "como implemento la busqueda binaria en javascript"
            ],
            "responses": [
                "La búsqueda binaria es un algoritmo eficiente para encontrar un elemento en un arreglo ordenado. Se divide el rango de búsqueda a la mitad en cada paso. Aquí tienes el código básico en javascript:\n\n\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    let inicio = 0;\n    let fin = arreglo.length - 1;\n\n    while (inicio <= fin) {\n        let medio = Math.floor((inicio + fin) / 2);\n\n        if (arreglo[medio] === valorBuscado) {\n            return medio; // Devuelve el índice si encuentra el valor\n        } else if (arreglo[medio] < valorBuscado) {\n            inicio = medio + 1; // Ajusta el inicio\n        } else {\n            fin = medio - 1; // Ajusta el final\n        }\n    }\n\n    return -1; // Retorna -1 si el valor no está presente\n}\n\n// Ejemplo de uso\nconst numeros = [1, 3, 5, 7, 9];\nconst resultado = busquedaBinaria(numeros, 7);\nconsole.log(resultado); // Salida: 3\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_binaria_js",
            "patterns": [
                "como se define la funcion en la busqueda binaria en javascript",
                "puedes darme solo la parte donde se define la funcion en busqueda binaria",
                "como empieza la busqueda binaria en js",
                "quiero ver la cabecera de la funcion de busqueda binaria en javascript",
                "dame la parte donde se define la funcion en la busqueda binaria en js"
            ],
            "responses": [
                "La función de búsqueda binaria en javascript se define así:\n\n\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "inicializacion_variables_busqueda_binaria_js",
            "patterns": [
                "como se inicializan las variables en la busqueda binaria en javascript",
                "puedes darme la parte donde se inicializan las variables en busqueda binaria",
                "como se establecen las variables inicio, fin y medio en busqueda binaria",
                "quiero ver la inicializacion de variables en busqueda binaria en js",
                "dame la parte donde se inicializan las variables en la busqueda binaria en js"
            ],
            "responses": [
                "En la búsqueda binaria, las variables se inicializan de la siguiente manera:\n\n\nlet inicio = 0;\nlet fin = arreglo.length - 1;\nlet medio = Math.floor((inicio + fin) / 2);\n"
            ]
        },
        {
            "tag": "condicion_bucle_busqueda_binaria_js",
            "patterns": [
                "como se implementa el bucle while en la busqueda binaria en javascript",
                "puedes darme solo la parte del bucle while en busqueda binaria",
                "como funciona el ciclo while en busqueda binaria en js",
                "quiero ver el bucle while de la busqueda binaria en javascript",
                "dame la condicion del bucle en la busqueda binaria en js"
            ],
            "responses": [
                "El bucle while controla la búsqueda dividiendo el rango a la mitad:\n\n\nwhile (inicio <= fin) {\n    // Aquí va el código para evaluar y ajustar los límites\n}\n"
            ]
        },
        {
            "tag": "condicional_valor_busqueda_binaria_js",
            "patterns": [
                "como funciona el if en la busqueda binaria en javascript",
                "puedes darme solo la parte del if en busqueda binaria",
                "como compara el valor buscado en busqueda binaria en js",
                "quiero ver la condicion if de la busqueda binaria en javascript",
                "dame la parte del if en la busqueda binaria en js"
            ],
            "responses": [
                "El condicional `if` verifica si el valor buscado es igual al valor en el índice medio:\n\n\nif (arreglo[medio] === valorBuscado) {\n    return medio; // Devuelve el índice si encuentra el valor\n}\n"
            ]
        },
        {
            "tag": "ajuste_limites_busqueda_binaria_js",
            "patterns": [
                "como se ajustan los limites en la busqueda binaria en javascript",
                "puedes darme la parte donde se ajustan inicio y fin en busqueda binaria",
                "como se modifican los limites en busqueda binaria en js",
                "quiero ver el ajuste de inicio y fin en busqueda binaria en javascript",
                "dame la parte donde se ajustan los limites en la busqueda binaria en js"
            ],
            "responses": [
                "En la búsqueda binaria, los límites se ajustan dependiendo del valor comparado:\n\n\nif (arreglo[medio] < valorBuscado) {\n    inicio = medio + 1; // Ajusta el inicio\n} else {\n    fin = medio - 1; // Ajusta el final\n}\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_binaria_js",
            "patterns": [
                "que pasa si no se encuentra el valor en busqueda binaria en javascript",
                "puedes darme la parte donde no encuentra el valor en busqueda binaria",
                "como retorna -1 en la busqueda binaria en js",
                "quiero ver como indica que no encontro el valor en busqueda binaria en javascript",
                "dame la parte donde no encuentra el valor en la busqueda binaria en js"
            ],
            "responses": [
                "Si el valor no se encuentra, la función devuelve -1:\n\n\nreturn -1; // Retorna -1 si el valor no está presente\n"
            ]
        },
        {
            "tag": "complejidad_busqueda_binaria_js",
            "patterns": [
                "cual es la complejidad de la busqueda binaria en javascript",
                "puedes explicarme la eficiencia de la busqueda binaria en js",
                "que tan eficiente es el algoritmo de busqueda binaria en javascript",
                "quiero saber la complejidad de busqueda binaria en js",
                "dame la complejidad temporal de la busqueda binaria en javascript"
            ],
            "responses": [
                "La complejidad de la búsqueda binaria es:\n\n- **Mejor caso**: O(1), cuando el valor está en el medio.\n- **Peor caso**: O(log n), cuando el rango de búsqueda se divide hasta que queda un solo elemento.\n\nEsto la hace mucho más eficiente que la búsqueda secuencial para arreglos grandes."
            ]
        },
        {
            "tag": "ordenamiento_burbuja_js",
            "patterns": [
                "como funciona el ordenamiento por burbuja en javascript",
                "que es el algoritmo de burbuja en js",
                "puedes explicarme el algoritmo de ordenamiento burbuja en javascript",
                "dame el codigo del algoritmo de burbuja en js",
                "como implemento el algoritmo de burbuja en javascript"
            ],
            "responses": [
                "El ordenamiento por burbuja es un algoritmo que compara elementos adyacentes en un arreglo y los intercambia si están en el orden incorrecto. Esto se repite hasta que el arreglo esté completamente ordenado. Aquí tienes el código en javascript:\n\n\nfunction ordenamientoBurbuja(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Intercambio de elementos\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n// Ejemplo de uso\nconst numeros = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(ordenamientoBurbuja(numeros));\n// Salida: [11, 12, 22, 25, 34, 64, 90]\n"
            ]
        },
        {
            "tag": "definicion_funcion_ordenamiento_burbuja_js",
            "patterns": [
                "como se define la funcion en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte donde se define la funcion en el algoritmo de burbuja en js",
                "como empieza el ordenamiento burbuja en js",
                "quiero ver la cabecera de la funcion de ordenamiento burbuja en javascript",
                "dame la parte donde se define la funcion en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La función del ordenamiento burbuja en javascript se define así:\n\n\nfunction ordenamientoBurbuja(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "inicializacion_variable_n_ordenamiento_burbuja_js",
            "patterns": [
                "como se inicializa la variable n en el ordenamiento burbuja en javascript",
                "puedes darme la parte donde se inicializa n en el algoritmo de burbuja en js",
                "como se establece el tamano del arreglo en el algoritmo de burbuja en js",
                "quiero ver como se inicializa n en ordenamiento burbuja en javascript",
                "dame la parte donde se inicializa n en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La variable `n` se inicializa con la longitud del arreglo:\n\n\nlet n = arr.length;\n"
            ]
        },
        {
            "tag": "estructura_bucle_anidado_burbuja_js",
            "patterns": [
                "como funcionan los bucles en el ordenamiento burbuja en javascript",
                "puedes darme la parte del bucle en el algoritmo de burbuja en js",
                "como son los ciclos en el algoritmo de burbuja en js",
                "quiero ver el bucle anidado del ordenamiento burbuja en javascript",
                "dame la parte de los ciclos en el algoritmo de burbuja en js"
            ],
            "responses": [
                "El algoritmo utiliza un bucle anidado para recorrer el arreglo:\n\n\nfor (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        // Comparación e intercambio aquí\n    }\n}\n"
            ]
        },
        {
            "tag": "condicion_comparacion_burbuja_js",
            "patterns": [
                "como se comparan los elementos en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte donde se comparan los elementos en el algoritmo de burbuja en js",
                "como funciona la condicion del if en el algoritmo de burbuja en js",
                "quiero ver la comparacion entre elementos en el ordenamiento burbuja en javascript",
                "dame la parte del if en el algoritmo de burbuja en js"
            ],
            "responses": [
                "La condición `if` verifica si el elemento actual es mayor que el siguiente:\n\n\nif (arr[j] > arr[j + 1]) {\n    // Intercambio de elementos\n}\n"
            ]
        },
        {
            "tag": "intercambio_elementos_burbuja_js",
            "patterns": [
                "como se intercambian los elementos en el ordenamiento burbuja en javascript",
                "puedes darme solo la parte del intercambio en el algoritmo de burbuja en js",
                "como se hace el swap en el algoritmo de burbuja en js",
                "quiero ver como se intercambian los elementos en el ordenamiento burbuja en javascript",
                "dame la parte del intercambio en el algoritmo de burbuja en js"
            ],
            "responses": [
                "El intercambio de elementos se realiza con una variable temporal:\n\n\nlet temp = arr[j];\narr[j] = arr[j + 1];\narr[j + 1] = temp;\n"
            ]
        },
        {
            "tag": "complejidad_ordenamiento_burbuja_js",
            "patterns": [
                "cual es la complejidad del ordenamiento burbuja en javascript",
                "puedes explicarme la eficiencia del algoritmo de burbuja en js",
                "que tan eficiente es el algoritmo de burbuja en javascript",
                "quiero saber la complejidad del ordenamiento burbuja en js",
                "dame la complejidad temporal del algoritmo de burbuja en javascript"
            ],
            "responses": [
                "La complejidad del ordenamiento burbuja es:\n\n- **Mejor caso**: O(n), si el arreglo ya está ordenado (con optimización).\n- **Peor caso**: O(n²), cuando el arreglo está en orden inverso.\n- **Caso promedio**: O(n²), debido al doble bucle.\n\nEsto hace que el algoritmo no sea eficiente para grandes volúmenes de datos."
            ]
        }, 
        {
            "tag": "quick_sort_js",
            "patterns": [
                "como funciona el quick sort en javascript",
                "que es el algoritmo de quick sort en js",
                "puedes explicarme el algoritmo de quick sort en javascript",
                "dame el codigo del quick sort en js",
                "como implemento el quick sort en javascript"
            ],
            "responses": [
                "El Quick Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en subarreglos usando un elemento como pivote, colocando los elementos menores a la izquierda y los mayores a la derecha. Luego aplica recursividad para ordenar las partes. Aquí tienes el código completo en javascript:\n\n\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[arr.length - 1];\n    const left = [];\n    const right = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\n// Ejemplo de uso\nconst numeros = [34, 7, 23, 32, 5, 62];\nconsole.log(quickSort(numeros));\n// Salida: [5, 7, 23, 32, 34, 62]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_quick_sort_js",
            "patterns": [
                "como se define la funcion en el quick sort en javascript",
                "puedes darme solo la parte donde se define la funcion en el quick sort",
                "como empieza el quick sort en js",
                "quiero ver la cabecera de la funcion de quick sort en javascript",
                "dame la parte donde se define la funcion en el quick sort en js"
            ],
            "responses": [
                "La definición de la función Quick Sort en javascript es esta:\n\n\nfunction quickSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_quick_sort_js",
            "patterns": [
                "cual es la condicion base en el quick sort en javascript",
                "puedes darme la parte de la condicion base en el quick sort",
                "como termina la recursion en el quick sort en js",
                "quiero ver la condicion base del quick sort en javascript",
                "dame la parte donde se establece la condicion base en el quick sort en js"
            ],
            "responses": [
                "La condición base del Quick Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
        },
        {
            "tag": "particionamiento_quick_sort_js",
            "patterns": [
                "como se realiza el particionamiento en el quick sort en javascript",
                "puedes darme solo la parte del particionamiento en el quick sort",
                "como se dividen los elementos en el quick sort en js",
                "quiero ver como se particiona el arreglo en el quick sort en javascript",
                "dame la parte del particionamiento en el quick sort en js"
            ],
            "responses": [
                "El particionamiento del Quick Sort divide el arreglo en dos subarreglos con base en un pivote:\n\n\nconst pivot = arr[arr.length - 1];\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
        },
        {
            "tag": "combinacion_subarreglos_quick_sort_js",
            "patterns": [
                "como se combinan los subarreglos en el quick sort en javascript",
                "puedes darme solo la parte de la combinacion en el quick sort",
                "como se unen los elementos en el quick sort en js",
                "quiero ver como se combinan los subarreglos en el quick sort en javascript",
                "dame la parte de la combinacion en el quick sort en js"
            ],
            "responses": [
                "La combinación de los subarreglos con el pivote se realiza así:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
        },
        {
            "tag": "complejidad_quick_sort_js",
            "patterns": [
                "cual es la complejidad del quick sort en javascript",
                "puedes explicarme la eficiencia del quick sort en js",
                "que tan eficiente es el quick sort en javascript",
                "quiero saber la complejidad del quick sort en js",
                "dame la complejidad temporal del quick sort en javascript"
            ],
            "responses": [
                "La complejidad del Quick Sort es:\n\n- **Mejor caso**: O(n log n), cuando los pivotes dividen el arreglo de manera equilibrada.\n- **Peor caso**: O(n²), cuando el pivote es el elemento más grande o más pequeño en cada partición.\n- **Caso promedio**: O(n log n), debido a la naturaleza recursiva del algoritmo."
            ]
        },
        {
            "tag": "seleccion_pivote_quick_sort_js",
            "patterns": [
                "como se selecciona el pivote en el quick sort en javascript",
                "puedes darme solo la parte donde se elige el pivote en el quick sort",
                "como funciona el pivote en el quick sort en js",
                "quiero ver como se define el pivote en el quick sort en javascript",
                "dame la parte del pivote en el quick sort en js"
            ],
            "responses": [
                "El pivote se selecciona como el último elemento del arreglo:\n\n\nconst pivot = arr[arr.length - 1];\n\n"
            ]
        },
        {
            "tag": "llenado_subarreglos_quick_sort_js",
            "patterns": [
                "como se llenan los subarreglos en el quick sort en javascript",
                "puedes darme solo la parte donde se distribuyen los elementos en el quick sort",
                "como se separan los elementos en el quick sort en js",
                "quiero ver como se llenan los subarreglos en el quick sort en javascript",
                "dame la parte de los subarreglos en el quick sort en js"
            ],
            "responses": [
                "Los elementos se separan en los subarreglos izquierdo y derecho en base al pivote:\n\n\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
        },
        {
            "tag": "recursion_quick_sort_js",
            "patterns": [
                "como funciona la recursion en el quick sort en javascript",
                "puedes darme la parte donde se aplica la recursion en el quick sort",
                "como se llaman los subarreglos recursivamente en el quick sort en js",
                "quiero ver la recursion del quick sort en javascript",
                "dame la parte de la recursion en el quick sort en js"
            ],
            "responses": [
                "La recursión se aplica al ordenar los subarreglos izquierdo y derecho:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
        },
        {
            "tag": "merge_sort_js",
            "patterns": [
                "como funciona el merge sort en javascript",
                "que es el algoritmo de merge sort en js",
                "puedes explicarme el algoritmo de merge sort en javascript",
                "dame el codigo del merge sort en js",
                "como implemento el merge sort en javascript"
            ],
            "responses": [
                "El Merge Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en partes más pequeñas, las ordena y luego las combina. Aquí tienes el código completo en javascript:\n\n\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    const result = [];\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    return [...result, ...left, ...right];\n}\n\n// Ejemplo de uso\nconst numeros = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(numeros));\n// Salida: [3, 9, 10, 27, 38, 43, 82]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_sort_js",
            "patterns": [
                "como se define la funcion en el merge sort en javascript",
                "puedes darme solo la parte donde se define la funcion en el merge sort en js",
                "como empieza el merge sort en js",
                "quiero ver la cabecera de la funcion de merge sort en javascript",
                "dame la parte donde se define la funcion en el merge sort en js"
            ],
            "responses": [
                "La función principal del Merge Sort se define así:\n\n\nfunction mergeSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_merge_sort_js",
            "patterns": [
                "cual es la condicion base en el merge sort en javascript",
                "puedes darme la parte de la condicion base en el merge sort en js",
                "como termina la recursion en el merge sort en js",
                "quiero ver la condicion base del merge sort en javascript",
                "dame la parte donde se establece la condicion base en el merge sort en js"
            ],
            "responses": [
                "La condición base del Merge Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
        },
        {
            "tag": "division_arreglo_merge_sort_js",
            "patterns": [
                "como se divide el arreglo en el merge sort en javascript",
                "puedes darme la parte donde se divide el arreglo en el merge sort en js",
                "como funciona la division en el merge sort en js",
                "quiero ver como se divide el arreglo en el merge sort en javascript",
                "dame la parte de la division en el merge sort en js"
            ],
            "responses": [
                "El arreglo se divide en mitades utilizando el índice medio:\n\n\nconst mid = Math.floor(arr.length / 2);\nconst left = arr.slice(0, mid);\nconst right = arr.slice(mid);\n\n"
            ]
        },
        {
            "tag": "recursion_merge_sort_js",
            "patterns": [
                "como funciona la recursion en el merge sort en javascript",
                "puedes darme la parte donde se aplica la recursion en el merge sort en js",
                "como se llaman las mitades recursivamente en el merge sort en js",
                "quiero ver la recursion del merge sort en javascript",
                "dame la parte de la recursion en el merge sort en js"
            ],
            "responses": [
                "La recursión se aplica al ordenar las mitades izquierda y derecha:\n\n\nreturn merge(mergeSort(left), mergeSort(right));\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_js",
            "patterns": [
                "como se define la funcion merge en el merge sort en javascript",
                "puedes darme solo la parte donde se define la funcion merge en el merge sort en js",
                "como empieza la funcion merge en js",
                "quiero ver la cabecera de la funcion merge en javascript",
                "dame la parte donde se define la funcion merge en el merge sort en js"
            ],
            "responses": [
                "La función merge combina dos subarreglos ordenados en uno solo:\n\n\nfunction merge(left, right) {\n    // Aquí va el cuerpo de la función merge\n}\n\n"
            ]
        },
        {
            "tag": "comparacion_merge_js",
            "patterns": [
                "como se comparan los elementos en el merge sort en javascript",
                "puedes darme la parte donde se comparan los elementos en el merge sort en js",
                "como funciona la comparacion en el merge sort en js",
                "quiero ver la comparacion de los elementos en el merge sort en javascript",
                "dame la parte de la comparacion en el merge sort en js"
            ],
            "responses": [
                "Los elementos se comparan para determinar cuál agregar al resultado:\n\n\nif (left[0] < right[0]) {\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n\n"
            ]
        },
        {
            "tag": "combinar_restos_merge_js",
            "patterns": [
                "como se combinan los restos en el merge sort en javascript",
                "puedes darme la parte donde se combinan los elementos restantes en el merge sort en js",
                "como se manejan los restos en el merge sort en js",
                "quiero ver como se combinan los restos en el merge sort en javascript",
                "dame la parte de la combinacion de restos en el merge sort en js"
            ],
            "responses": [
                "Los elementos restantes de las mitades se combinan al resultado final:\n\n\nreturn [...result, ...left, ...right];\n\n"
            ]
        },
        {
            "tag": "complejidad_merge_sort_js",
            "patterns": [
                "cual es la complejidad del merge sort en javascript",
                "puedes explicarme la eficiencia del merge sort en js",
                "que tan eficiente es el merge sort en javascript",
                "quiero saber la complejidad del merge sort en js",
                "dame la complejidad temporal del merge sort en javascript"
            ],
            "responses": [
                "La complejidad del Merge Sort es:\n\n- **Mejor caso**: O(n log n), siempre, ya que divide y combina eficientemente.\n- **Peor caso**: O(n log n), ya que el algoritmo sigue siendo eficiente.\n- **Caso promedio**: O(n log n), independientemente de cómo estén ordenados los datos inicialmente."
            ]
        },
        {
            "tag": "fibonacci_js_es",
            "patterns": [
                "como funciona el algoritmo de fibonacci en javascript",
                "que es el algoritmo de fibonacci en js",
                "puedes explicarme como generar fibonacci en javascript",
                "dame el codigo del fibonacci en js",
                "como implemento la serie de fibonacci en javascript"
            ],
            "responses": [
                "El algoritmo de Fibonacci genera una secuencia donde cada número es la suma de los dos anteriores. Aquí tienes el código básico para calcular la serie de Fibonacci hasta un número n:\n\n\nfunction fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Ejemplo de uso\nconsole.log(fibonacci(10)); // Salida: 55 (décimo número de Fibonacci)\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_fibonacci_js",
            "patterns": [
                "como se define la funcion de fibonacci en javascript",
                "puedes darme la parte donde se define la funcion fibonacci",
                "como empieza el algoritmo de fibonacci en js",
                "quiero ver la cabecera de la funcion fibonacci en javascript",
                "dame la parte donde se define la funcion fibonacci en js"
            ],
            "responses": [
                "La función de Fibonacci se define así:\n\n\nfunction fibonacci(n) {\n    // Aquí va el cuerpo del algoritmo\n}\n\n"
            ]
        },
        {
            "tag": "condicion_base_fibonacci_js",
            "patterns": [
                "cual es la condicion base en el algoritmo de fibonacci en javascript",
                "puedes darme la condicion base del fibonacci en js",
                "como se detiene la recursion en fibonacci en js",
                "quiero ver la condicion base de fibonacci en javascript",
                "dame la parte de la condicion base en fibonacci en js"
            ],
            "responses": [
                "La condición base del algoritmo de Fibonacci es:\n\n\nif (n <= 1) {\n    return n;\n}\n\nEsto asegura que el cálculo termine cuando n sea 0 o 1."
            ]
        },
        {
            "tag": "recursion_fibonacci_js",
            "patterns": [
                "como funciona la recursion en el fibonacci en javascript",
                "puedes darme la parte donde se aplica la recursion en fibonacci",
                "como se llaman las funciones recursivas en fibonacci en js",
                "quiero ver la recursion del fibonacci en javascript",
                "dame la parte de la recursion en fibonacci en js"
            ],
            "responses": [
                "La recursión en Fibonacci se realiza llamando a la función con valores decrecientes:\n\n\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n\nEsto calcula la suma de los dos números anteriores en la serie."
            ]
        },
        {
            "tag": "fibonacci_iterativo_js",
            "patterns": [
                "como implemento fibonacci de manera iterativa en javascript",
                "puedes darme una version iterativa del algoritmo de fibonacci",
                "como funciona el fibonacci iterativo en js",
                "quiero ver el codigo de fibonacci iterativo en javascript",
                "dame una implementacion iterativa de fibonacci en js"
            ],
            "responses": [
                "Aquí tienes una versión iterativa del algoritmo de Fibonacci, que es más eficiente en términos de memoria y rendimiento:\n\n\nfunction fibonacciIterativo(n) {\n    if (n <= 1) {\n        return n;\n    }\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciIterativo(10)); // Salida: 55\n\n"
            ]
        },
        {
            "tag": "almacenamiento_fibonacci_js",
            "patterns": [
                "como uso almacenamiento para optimizar fibonacci en javascript",
                "puedes darme una version con almacenamiento de fibonacci en js",
                "como funciona el memoization en fibonacci en javascript",
                "quiero ver una implementacion optimizada de fibonacci con memoization en js",
                "dame un algoritmo optimizado de fibonacci con almacenamiento en javascript"
            ],
            "responses": [
                "El almacenamiento (memoization) se utiliza para guardar cálculos previos y mejorar la eficiencia del algoritmo. Aquí tienes una implementación optimizada de Fibonacci con memoization:\n\n\nfunction fibonacciMemoization(n, memo = {}) {\n    if (n in memo) {\n        return memo[n];\n    }\n    if (n <= 1) {\n        return n;\n    }\n    memo[n] = fibonacciMemoization(n - 1, memo) + fibonacciMemoization(n - 2, memo);\n    return memo[n];\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciMemoization(10)); // Salida: 55\n\n"
            ]
        },
        {
            "tag": "complejidad_fibonacci_recursivo_js",
            "patterns": [
                "cual es la complejidad del fibonacci recursivo en javascript",
                "puedes explicarme la eficiencia del fibonacci recursivo en js",
                "que tan eficiente es el fibonacci recursivo en javascript",
                "quiero saber la complejidad del fibonacci recursivo en js",
                "dame la complejidad temporal del fibonacci recursivo en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo recursivo de Fibonacci es:\n\n- **Complejidad temporal**: O(2^n), ya que cada llamada genera dos llamadas adicionales.\n- **Complejidad espacial**: O(n), debido a la profundidad de la pila de llamadas.\nEsto lo hace ineficiente para valores grandes de n."
            ]
        },
        {
            "tag": "complejidad_fibonacci_memoization_js",
            "patterns": [
                "cual es la complejidad del fibonacci con memoization en javascript",
                "puedes explicarme la eficiencia del fibonacci optimizado con memoization en js",
                "que tan eficiente es el fibonacci con memoization en javascript",
                "quiero saber la complejidad del fibonacci con memoization en js",
                "dame la complejidad temporal del fibonacci optimizado en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo de Fibonacci con memoization es:\n\n- **Complejidad temporal**: O(n), ya que cada número en la serie se calcula solo una vez.\n- **Complejidad espacial**: O(n), debido al almacenamiento en el objeto memo.\nEsto lo hace altamente eficiente comparado con la versión recursiva estándar."
            ]
        },
        {
            "tag": "busqueda_en_profundidad_js",
            "patterns": [
                "como funciona la busqueda en profundidad en javascript",
                "que es el algoritmo de busqueda en profundidad en js",
                "puedes explicarme el dfs en javascript",
                "dame el codigo de busqueda en profundidad en js",
                "como implemento la busqueda en profundidad en javascript"
            ],
            "responses": [
                "La búsqueda en profundidad (DFS) es un algoritmo que explora tanto como sea posible por un camino antes de retroceder. Aquí tienes una implementación básica en javascript:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    console.log(start);\n    visited.add(start);\n\n    for (const neighbor of graph[start]) {\n        if (!visited.has(neighbor)) {\n            dfs(graph, neighbor, visited);\n        }\n    }\n}\n\n// Ejemplo de uso\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\ndfs(graph, 'A');\n\nEste código imprimirá los nodos visitados en el orden DFS."
            ]
        },
        {
            "tag": "definicion_funcion_dfs_js",
            "patterns": [
                "como se define la funcion de busqueda en profundidad en javascript",
                "puedes darme la cabecera de la funcion dfs",
                "como empieza el dfs en js",
                "quiero ver la definicion de la funcion dfs en javascript",
                "dame la parte donde se define la funcion de busqueda en profundidad en js"
            ],
            "responses": [
                "La función principal de DFS en javascript se define así:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    // Cuerpo del algoritmo aquí\n}\n\n"
            ]
        },
        {
            "tag": "marcar_nodo_visitado_dfs_js",
            "patterns": [
                "como se marca un nodo como visitado en dfs en javascript",
                "puedes darme la parte donde se marcan los nodos visitados en dfs",
                "como se registra un nodo visitado en el dfs en js",
                "quiero ver como se marcan los nodos en busqueda en profundidad en javascript",
                "dame la parte donde se registra un nodo como visitado en dfs en js"
            ],
            "responses": [
                "Un nodo se marca como visitado agregándolo a un conjunto:\n\n\nvisited.add(start);\n\nEsto evita visitar el mismo nodo más de una vez."
            ]
        },
        {
            "tag": "recorrer_vecinos_dfs_js",
            "patterns": [
                "como se recorren los vecinos en dfs en javascript",
                "puedes darme la parte donde se recorren los nodos adyacentes en dfs",
                "como funciona el recorrido de vecinos en busqueda en profundidad en js",
                "quiero ver el codigo para recorrer los vecinos en dfs en javascript",
                "dame la parte donde se recorren los vecinos en dfs en js"
            ],
            "responses": [
                "El recorrido de vecinos se realiza con un bucle for:\n\n\nfor (const neighbor of graph[start]) {\n    if (!visited.has(neighbor)) {\n        dfs(graph, neighbor, visited);\n    }\n}\n\nEsto garantiza que todos los nodos adyacentes sean explorados."
            ]
        },
        {
            "tag": "estructura_grafo_dfs_js",
            "patterns": [
                "como se define el grafo para dfs en javascript",
                "puedes mostrarme como se estructura el grafo en dfs",
                "como funciona la estructura de datos para el grafo en dfs en js",
                "quiero ver como se representa el grafo para busqueda en profundidad en javascript",
                "dame un ejemplo de grafo para dfs en js"
            ],
            "responses": [
                "Un grafo para DFS se representa típicamente como un objeto donde las claves son nodos y los valores son listas de nodos adyacentes. Ejemplo:\n\n\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\n\nEsto permite representar la conectividad entre los nodos."
            ]
        },
        {
            "tag": "dfs_iterativo_js",
            "patterns": [
                "como se implementa dfs iterativo en javascript",
                "puedes mostrarme una version iterativa del dfs en js",
                "como funciona el dfs iterativo en javascript",
                "quiero ver el codigo de dfs iterativo en javascript",
                "dame una implementacion iterativa de dfs en js"
            ],
            "responses": [
                "Aquí tienes una implementación iterativa del DFS utilizando una pila:\n\n\nfunction dfsIterativo(graph, start) {\n    const stack = [start];\n    const visited = new Set();\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n\n        if (!visited.has(node)) {\n            console.log(node);\n            visited.add(node);\n            for (const neighbor of graph[node]) {\n                stack.push(neighbor);\n            }\n        }\n    }\n}\n\n// Ejemplo de uso\ndfsIterativo(graph, 'A');\n\nEsto utiliza una pila en lugar de la recursión para controlar el flujo del algoritmo."
            ]
        },
        {
            "tag": "complejidad_dfs_js",
            "patterns": [
                "cual es la complejidad del dfs en javascript",
                "puedes explicarme la eficiencia del dfs en js",
                "que tan eficiente es el dfs en javascript",
                "quiero saber la complejidad del dfs en js",
                "dame la complejidad temporal del dfs en javascript"
            ],
            "responses": [
                "La complejidad del algoritmo DFS es:\n\n- **Complejidad temporal**: O(V + E), donde V es el número de vértices y E es el número de aristas.\n- **Complejidad espacial**: O(V), debido al almacenamiento de los nodos visitados y la pila de llamadas (en la versión recursiva) o la pila explícita (en la versión iterativa).\nEsto lo hace eficiente para explorar grafos con muchos nodos y aristas."
            ]
        },
        {
            "tag": "inicializacion_pila_dfs_iterativo_js",
            "patterns": [
                "como se inicializa la pila en dfs iterativo en javascript",
                "puedes mostrarme la parte donde se crea la pila en dfs iterativo",
                "como empieza la pila en dfs iterativo en js",
                "quiero ver la inicializacion de la pila en dfs iterativo en javascript",
                "dame la parte donde se inicializa la pila en dfs iterativo en js"
            ],
            "responses": [
                "En la implementación iterativa de DFS, la pila se inicializa con el nodo inicial:\n\n\nconst stack = [start];\n\nEsto establece el punto de partida para explorar el grafo."
            ]
        },
        {
            "tag": "verificacion_nodo_no_visitado_dfs_js",
            "patterns": [
                "como se verifica que un nodo no ha sido visitado en dfs en javascript",
                "puedes mostrarme como se asegura que un nodo no sea visitado dos veces en dfs",
                "como se comprueba si un nodo ha sido visitado en busqueda en profundidad en js",
                "quiero ver como se verifica el estado de un nodo en dfs en javascript",
                "dame la parte donde se verifica si un nodo ya fue visitado en dfs en js"
            ],
            "responses": [
                "Para garantizar que un nodo no sea visitado dos veces, se utiliza la función `has` del conjunto de nodos visitados:\n\n\nif (!visited.has(node)) {\n    // Procesar el nodo\n}\n\nEsto asegura que cada nodo se procese una sola vez."
            ]
        },
        {
            "tag": "agregar_vecinos_pila_dfs_js",
            "patterns": [
                "como se agregan los vecinos a la pila en dfs en javascript",
                "puedes mostrarme la parte donde se añaden los nodos vecinos en dfs iterativo",
                "como funciona el agregado de vecinos en dfs en js",
                "quiero ver como se añaden los vecinos a la pila en busqueda en profundidad en javascript",
                "dame la parte donde se añaden los nodos vecinos a la pila en dfs en js"
            ],
            "responses": [
                "En la versión iterativa de DFS, los vecinos del nodo actual se agregan a la pila con el bucle:\n\n\nfor (const neighbor of graph[node]) {\n    stack.push(neighbor);\n}\n\nEsto asegura que los nodos conectados sean explorados en futuras iteraciones."
            ]
        },
        {
            "tag": "impresion_nodos_visitados_dfs_js",
            "patterns": [
                "como se imprimen los nodos visitados en dfs en javascript",
                "puedes mostrarme como se registran los nodos visitados en dfs",
                "como se manejan los nodos procesados en busqueda en profundidad en js",
                "quiero ver como se imprimen los nodos visitados en dfs en javascript",
                "dame la parte donde se imprimen los nodos en dfs en js"
            ],
            "responses": [
                "Los nodos visitados se imprimen utilizando la función `console.log` justo después de ser marcados como visitados:\n\n\nconsole.log(node);\n\nEsto registra cada nodo visitado en el orden de exploración."
            ]
        },
        {
            "tag": "uso_set_nodos_visitados_dfs_js",
            "patterns": [
                "por que se usa un set para nodos visitados en dfs en javascript",
                "puedes mostrarme como se utiliza el set en dfs",
                "como funciona el set para nodos en busqueda en profundidad en js",
                "quiero entender el uso del set en dfs en javascript",
                "dame la parte donde se explica el uso del set para nodos visitados en dfs en js"
            ],
            "responses": [
                "El `Set` se utiliza para almacenar los nodos visitados porque permite comprobar si un nodo ya fue visitado de manera eficiente:\n\n\nvisited.add(node);\nif (!visited.has(neighbor)) {\n    // Procesar el vecino\n}\n\nEsta estructura tiene operaciones de inserción y verificación en tiempo constante."
            ]
        },
        {
            "tag": "heap_sort_js",
            "patterns": [
                "que es el algoritmo de heap sort en javascript",
                "como funciona el heap sort en js",
                "puedes explicarme el heap sort en javascript",
                "dame el codigo completo del algoritmo heap sort en js",
                "como implemento el heap sort en javascript"
            ],
            "responses": [
                "El algoritmo de Heap Sort es un algoritmo de ordenamiento que utiliza la estructura de datos de un heap (montículo). Primero construye un heap máximo a partir del arreglo, luego intercambia el primer elemento (el máximo) con el último, reduce el tamaño del heap y aplica heapify nuevamente. Aquí tienes el código completo en javascript:\n\n\nfunction heapSort(arr) {\n\tlet n = arr.length;\n\n\t// Construir un heap máximo\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, n, i);\n\t}\n\n\t// Extraer elementos del heap uno por uno\n\tfor (let i = n - 1; i > 0; i--) {\n\t\t// Mover el máximo actual al final\n\t\t[arr[0], arr[i]] = [arr[i], arr[0]];\n\n\t\t// Aplicar heapify al heap reducido\n\t\theapify(arr, i, 0);\n\t}\n\n\treturn arr;\n}\n\nfunction heapify(arr, n, i) {\n\tlet largest = i;\n\tconst left = 2 * i + 1;\n\tconst right = 2 * i + 2;\n\n\t// Si el hijo izquierdo es más grande que el nodo raíz\n\tif (left < n && arr[left] > arr[largest]) {\n\t\tlargest = left;\n\t}\n\n\t// Si el hijo derecho es más grande que el nodo raíz\n\tif (right < n && arr[right] > arr[largest]) {\n\t\tlargest = right;\n\t}\n\n\t// Si el nodo raíz no es el más grande\n\tif (largest !== i) {\n\t\t[arr[i], arr[largest]] = [arr[largest], arr[i]];\n\t\theapify(arr, n, largest);\n\t}\n}\n\n// Ejemplo de uso\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n"
            ]
        },
        {
            "tag": "construccion_heap_maximo_js",
            "patterns": [
                "como se construye el heap maximo en heap sort en javascript",
                "puedes mostrarme la parte donde se crea el heap maximo",
                "como se inicializa el heap maximo en js",
                "quiero ver la construccion del heap maximo en heap sort en javascript",
                "dame la parte donde se construye el heap maximo en heap sort en js"
            ],
            "responses": [
                "El heap máximo se construye aplicando la función `heapify` desde la mitad del arreglo hacia atrás:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n"
            ]
        },
        {
            "tag": "extraccion_maximo_heap_sort_js",
            "patterns": [
                "como se extrae el elemento maximo en heap sort en javascript",
                "puedes mostrarme la parte donde se intercambia el primer elemento con el ultimo",
                "como se hace el intercambio en heap sort en js",
                "quiero ver la extraccion del maximo en heap sort en javascript",
                "dame la parte del intercambio en heap sort en js"
            ],
            "responses": [
                "En Heap Sort, el máximo (primer elemento) se intercambia con el último:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n\nEsto mueve el elemento más grande al final del arreglo ordenado."
            ]
        },
        {
            "tag": "complejidad_heap_sort_js",
            "patterns": [
                "cual es la complejidad del heap sort en javascript",
                "puedes explicarme la eficiencia del heap sort en js",
                "que tan eficiente es el heap sort en js",
                "quiero saber la complejidad temporal del heap sort en javascript",
                "dame la complejidad del heap sort en js"
            ],
            "responses": [
                "La complejidad del Heap Sort es:\n\n- **Mejor caso**: O(n log n)\n- **Peor caso**: O(n log n)\n- **Caso promedio**: O(n log n)\n\nEsto lo hace eficiente y estable en términos de complejidad."
            ]
        },
        {
            "tag": "definicion_funcion_heap_sort_js",
            "patterns": [
                "como se define la funcion principal en heap sort en javascript",
                "puedes darme la cabecera de la funcion heap sort en js",
                "como empieza la funcion heap sort en js",
                "quiero ver la cabecera de la funcion de heap sort en javascript",
                "dame el fragmento donde se define la funcion principal de heap sort en js"
            ],
            "responses": [
                "La definición de la función principal de Heap Sort es la siguiente:\n\n\nfunction heapSort(arr) {\n\t// Aquí empieza el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "iteracion_heap_maximo_js",
            "patterns": [
                "como se itera para construir el heap maximo en heap sort en js",
                "puedes darme el fragmento donde se itera para construir el heap maximo en js",
                "quiero ver el bucle para construir el heap maximo en heap sort en js",
                "como se hace la iteracion para construir el heap maximo en javascript",
                "dame la parte donde se construye el heap maximo en heap sort en js"
            ],
            "responses": [
                "La iteración para construir el Heap máximo en el algoritmo Heap Sort es la siguiente:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n"
            ]
        },
        {
            "tag": "intercambio_elementos_heap_sort_js",
            "patterns": [
                "como se intercambian los elementos en heap sort en js",
                "puedes darme el código para intercambiar elementos en heap sort en js",
                "quiero ver cómo se hace el intercambio de elementos en heap sort en js",
                "dame el fragmento donde se intercambian elementos en heap sort en javascript",
                "como se intercambian los elementos en heap sort en js"
            ],
            "responses": [
                "El intercambio de elementos en Heap Sort se realiza de la siguiente manera:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n"
            ]
        },
        {
            "tag": "ejemplo_heap_sort_js",
            "patterns": [
                "puedes darme un ejemplo de uso del heap sort en javascript",
                "quiero ver un ejemplo completo de heap sort en js",
                "como se utiliza el heap sort en un arreglo de ejemplo",
                "dame un ejemplo práctico de heap sort en javascript",
                "como se usa el algoritmo heap sort en js"
            ],
            "responses": [
                "Aquí tienes un ejemplo de uso del Heap Sort en javascript:\n\n\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n"
            ]
        },
        {
            "tag": "tamano_arreglo_heap_sort_js",
            "patterns": [
                "como se obtiene el tamaño del arreglo en heap sort en js",
                "puedes mostrarme el fragmento donde se obtiene el tamaño del arreglo en heap sort en js",
                "como se define la variable que guarda el tamaño del arreglo en heap sort en js",
                "quiero ver cómo se maneja el tamaño del arreglo en heap sort en javascript",
                "dame la parte donde se obtiene el tamaño del arreglo en heap sort en js"
            ],
            "responses": [
                "El tamaño del arreglo se obtiene así:\n\n\nlet n = arr.length;\n"
            ]
        },
        {
            "tag": "ciclo_for_en_python",
            "patterns": [
                "como puedo crear un ciclo for en python",
                "dame un ejemplo de un ciclo for en python",
                "como escribo un bucle for en python",
                "dame un ejemplo de un bucle for en python"
            ],
            "responses": [
                "Aquí tienes un ejemplo básico de un ciclo for en Python:\n\n\nfor i in range(5):\n    print(i)\n",
                "Puedes usar un for para iterar sobre una lista:\n\n\nnumeros = [1, 2, 3, 4]\nfor numero in numeros:\n    print(f'Elemento: {numero}')\n"
            ]
        },
        {
            "tag": "declaracion_de_variable_en_encabezado_for_python",
            "patterns": [
                "como declaro una variable en un ciclo en python",
                "dame un ejemplo para declarar una variable en python",
                "donde se declara la variable que se usara para iterar en un ciclo for en python",
                "dame un ejemplo de un ciclo for con la variable declarada en el encabezado"
            ],
            "responses": [
                "En Python, la variable se declara automáticamente en el encabezado del ciclo:\n\n\nfor i in range(5):\n    print(i)\n",
                "Un ejemplo donde la variable se declara en el encabezado del ciclo for:\n\n\nfor numero in range(1, 6):\n    print(f'Número actual: {numero}')\n"
            ]
        },
        {
            "tag": "condicional_en_ciclo_for_python",
            "patterns": [
                "como funciona la condicional en un ciclo for en python",
                "dame un ejemplo de la condicional en un ciclo for en python",
                "que hace la condicional en un ciclo for",
                "dame un ciclo for con una condicional para iterar",
                "como uso una condicional en un ciclo for en python"
            ],
            "responses": [
                "Puedes usar una condicional dentro del ciclo for. Ejemplo:\n\n\nfor i in range(5):\n    if i % 2 == 0:\n        print(f'{i} es un número par')\n",
                "Un ejemplo con condicional en un ciclo for:\n\n\nnumeros = [1, 2, 3, 4, 5]\nfor numero in numeros:\n    if numero > 3:\n        print(f'Número mayor que 3: {numero}')\n"
            ]
        },
        {
            "tag": "incremento_en_ciclo_for_python",
            "patterns": [
                "como hago para que el ciclo for incremente en python",
                "dame un ejemplo de un ciclo for que vaya en incremento en python",
                "como incremento el valor en un ciclo for en python",
                "dame un for que incremente un contador en python",
                "ejemplo de ciclo for que incremente en cada iteracion"
            ],
            "responses": [
                "En Python, puedes especificar el incremento en el ciclo for con `range`:\n\n\nfor i in range(0, 10, 2):\n    print(i)\n",
                "Un ejemplo de incremento en un ciclo for:\n\n\nfor numero in range(1, 6):\n    print(f'Número: {numero}')\n"
            ]
        },
        {
            "tag": "decremento_en_ciclo_for_python",
            "patterns": [
                "como hago para que el ciclo for decremente en python",
                "dame un ejemplo de un ciclo for que vaya en decremento en python",
                "como decremento el valor en un ciclo for en python",
                "dame un for que decremente un contador en python",
                "ejemplo de ciclo for que decremente en cada iteracion"
            ],
            "responses": [
                "Para decrementar, usa un paso negativo en `range`:\n\n\nfor i in range(10, 0, -1):\n    print(i)\n",
                "Un ciclo que decremente en pasos de 2:\n\n\nfor i in range(20, 0, -2):\n    print(i)\n"
            ]
        },
        {
            "tag": "uso_break_en_ciclo_python",
            "patterns": [
                "como usar break en un ciclo for en python",
                "dame un ejemplo de break en un ciclo en python",
                "como funciona el break en un ciclo for en python",
                "como detener un ciclo con break en python"
            ],
            "responses": [
                "El `break` se utiliza para salir de un ciclo antes de que termine. Ejemplo con un ciclo `for`:\n\tfor i in range(10):\n\t\tif i == 5:\n\t\t\tbreak\n\t\tprint(i)",
                "Puedes usar `break` para salir del ciclo cuando se cumpla una condición:\n\tnumeros = [1, 2, 3, 4, 5, 6, 7]\n\tfor num in numeros:\n\t\tif num == 4:\n\t\t\tbreak\n\t\tprint(num)",
                "Ejemplo de detener el ciclo al encontrar un valor específico:\n\tfor i in range(20):\n\t\tif i > 10:\n\t\t\tbreak\n\t\tprint(i)"
            ]
        },
        {
            "tag": "uso_continue_en_ciclo_python",
            "patterns": [
                "como usar continue en un ciclo for en python",
                "dame un ejemplo de continue en un ciclo en python",
                "como funciona el continue en un ciclo en python",
                "como saltar una iteracion con continue en python"
            ],
            "responses": [
                "El `continue` se utiliza para saltarse una iteración del ciclo y pasar a la siguiente. Ejemplo en un ciclo `for`:\n\tfor i in range(10):\n\t\tif i == 5:\n\t\t\tcontinue\n\t\tprint(i)",
                "Puedes usar `continue` para omitir valores específicos en un ciclo:\n\tnumeros = [1, 2, 3, 4, 5, 6, 7]\n\tfor num in numeros:\n\t\tif num == 4:\n\t\t\tcontinue\n\t\tprint(num)",
                "Un ejemplo con `continue` para omitir números impares:\n\tfor i in range(11):\n\t\tif i % 2 != 0:\n\t\t\tcontinue\n\t\tprint(i)"
            ]
        },
        {
            "tag": "declaracion_de_listas_python",
            "patterns": [
                "como se declara una lista en python",
                "dame ejemplos de declaracion de listas en python",
                "como crear una lista en python",
                "dame un ejemplo de una lista en python",
                "ejemplo de declaracion de listas en python"
            ],
            "responses": [
                "Una lista se puede declarar usando corchetes:\n\tnumeros = [1, 2, 3, 4, 5]\n\tprint(numeros)",
                "Declarar una lista de cadenas:\n\tnombres = ['Juan', 'Maria', 'Luis']\n\tprint(nombres)",
                "Declarar una lista vacía y llenarla luego:\n\tdatos = []\n\tdatos.append('valor1')\n\tdatos.append('valor2')\n\tprint(datos)"
            ]
        },
        {
            "tag": "acceso_a_elementos_lista_con_for_python",
            "patterns": [
                "como acceder a elementos de una lista con un ciclo for en python",
                "dame ejemplos de recorrer una lista con un for en python",
                "como usar un ciclo for para obtener elementos de una lista en python",
                "dame un ejemplo de acceso a listas con un for en python",
                "como iterar sobre una lista usando for en python"
            ],
            "responses": [
                "Puedes usar un ciclo for para acceder a los elementos de una lista:\n\tnumeros = [10, 20, 30, 40]\n\tfor i in range(len(numeros)):\n\t\tprint(f'Elemento en índice {i}: {numeros[i]}')",
                "Ejemplo básico de iteración con un for:\n\tfrutas = ['manzana', 'naranja', 'plátano']\n\tfor fruta in frutas:\n\t\tprint(fruta)"
            ]
        },
        {
            "tag": "estructura_basica_if_normal_python",
            "patterns": [
                "como funciona un if en python",
                "dame ejemplos de un if en python",
                "como usar un if en python",
                "dame un ejemplo de una estructura if en python",
                "como se estructura un if en python"
            ],
            "responses": [
                "La estructura básica de un `if` en Python es:\n\tif condicion:\n\t\t# código a ejecutar si la condición es verdadera\n\tEjemplo:\n\tif edad >= 18:\n\t\tprint('Eres adulto')",
                "Un ejemplo sencillo de un `if`:\n\tnumero = 10\n\tif numero > 5:\n\t\tprint('El número es mayor que 5')",
                "Otro ejemplo donde se utiliza una comparación:\n\ttemperatura = 30\n\tif temperatura > 25:\n\t\tprint('Hace calor')",
                "Puedes comprobar condiciones lógicas en el `if`:\n\tedad = 20\n\tif edad >= 18:\n\t\tprint('Acceso permitido')",
                "Ejemplo de un `if` simple:\n\tnumero = 4\n\tif numero % 2 == 0:\n\t\tprint('Es un número par')"
            ]
        },
        {
            "tag": "condicionales_compuestas_and_if_python",
            "patterns": [
                "como colocar varias condiciones en un if en python",
                "dame ejemplos de un if con varias condiciones en python",
                "como usar el operador and en un if en python",
                "como combinar condiciones dentro de un if en python"
            ],
            "responses": [
                "Puedes usar el operador `and` para combinar condiciones dentro de un `if`:\n\tnumero = 10\n\tif numero > 5 and numero < 15:\n\t\tprint('El número está entre 5 y 15')",
                "Ejemplo de múltiples condiciones con `and`:\n\tedad = 25\n\ttiene_licencia = True\n\tif edad >= 18 and tiene_licencia:\n\t\tprint('Acceso permitido')",
                "Puedes combinar más de una condición usando `and`:\n\ttemperatura = 30\n\thumedad = 80\n\tif temperatura > 25 and humedad > 70:\n\t\tprint('Hace calor y está húmedo')"
            ]
        },
        {
            "tag": "condicionales_negacion_if_python",
            "patterns": [
                "como usar negacion dentro de un if en python",
                "dame ejemplos de como usar el operador not en un if en python",
                "como negar una condicion en un if en python",
                "como poner una condicion falsa en un if en python"
            ],
            "responses": [
                "Puedes usar el operador `not` para negar una condición dentro de un `if`:\n\testa_lloviendo = False\n\tif not esta_lloviendo:\n\t\tprint('No está lloviendo')",
                "Negar una condición en un `if`:\n\tes_mayor_de_edad = False\n\tif not es_mayor_de_edad:\n\t\tprint('No eres mayor de edad')",
                "El operador `not` puede usarse para verificar si una condición es falsa:\n\ttiene_licencia = False\n\tif not tiene_licencia:\n\t\tprint('No tienes licencia')"
            ]
        },
        {
            "tag": "condicionales_comparativas_if_python",
            "patterns": [
                "como comparar numeros dentro de un if en python",
                "como usar comparaciones numericas en un if en python",
                "dame ejemplos de comparaciones numericas en un if en python",
                "como evaluar condiciones numericas en un if en python"
            ],
            "responses": [
                "Puedes comparar números usando operadores como `>`, `<`, `==`, etc.:\n\tnumero = 10\n\tif numero > 5:\n\t\tprint('El número es mayor que 5')",
                "Comparación numérica en un `if`:\n\tedad = 25\n\tif edad >= 18:\n\t\tprint('Eres adulto')",
                "Uso de `==` para comparar valores numéricos:\n\tvalor = 100\n\tif valor == 100:\n\t\tprint('El valor es 100')",
                "Comparar si un número es menor o igual a un valor:\n\ttemperatura = 18\n\tif temperatura <= 20:\n\t\tprint('La temperatura es baja')"
            ]
        },
        {
            "tag": "estructura_basica_if_else_python",
            "patterns": [
                "como funciona un if else en python",
                "dame ejemplos de un if else en python",
                "como usar un if else en python",
                "dame un ejemplo de una estructura if else en python",
                "como se estructura un if else en python"
            ],
            "responses": [
                "La estructura básica de un `if-else` es:\n\tif condicion:\n\t\t# código si la condición es verdadera\n\telse:\n\t\t# código si la condición es falsa\n\tEjemplo:\n\tedad = 18\n\tif edad >= 18:\n\t\tprint('Eres adulto')\n\telse:\n\t\tprint('Eres menor de edad')",
                "Un ejemplo de uso de `if-else`:\n\tnumero = 10\n\tif numero > 5:\n\t\tprint('El número es mayor que 5')\n\telse:\n\t\tprint('El número es 5 o menor')",
                "Puedes utilizar `else` para manejar la parte falsa de la condición:\n\ttemperatura = 20\n\tif temperatura > 25:\n\t\tprint('Hace calor')\n\telse:\n\t\tprint('Hace fresco')"
            ]
        },
        {
            "tag": "condicionales_complejas_if_else_python",
            "patterns": [
                "como poner condiciones complejas en un if else en python",
                "dame ejemplos de if else con condiciones multiples en python",
                "como usar operadores logicos en un if else en python",
                "como combinar condiciones con if else en python"
            ],
            "responses": [
                "Puedes combinar varias condiciones con operadores lógicos dentro del `if-else`:\n\tnumero = 10\n\tif numero > 5 and numero < 15:\n\t\tprint('El número está entre 5 y 15')\n\telse:\n\t\tprint('El número no está entre 5 y 15')",
                "Ejemplo de `if-else` con condiciones lógicas:\n\tedad = 25\n\ttiene_licencia = True\n\tif edad >= 18 and tiene_licencia:\n\t\tprint('Acceso permitido')\n\telse:\n\t\tprint('Acceso denegado')",
                "Si la primera condición es falsa, puedes comprobar otras condiciones:\n\thora = 9\n\tif hora >= 12:\n\t\tprint('Es tarde')\n\telif hora >= 6:\n\t\tprint('Es mañana')\n\telse:\n\t\tprint('Es de noche')"
            ]
        },
        {
            "tag": "uso_else_if_python",
            "patterns": [
                "como usar un elif en python",
                "dame ejemplos de elif en python",
                "como funciona el elif en un if en python",
                "dame un ejemplo de uso de elif en un if en python"
            ],
            "responses": [
                "Puedes usar `elif` para comprobar condiciones adicionales si la primera es falsa:\n\thora = 9\n\tif hora >= 12:\n\t\tprint('Es tarde')\n\telif hora >= 6:\n\t\tprint('Es mañana')\n\telse:\n\t\tprint('Es de noche')",
                "Ejemplo de `elif` para comparar más de una condición:\n\tnumero = 5\n\tif numero > 10:\n\t\tprint('El número es mayor a 10')\n\telif numero == 5:\n\t\tprint('El número es 5')\n\telse:\n\t\tprint('El número es menor a 5')",
                "Usando `elif` para crear un bloque de condiciones más específico:\n\tedad = 25\n\tif edad >= 18:\n\t\tprint('Eres adulto')\n\telif edad >= 13:\n\t\tprint('Eres un adolescente')\n\telse:\n\t\tprint('Eres un niño')"
            ]
        },
        {
            "tag": "estructura_basica_while_python",
            "patterns": [
                "como se usa un ciclo while en python",
                "dame un ejemplo de un ciclo while en python",
                "como funciona el ciclo while en python",
                "como se estructura un ciclo while en python"
            ],
            "responses": [
                "La estructura básica de un ciclo `while` es la siguiente:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1\n\tEste ciclo continuará ejecutándose mientras que la condición sea verdadera.",
                "Ejemplo básico de un ciclo `while`:\n\tnumero = 0\n\twhile numero < 5:\n\t\tprint(numero)\n\t\tnumero += 1",
                "Un ciclo `while` continuará hasta que la condición sea falsa:\n\tcontador = 0\n\twhile contador < 3:\n\t\tprint('Contando:', contador)\n\t\tcontador += 1"
            ]
        },
        {
            "tag": "condiciones_en_while_python",
            "patterns": [
                "como poner una condicion dentro de un ciclo while en python",
                "dame ejemplos de condiciones dentro de un ciclo while en python",
                "como usar condicionales en un while en python",
                "como evaluar condiciones en un ciclo while en python"
            ],
            "responses": [
                "Puedes poner una condición dentro del `while` para continuar iterando mientras sea verdadera:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
                "Condición dentro de un ciclo `while` para salir después de 5 iteraciones:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
                "Puedes usar una condición lógica compleja dentro del `while`:\n\tnumero = 1\n\twhile numero <= 10:\n\t\tif numero % 2 == 0:\n\t\t\tprint(f'{numero} es par')\n\t\tnumero += 1"
            ]
        },
        {
            "tag": "uso_break_en_while_python",
            "patterns": [
                "como usar break en un ciclo while en python",
                "dame un ejemplo de break en un ciclo while en python",
                "como detener un ciclo while con break en python",
                "como salir de un ciclo while en python"
            ],
            "responses": [
                "Puedes usar `break` para salir de un ciclo `while` cuando se cumpla una condición:\n\ti = 0\n\twhile i < 10:\n\t\tif i == 5:\n\t\t\tbreak\n\t\tprint(i)\n\t\ti += 1",
                "Usa `break` para salir del ciclo antes de que termine:\n\tnumero = 1\n\twhile numero <= 10:\n\t\tif numero == 7:\n\t\t\tbreak\n\t\tprint(numero)\n\t\tnumero += 1",
                "Un ejemplo de cómo salir de un ciclo `while` con `break`:\n\tcontador = 0\n\twhile contador < 10:\n\t\tif contador == 5:\n\t\t\tbreak\n\t\tprint(contador)\n\t\tcontador += 1"
            ]
        },
        {
            "tag": "uso_continue_en_while_python",
            "patterns": [
                "como usar continue en un ciclo while en python",
                "dame un ejemplo de continue en un ciclo while en python",
                "como saltar una iteración con continue en while en python",
                "como funciona el continue en un ciclo while en python"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `while`:\n\ti = 0\n\twhile i < 5:\n\t\tif i == 3:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tprint(i)\n\t\ti += 1",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tnumero = 0\n\twhile numero < 10:\n\t\tif numero % 2 != 0:\n\t\t\tnumero += 1\n\t\t\tcontinue\n\t\tprint(numero)\n\t\tnumero += 1",
                "Si deseas omitir los números impares dentro de un ciclo `while`, puedes usar `continue`:\n\ti = 0\n\twhile i <= 10:\n\t\tif i % 2 != 0:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tprint(i)\n\t\ti += 1"
            ]
        },
        {
            "tag": "estructura_basica_do_while_python",
            "patterns": [
                "como se usa un ciclo do while en python",
                "dame un ejemplo de un ciclo do while en python",
                "como funciona el ciclo do while en python",
                "como se estructura un ciclo do while en python"
            ],
            "responses": [
                "En Python no existe un ciclo `do-while` explícito, pero se puede simular con un `while` con condición al final:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif not (i < 5):\n\t\t\tbreak",
                "Ejemplo básico de un ciclo `do-while` simulado:\n\tnumero = 0\n\twhile True:\n\t\tprint(numero)\n\t\tnumero += 1\n\t\tif not (numero < 3):\n\t\t\tbreak",
                "Un ciclo `do-while` asegura que el bloque de código se ejecute al menos una vez, incluso si la condición es falsa desde el principio:\n\tcontador = 0\n\twhile True:\n\t\tprint(contador)\n\t\tcontador += 1\n\t\tif not (contador > 3):\n\t\t\tbreak"
            ]
        },
        {
            "tag": "condiciones_en_do_while_python",
            "patterns": [
                "como poner una condicion dentro de un ciclo do while en python",
                "dame ejemplos de condiciones dentro de un ciclo do while en python",
                "como usar condicionales en un do while en python",
                "como evaluar condiciones en un ciclo do while en python"
            ],
            "responses": [
                "Puedes poner una condición dentro del `do-while` para continuar iterando mientras sea verdadera:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif not (i < 5):\n\t\t\tbreak",
                "Ejemplo de cómo poner una condición en un ciclo `do-while` para evaluar si el número es par:\n\tnumero = 1\n\twhile True:\n\t\tif numero % 2 == 0:\n\t\t\tprint(f'{numero} es par')\n\t\tnumero += 1\n\t\tif not (numero <= 10):\n\t\t\tbreak",
                "Puedes usar una condición para salir del ciclo con `break` si se cumple alguna condición:\n\tcontador = 0\n\twhile True:\n\t\tif contador == 5:\n\t\t\tbreak\n\t\tprint(contador)\n\t\tcontador += 1"
            ]
        },
        {
            "tag": "uso_break_en_do_while_python",
            "patterns": [
                "como usar break en un ciclo do while en python",
                "dame un ejemplo de break en un ciclo do while en python",
                "como detener un ciclo do while con break en python",
                "como salir de un ciclo do while en python"
            ],
            "responses": [
                "En Python no existe un ciclo `do-while` como tal, pero puedes simularlo con un `while True` y usar `break` para salir del ciclo cuando se cumpla una condición:\n\tcontador = 0\n\twhile True:\n\t\tif contador == 3:\n\t\t\tbreak\n\t\tprint(contador)\n\t\tcontador += 1",
                "Usa `break` para salir del ciclo antes de que termine:\n\tcontador = 0\n\twhile True:\n\t\tif contador == 2:\n\t\t\tbreak\n\t\tprint(contador)\n\t\tcontador += 1",
                "Un ejemplo de cómo salir de un ciclo simulado `do-while` con `break`:\n\tcontador = 0\n\twhile True:\n\t\tif contador == 4:\n\t\t\tbreak\n\t\tprint(contador)\n\t\tcontador += 1"
            ]
        },
        {
            "tag": "uso_continue_en_do_while_python",
            "patterns": [
                "como usar continue en un ciclo do while en python",
                "dame un ejemplo de continue en un ciclo do while en python",
                "como saltar una iteración con continue en do while en python",
                "como funciona el continue en un ciclo do while en python"
            ],
            "responses": [
                "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo simulado `do-while` en Python:\n\tcontador = 0\n\twhile True:\n\t\tif contador == 3:\n\t\t\tcontador += 1\n\t\t\tcontinue\n\t\tprint(contador)\n\t\tcontador += 1\n\t\tif contador >= 5:\n\t\t\tbreak",
                "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tcontador = 0\n\twhile True:\n\t\tif contador % 2 != 0:\n\t\t\tcontador += 1\n\t\t\tcontinue\n\t\tprint(contador)\n\t\tcontador += 1\n\t\tif contador >= 10:\n\t\t\tbreak",
                "Si deseas omitir números impares dentro de un ciclo simulado `do-while`, puedes usar `continue`:\n\tnumero = 0\n\twhile True:\n\t\tif numero % 2 != 0:\n\t\t\tnumero += 1\n\t\t\tcontinue\n\t\tprint(numero)\n\t\tnumero += 1\n\t\tif numero > 10:\n\t\t\tbreak"
            ]
        },
        {
            "tag": "declaracion_basica_funcion_python",
            "patterns": [
                "como declarar una funcion en python",
                "dame un ejemplo de una función en python",
                "como crear una función en python",
                "cual es la sintaxis para declarar una función en python"
            ],
            "responses": [
                "La sintaxis básica para declarar una función en Python es la siguiente:\n\tdef saludo():\n\t\tprint('Hola, mundo')",
                "Un ejemplo de una función básica en Python:\n\tdef calcular_suma(a, b):\n\t\treturn a + b",
                "Para declarar una función en Python, simplemente utiliza la palabra clave `def`:\n\tdef saludar(nombre):\n\t\tprint(f'Hola {nombre}')"
            ]
        },
        {
            "tag": "declaracion_funcion_con_parametros_python",
            "patterns": [
                "como declarar una funcion con parametros en python",
                "dame un ejemplo de una funcion con parametros en python",
                "como pasar parametros a una funcion en python",
                "como crear una funcion con parametros en python"
            ],
            "responses": [
                "Para declarar una función con parámetros en Python, se colocan los parámetros entre paréntesis después del nombre de la función:\n\tdef saludar(nombre):\n\t\tprint(f'Hola, {nombre}')",
                "Ejemplo de una función con parámetros:\n\tdef multiplicar(a, b):\n\t\treturn a * b",
                "Los parámetros se definen entre paréntesis en la declaración de la función:\n\tdef mostrar_mensaje(mensaje):\n\t\tprint(mensaje)"
            ]
        },
        {
            "tag": "funciones_con_tipado_de_retorno_python",
            "patterns": [
                "como declarar una funcion con tipo de retorno en python",
                "dame un ejemplo de funcion con tipo de retorno en python",
                "como especificar el tipo de retorno de una funcion en python",
                "como devolver un valor de una funcion en python"
            ],
            "responses": [
                "Para especificar el tipo de retorno de una función en Python, puedes usar anotaciones de tipo:\n\tdef sumar(a: int, b: int) -> int:\n\t\treturn a + b",
                "Ejemplo de función con tipo de retorno:\n\tdef obtener_nombre() -> str:\n\t\treturn 'Juan'",
                "En Python, puedes especificar el tipo de retorno de la siguiente manera:\n\tdef es_positivo(numero: int) -> bool:\n\t\treturn numero > 0"
            ]
        },
        {
            "tag": "funciones_con_valores_por_defecto_python",
            "patterns": [
                "como declarar una funcion con valores por defecto en python",
                "dame un ejemplo de funcion con parametros por defecto en python",
                "como poner valores por defecto en una funcion en python",
                "como asignar un valor por defecto a un parametro en python"
            ],
            "responses": [
                "Puedes asignar valores por defecto a los parámetros de la siguiente manera:\n\tdef saludar(nombre='Juan'):\n\t\tprint(f'Hola, {nombre}')",
                "Ejemplo de función con valores por defecto:\n\tdef calcular_precio(precio, descuento=0):\n\t\treturn precio - (precio * descuento)",
                "Si un parámetro no se pasa, se utilizará el valor por defecto asignado:\n\tdef mostrar_detalles(producto='Producto A'):\n\t\tprint(f'Detalles del {producto}')"
            ]
        },
        {
            "tag": "funciones_anonimas_python",
            "patterns": [
                "como declarar una función anonima en python",
                "dame un ejemplo de una funcion anonima en python",
                "como usar funciones anonimas en python",
                "que es una funcion anonima en python"
            ],
            "responses": [
                "Una función anónima en Python se declara con la palabra clave `lambda`:\n\tsuma = lambda a, b: a + b\n\tprint(suma(3, 5))",
                "Ejemplo de función anónima asignada a una variable:\n\tsaludo = lambda nombre: print(f'Hola, {nombre}')\n\tsaludo('Ana')",
                "Una función anónima es útil cuando necesitas pasar una función como argumento:\n\tmultiplicar = lambda a, b: a * b\n\tprint(multiplicar(2, 3))"
            ]
        },
        {
            "tag": "funciones_recursivas_python",
            "patterns": [
                "como declarar una funcion recursiva en python",
                "dame un ejemplo de funcion recursiva en python",
                "como hacer que una funcion se llame a si misma en python",
                "como crear una funcion recursiva en python"
            ],
            "responses": [
                "Una función recursiva es aquella que se llama a sí misma. Ejemplo:\n\tdef factorial(n):\n\t\tif n == 0:\n\t\t\treturn 1\n\t\treturn n * factorial(n - 1)",
                "Ejemplo de una función recursiva para calcular la suma de los números del 1 al `n`:\n\tdef suma_recursiva(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\treturn n + suma_recursiva(n - 1)",
                "Una función recursiva puede ser útil para resolver problemas complejos que se pueden dividir en subproblemas más simples:\n\tdef fibonacci(n):\n\t\tif n <= 1:\n\t\t\treturn n\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2)"
            ]
        },
        {
            "tag": "declaracion_basica_enum_python",
            "patterns": [
                "como declarar un enum en python",
                "dame un ejemplo de un enum en python",
                "como se declara un enum en python",
                "ensename un ejemplo de un enum en python"
            ],
            "responses": [
                "puedes declarar un enum de esta manera:\n\tfrom enum import Enum\n\tclass direccion(Enum):\n\t\tarriba = 1\n\t\tabajo = 2\n\t\tizquierda = 3\n\t\tderecha = 4\n\tmi_direccion = direccion.arriba",
                "ejemplo basico de un enum:\n\tfrom enum import Enum\n\tclass estado(Enum):\n\t\tactivo = 1\n\t\tinactivo = 2\n\t\tpendiente = 3\n\testado_usuario = estado.activo",
                "un enum en python se declara asi:\n\tfrom enum import Enum\n\tclass color(Enum):\n\t\trojo = 1\n\t\tverde = 2\n\t\tazul = 3\n\tcolor_favorito = color.verde"
            ]
        },
        {
            "tag": "enum_valores_especificos_python",
            "patterns": [
                "como asignar valores a un enum en python",
                "dame un ejemplo de enum con valores especificos en python",
                "como asignar un valor a cada elemento en un enum en python",
                "puedes asignar valores a un enum en python"
            ],
            "responses": [
                "puedes asignar valores a los elementos de un enum de esta manera:\n\tfrom enum import Enum\n\tclass direccion(Enum):\n\t\tarriba = 1\n\t\tabajo = 2\n\t\tizquierda = 3\n\t\tderecha = 4\n\tmi_direccion = direccion.arriba",
                "ejemplo de enum con valores especificos:\n\tfrom enum import Enum\n\tclass estado(Enum):\n\t\tactivo = 1\n\t\tinactivo = 0\n\t\tpendiente = 2\n\testado_usuario = estado.activo",
                "un enum con valores especificos se declara asi:\n\tfrom enum import Enum\n\tclass color(Enum):\n\t\trojo = '#FF0000'\n\t\tverde = '#00FF00'\n\t\tazul = '#0000FF'\n\tcolor_favorito = color.verde"
            ]
        },
        {
            "tag": "enum_cadenas_texto_python",
            "patterns": [
                "como declarar un enum con cadenas de texto en python",
                "dame un ejemplo de enum con cadenas en python",
                "como asignar cadenas de texto en un enum en python",
                "puedes usar cadenas de texto en un enum en python"
            ],
            "responses": [
                "puedes usar cadenas de texto en un enum asi:\n\tfrom enum import Enum\n\tclass direccion(Enum):\n\t\tarriba = 'arriba'\n\t\tabajo = 'abajo'\n\t\tizquierda = 'izquierda'\n\t\tderecha = 'derecha'\n\tmi_direccion = direccion.arriba",
                "ejemplo de enum con cadenas de texto:\n\tfrom enum import Enum\n\tclass estado(Enum):\n\t\tactivo = 'activo'\n\t\tinactivo = 'inactivo'\n\t\tpendiente = 'pendiente'\n\testado_usuario = estado.activo",
                "un enum con cadenas de texto se declara de esta manera:\n\tfrom enum import Enum\n\tclass color(Enum):\n\t\trojo = 'rojo'\n\t\tverde = 'verde'\n\t\tazul = 'azul'\n\tcolor_favorito = color.verde"
            ]
        },
        {
            "tag": "acceso_valores_enum_python",
            "patterns": [
                "como acceder a un valor de un enum en python",
                "dame un ejemplo de acceso a valores de un enum en python",
                "como obtener el valor de un enum en python",
                "puedes acceder a los valores de un enum en python"
            ],
            "responses": [
                "puedes acceder a un valor de un enum asi:\n\tfrom enum import Enum\n\tclass direccion(Enum):\n\t\tarriba = 1\n\t\tabajo = 2\n\t\tizquierda = 3\n\t\tderecha = 4\n\tmi_direccion = direccion.arriba\n\tprint(mi_direccion.name)  # 'arriba'\n\tprint(mi_direccion.value)  # 1",
                "ejemplo de acceso a un valor de un enum:\n\tfrom enum import Enum\n\tclass estado(Enum):\n\t\tactivo = 1\n\t\tinactivo = 0\n\t\tpendiente = 2\n\testado_usuario = estado.activo\n\tprint(estado_usuario.name)  # 'activo'\n\tprint(estado_usuario.value)  # 1",
                "para acceder a un valor de un enum, puedes hacer lo siguiente:\n\tfrom enum import Enum\n\tclass color(Enum):\n\t\trojo = '#FF0000'\n\t\tverde = '#00FF00'\n\t\tazul = '#0000FF'\n\tcolor_favorito = color.verde\n\tprint(color_favorito.name)  # 'verde'\n\tprint(color_favorito.value)  # '#00FF00'"
            ]
        },
        {
            "tag": "iteracion_enum_python",
            "patterns": [
                "como iterar sobre los valores de un enum en python",
                "dame un ejemplo de iteracion de un enum en python",
                "como recorrer un enum en python",
                "puedes iterar sobre los valores de un enum en python"
            ],
            "responses": [
                "puedes iterar sobre los valores de un enum utilizando un bucle `for`:\n\tfrom enum import Enum\n\tclass direccion(Enum):\n\t\tarriba = 1\n\t\tabajo = 2\n\t\tizquierda = 3\n\t\tderecha = 4\n\tfor direccion in direccion:\n\t\tprint(direccion)",
                "ejemplo de iteracion sobre un enum:\n\tfrom enum import Enum\n\tclass estado(Enum):\n\t\tactivo = 1\n\t\tinactivo = 0\n\t\tpendiente = 2\n\tfor estado in estado:\n\t\tprint(f'{estado.name}: {estado.value}')",
                "puedes recorrer los valores de un enum de esta manera:\n\tfrom enum import Enum\n\tclass color(Enum):\n\t\trojo = '#FF0000'\n\t\tverde = '#00FF00'\n\t\tazul = '#0000FF'\n\tfor color in color:\n\t\tprint(f'{color.name}: {color.value}')"
            ]
        },
        {
            "tag": "busqueda_secuencial_paso_a_paso_python",
            "patterns": [
                "explicame paso a paso la busqueda secuencial en javascript",
                "como funciona la busqueda secuencial paso a paso en js",
                "puedes darme un ejemplo paso a paso de busqueda secuencial",
                "como es el flujo de busqueda secuencial en javascript",
                "quiero entender la busqueda secuencial paso a paso"
            ],
            "responses": [
                "aqui tienes el algoritmo de busqueda secuencial explicado paso a paso:\n\n1. **definimos la funcion**:\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n\nesta funcion recibe un arreglo y el valor que queremos buscar.\n\n2. **recorremos el arreglo usando un bucle**:\n\nfor (let i = 0; i < arreglo.length; i++) {\n\niteramos sobre cada elemento del arreglo, usando el indice `i` para acceder a los valores.\n\n3. **verificamos si el valor actual es el buscado**:\n\nif (arreglo[i] === valorBuscado) {\n    return i; // devuelve el indice si lo encuentra\n}\n\ncomparamos el valor actual con el valor buscado. si coinciden, devolvemos el indice.\n\n4. **devolvemos -1 si no encontramos el valor**:\n\nreturn -1; // si no se encuentra el valor\n\nesto indica que el valor no esta en el arreglo.\n\n5. **ejemplo completo**:\n\nconst numeros = [4, 2, 7, 9, 5];\nconst resultado = busquedaSecuencial(numeros, 7);\nconsole.log(resultado); // salida: 2\n"
            ]
        },
        {
            "tag": "ciclo_for_busqueda_secuencial_python",
            "patterns": [
                "como se implementa el ciclo for en la busqueda secuencial en python",
                "puedes darme solo el ciclo for del algoritmo de busqueda secuencial en python",
                "como recorre el arreglo la busqueda secuencial en python",
                "quiero ver el bucle de la busqueda secuencial en python",
                "dame la parte del ciclo for de la busqueda secuencial en python"
            ],
            "responses": [
                "el ciclo for en la busqueda secuencial recorre el arreglo elemento por elemento:\n\n\nfor (let i = 0; i < arreglo.length; i++) {\n    // aqui se evaluan los elementos uno por uno\n}\n"
            ]
        },
        {
            "tag": "condicional_if_busqueda_secuencial_python",
            "patterns": [
                "como funciona el condicional if en la busqueda secuencial en python",
                "puedes darme el condicional if del algoritmo de busqueda secuencial en python",
                "como verifica si el valor es el buscado en la busqueda secuencial en python",
                "quiero ver la condicion if de la busqueda secuencial en python",
                "dame la parte del if en la busqueda secuencial en python"
            ],
            "responses": [
                "el condicional if verifica si el valor actual es el buscado:\n\n\nif (arreglo[i] === valorBuscado) {\n    return i; // devuelve el indice si lo encuentra\n}\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_secuencial_python",
            "patterns": [
                "que pasa si no se encuentra el valor en la busqueda secuencial en python",
                "puedes darme la parte donde no encuentra el valor en python",
                "como retorna -1 en la busqueda secuencial en python",
                "quiero ver la devolucion de -1 en el algoritmo de busqueda secuencial en python",
                "dame la parte donde no encuentra el valor en la busqueda secuencial en python"
            ],
            "responses": [
                "si el valor no se encuentra, el algoritmo devuelve -1:\n\n\nreturn -1; // si no se encuentra el valor\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_secuencial_python",
            "patterns": [
                "como se define la funcion en la busqueda secuencial en python",
                "puedes darme solo la parte donde se define la funcion en python",
                "como empieza la busqueda secuencial en python",
                "quiero ver la cabecera de la funcion de busqueda secuencial en python",
                "dame la parte donde se define la funcion en busqueda secuencial en python"
            ],
            "responses": [
                "la funcion de busqueda secuencial se define asi:\n\n\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n    // aqui va el cuerpo del algoritmo\n}\n"
            ]
        },
        {
            "tag": "argumentos_busqueda_secuencial_python",
            "patterns": [
                "que argumentos recibe la busqueda secuencial en python",
                "puedes explicarme los parametros de la busqueda secuencial en python",
                "como funcionan los argumentos en el algoritmo de busqueda secuencial en python",
                "que parametros necesita la funcion de busqueda secuencial en python",
                "dame los argumentos de la busqueda secuencial en python"
            ],
            "responses": [
                "la funcion de busqueda secuencial recibe dos argumentos:\n\n1. **arreglo**: es la lista que sera recorrida.\n2. **valor_buscado**: es el valor que queremos encontrar.\n\nejemplo:\n\nbusqueda_secuencial([4, 2, 7, 9], 7)\n"
            ]
        },
        {
            "tag": "indice_encontrado_busqueda_secuencial_python",
            "patterns": [
                "como devuelve el indice encontrado en busqueda secuencial en python",
                "puedes darme la parte donde retorna el indice en la busqueda secuencial en python",
                "que hace cuando encuentra el valor buscado en la busqueda secuencial en python",
                "quiero ver como devuelve el indice encontrado en busqueda secuencial en python",
                "dame la parte donde retorna el indice en busqueda secuencial en python"
            ],
            "responses": [
                "cuando el valor buscado es encontrado, la funcion devuelve el indice:\n\n\nreturn i  # devuelve el indice donde se encontro el valor\n"
            ]
        },
        {
            "tag": "uso_practico_busqueda_secuencial_python",
            "patterns": [
                "como uso la busqueda secuencial en un caso practico en python",
                "puedes darme un ejemplo practico de busqueda secuencial en python",
                "que necesito para probar la busqueda secuencial en python",
                "quiero ver como se usa la busqueda secuencial en un programa en python",
                "dame un ejemplo de uso de busqueda secuencial en python"
            ],
            "responses": [
                "aqui tienes un ejemplo practico del uso de la busqueda secuencial:\n\n\ndef busqueda_secuencial(lista, valor_buscado):\n    for i in range(len(lista)):\n        if lista[i] == valor_buscado:\n            return i\n    return -1\n\nnumeros = [1, 3, 5, 7, 9]\nvalor_buscado = 7\nresultado = busqueda_secuencial(numeros, valor_buscado)\n\nif resultado != -1:\n    print(f'valor encontrado en el indice {resultado}')\nelse:\n    print('valor no encontrado')\n"
            ]
        },
        {
            "tag": "complejidad_busqueda_secuencial_python",
            "patterns": [
                "cual es la complejidad de la busqueda secuencial",
                "puedes explicarme la eficiencia de la busqueda secuencial",
                "que tan eficiente es el algoritmo de busqueda secuencial",
                "quiero saber la complejidad de busqueda secuencial",
                "dame la complejidad temporal de la busqueda secuencial"
            ],
            "responses": [
                "la complejidad de la busqueda secuencial es:\n\n- **mejor caso**: o(1), cuando el valor buscado esta en el primer elemento.\n- **peor caso**: o(n), cuando el valor esta al final o no esta en la lista.\n- **caso promedio**: o(n/2), que se simplifica a o(n).\n\nesto la hace poco eficiente para listas grandes si el valor buscado no esta cerca del inicio."
            ]
        },
        {
            "tag": "busqueda_binaria_python",
            "patterns": [
                "como funciona la busqueda binaria en python",
                "que es la busqueda binaria en python",
                "puedes explicarme el algoritmo de busqueda binaria en python",
                "dame el codigo del algoritmo de busqueda binaria en python",
                "como implemento la busqueda binaria en python"
            ],
            "responses": [
                "la busqueda binaria es un algoritmo eficiente para encontrar un elemento en una lista ordenada. se divide el rango de busqueda a la mitad en cada paso. aqui tienes el codigo basico en python:\n\n\ndef busqueda_binaria(lista, valor_buscado):\n    inicio = 0\n    fin = len(lista) - 1\n\n    while inicio <= fin:\n        medio = (inicio + fin) // 2\n\n        if lista[medio] == valor_buscado:\n            return medio  # devuelve el indice si encuentra el valor\n        elif lista[medio] < valor_buscado:\n            inicio = medio + 1  # ajusta el inicio\n        else:\n            fin = medio - 1  # ajusta el final\n\n    return -1  # retorna -1 si el valor no esta presente\n\n# ejemplo de uso\nnumeros = [1, 3, 5, 7, 9]\nresultado = busqueda_binaria(numeros, 7)\nprint(resultado)  # salida: 3\n"
            ]
        },
        {
            "tag": "definicion_funcion_busqueda_binaria_python",
            "patterns": [
                "como se define la funcion en la busqueda binaria en python",
                "puedes darme solo la parte donde se define la funcion en busqueda binaria en python",
                "como empieza la busqueda binaria en python",
                "quiero ver la cabecera de la funcion de busqueda binaria en python",
                "dame la parte donde se define la funcion en la busqueda binaria en python"
            ],
            "responses": [
                "La función de búsqueda binaria en Python se define así:\n\n\ndef busqueda_binaria(lista, valor_buscado):\n    # Aquí va el cuerpo del algoritmo\n    pass\n"
            ]
        },
        {
            "tag": "inicializacion_variables_busqueda_binaria_python",
            "patterns": [
                "como se inicializan las variables en la busqueda binaria en python",
                "puedes darme la parte donde se inicializan las variables en busqueda binaria en python",
                "como se establecen las variables inicio, fin y medio en busqueda binaria en python",
                "quiero ver la inicializacion de variables en busqueda binaria en python",
                "dame la parte donde se inicializan las variables en la busqueda binaria en python"
            ],
            "responses": [
                "En la búsqueda binaria, las variables se inicializan de la siguiente manera:\n\n\ninicio = 0\nfin = len(lista) - 1\nmedio = (inicio + fin) // 2\n"
            ]
        },
        {
            "tag": "condicion_bucle_busqueda_binaria_python",
            "patterns": [
                "como se implementa el bucle while en la busqueda binaria en python",
                "puedes darme solo la parte del bucle while en busqueda binaria en python",
                "como funciona el ciclo while en busqueda binaria en python",
                "quiero ver el bucle while de la busqueda binaria en python",
                "dame la condicion del bucle en la busqueda binaria en python"
            ],
            "responses": [
                "El bucle while controla la búsqueda dividiendo el rango a la mitad:\n\n\nwhile inicio <= fin:\n    # Aquí va el código para evaluar y ajustar los límites\n    pass\n"
            ]
        },
        {
            "tag": "condicional_valor_busqueda_binaria_python",
            "patterns": [
                "como funciona el if en la busqueda binaria en python",
                "puedes darme solo la parte del if en busqueda binaria",
                "como compara el valor buscado en busqueda binaria en python",
                "quiero ver la condicion if de la busqueda binaria en python",
                "dame la parte del if en la busqueda binaria en python"
            ],
            "responses": [
                "El condicional `if` verifica si el valor buscado es igual al valor en el índice medio:\n\n\nif lista[medio] == valor_buscado:\n    return medio  # Devuelve el índice si encuentra el valor\n"
            ]
        },
        {
            "tag": "ajuste_limites_busqueda_binaria_python",
            "patterns": [
                "como se ajustan los limites en la busqueda binaria en python",
                "puedes darme la parte donde se ajustan inicio y fin en busqueda binaria en python",
                "como se modifican los limites en busqueda binaria en python",
                "quiero ver el ajuste de inicio y fin en busqueda binaria en python",
                "dame la parte donde se ajustan los limites en la busqueda binaria en python"
            ],
            "responses": [
                "En la búsqueda binaria, los límites se ajustan dependiendo del valor comparado:\n\n\nif lista[medio] < valor_buscado:\n    inicio = medio + 1  # Ajusta el inicio\nelse:\n    fin = medio - 1  # Ajusta el final\n"
            ]
        },
        {
            "tag": "retorno_no_encontrado_busqueda_binaria_python",
            "patterns": [
                "que pasa si no se encuentra el valor en busqueda binaria en python",
                "puedes darme la parte donde no encuentra el valor en busqueda binaria en python",
                "como retorna -1 en la busqueda binaria en python",
                "quiero ver como indica que no encontro el valor en busqueda binaria en python",
                "dame la parte donde no encuentra el valor en la busqueda binaria en python"
            ],
            "responses": [
                "Si el valor no se encuentra, la función devuelve -1:\n\n\nreturn -1  # Retorna -1 si el valor no está presente\n"
            ]
        },
        {
            "tag": "complejidad_busqueda_binaria_python",
            "patterns": [
                "cual es la complejidad de la busqueda binaria en python",
                "puedes explicarme la eficiencia de la busqueda binaria en python",
                "que tan eficiente es el algoritmo de busqueda binaria en python",
                "quiero saber la complejidad de busqueda binaria en python",
                "dame la complejidad temporal de la busqueda binaria en python"
            ],
            "responses": [
                "La complejidad de la búsqueda binaria es:\n\n- **Mejor caso**: O(1), cuando el valor está en el medio.\n- **Peor caso**: O(log n), cuando el rango de búsqueda se divide hasta que queda un solo elemento.\n\nEsto la hace mucho más eficiente que la búsqueda secuencial para listas grandes."
            ]
        },
        {
            "tag": "definicion_funcion_ordenamiento_burbuja_python",
            "patterns": [
                "como se define la funcion en el ordenamiento burbuja en python",
                "puedes darme solo la parte donde se define la funcion en el algoritmo de burbuja en python",
                "como empieza el ordenamiento burbuja en python",
                "quiero ver la cabecera de la funcion de ordenamiento burbuja en python",
                "dame la parte donde se define la funcion en el algoritmo de burbuja en python"
            ],
            "responses": [
                "La función del ordenamiento burbuja en Python se define así:\n\n\ndef ordenamiento_burbuja(arr):\n    # Aquí va el cuerpo del algoritmo\n"
            ]
        },
        {
            "tag": "ordenamiento_burbuja_python",
            "patterns": [
                "como funciona el ordenamiento burbuja en python",
                "que es el algoritmo de ordenamiento burbuja en python",
                "puedes explicarme el algoritmo de ordenamiento burbuja en python",
                "dame el codigo del ordenamiento burbuja en python",
                "como implemento el ordenamiento burbuja en python"
            ],
            "responses": [
                "El ordenamiento burbuja es un algoritmo simple que compara pares de elementos adyacentes y los intercambia si están en el orden incorrecto. Aquí tienes el código básico en Python:\n\n\ndef ordenamiento_burbuja(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n"
                
            ]
        },
        {
            "tag": "inicializacion_variable_n_ordenamiento_burbuja_python",
            "patterns": [
                "como se inicializa la variable n en el ordenamiento burbuja en python",
                "puedes darme la parte donde se inicializa n en el algoritmo de burbuja en python",
                "como se establece el tamano del arreglo en el algoritmo de burbuja en python",
                "quiero ver como se inicializa n en ordenamiento burbuja en python",
                "dame la parte donde se inicializa n en el algoritmo de burbuja en python"
            ],
            "responses": [
                "La variable `n` se inicializa con la longitud del arreglo:\n\n\nn = len(arr)\n"
            ]
        },
        {
            "tag": "estructura_bucle_anidado_burbuja_python",
            "patterns": [
                "como funcionan los bucles en el ordenamiento burbuja en python",
                "puedes darme la parte del bucle en el algoritmo de burbuja en python",
                "como son los ciclos en el algoritmo de burbuja en python",
                "quiero ver el bucle anidado del ordenamiento burbuja en python",
                "dame la parte de los ciclos en el algoritmo de burbuja en python"
            ],
            "responses": [
                "El algoritmo utiliza un bucle anidado para recorrer el arreglo:\n\n\nfor i in range(n - 1):\n    for j in range(n - i - 1):\n        # Comparación e intercambio aquí\n"
            ]
        },
        {
            "tag": "condicion_comparacion_burbuja_python",
            "patterns": [
                "como se comparan los elementos en el ordenamiento burbuja en python",
                "puedes darme solo la parte donde se comparan los elementos en el algoritmo de burbuja en python",
                "como funciona la condicion del if en el algoritmo de burbuja en python",
                "quiero ver la comparacion entre elementos en el ordenamiento burbuja en python",
                "dame la parte del if en el algoritmo de burbuja en python"
            ],
            "responses": [
                "La condición `if` verifica si el elemento actual es mayor que el siguiente:\n\n\nif arr[j] > arr[j + 1]:\n    # Intercambio de elementos\n"
            ]
        },
        {
            "tag": "intercambio_elementos_burbuja_python",
            "patterns": [
                "como se intercambian los elementos en el ordenamiento burbuja en python",
                "puedes darme solo la parte del intercambio en el algoritmo de burbuja en python",
                "como se hace el swap en el algoritmo de burbuja en python",
                "quiero ver como se intercambian los elementos en el ordenamiento burbuja en python",
                "dame la parte del intercambio en el algoritmo de burbuja en python"
            ],
            "responses": [
                "El intercambio de elementos se realiza con una variable temporal:\n\n\ntemp = arr[j]\narr[j] = arr[j + 1]\narr[j + 1] = temp\n"
            ]
        },
        {
            "tag": "complejidad_ordenamiento_burbuja_python",
            "patterns": [
                "cual es la complejidad del ordenamiento burbuja en python",
                "puedes explicarme la eficiencia del algoritmo de burbuja en python",
                "que tan eficiente es el algoritmo de burbuja en python",
                "quiero saber la complejidad del ordenamiento burbuja en python",
                "dame la complejidad temporal del algoritmo de burbuja en python"
            ],
            "responses": [
                "La complejidad del ordenamiento burbuja es:\n\n- **Mejor caso**: O(n), si el arreglo ya está ordenado (con optimización).\n- **Peor caso**: O(n²), cuando el arreglo está en orden inverso.\n- **Caso promedio**: O(n²), debido al doble bucle.\n\nEsto hace que el algoritmo no sea eficiente para grandes volúmenes de datos."
            ]
        },
        {
            "tag": "quick_sort_py",
            "patterns": [
                "como funciona el quick sort en python",
                "que es el algoritmo de quick sort en python",
                "puedes explicarme el algoritmo de quick sort en python",
                "dame el codigo del quick sort en python",
                "como implemento el quick sort en python"
            ],
            "responses": [
                "El Quick Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide la lista en sublistas usando un elemento como pivote, colocando los elementos menores a la izquierda y los mayores a la derecha. Luego aplica recursividad para ordenar las partes. Aquí tienes el código completo en Python:\n\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[-1]\n    left = [x for x in arr[:-1] if x < pivot]\n    right = [x for x in arr[:-1] if x >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n# Ejemplo de uso\nnumeros = [34, 7, 23, 32, 5, 62]\nprint(quick_sort(numeros))\n# Salida: [5, 7, 23, 32, 34, 62]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_quick_sort_py",
            "patterns": [
                "como se define la funcion en el quick sort en python",
                "puedes darme solo la parte donde se define la funcion en el quick sort",
                "como empieza el quick sort en python",
                "quiero ver la cabecera de la funcion de quick sort en python",
                "dame la parte donde se define la funcion en el quick sort en python"
            ],
            "responses": [
                "La definición de la función Quick Sort en Python es esta:\n\n\ndef quick_sort(arr):\n    # Aquí va el cuerpo del algoritmo\n    pass\n\n"
            ]
        },
        {
            "tag": "condicion_base_quick_sort_py",
            "patterns": [
                "cual es la condicion base en el quick sort en python",
                "puedes darme la parte de la condicion base en el quick sort",
                "como termina la recursion en el quick sort en python",
                "quiero ver la condicion base del quick sort en python",
                "dame la parte donde se establece la condicion base en el quick sort en python"
            ],
            "responses": [
                "La condición base del Quick Sort verifica si la lista tiene uno o ningún elemento, para detener la recursión:\n\n\nif len(arr) <= 1:\n    return arr\n\n"
            ]
        },
        {
            "tag": "particionamiento_quick_sort_py",
            "patterns": [
                "como se realiza el particionamiento en el quick sort en python",
                "puedes darme solo la parte del particionamiento en el quick sort",
                "como se dividen los elementos en el quick sort en python",
                "quiero ver como se particiona la lista en el quick sort en python",
                "dame la parte del particionamiento en el quick sort en python"
            ],
            "responses": [
                "El particionamiento del Quick Sort divide la lista en dos sublistas con base en un pivote:\n\n\npivot = arr[-1]\nleft = [x for x in arr[:-1] if x < pivot]\nright = [x for x in arr[:-1] if x >= pivot]\n\n"
            ]
        },
        {
            "tag": "combinacion_sublistas_quick_sort_py",
            "patterns": [
                "como se combinan las sublistas en el quick sort en python",
                "puedes darme solo la parte de la combinacion en el quick sort",
                "como se unen los elementos en el quick sort en python",
                "quiero ver como se combinan las sublistas en el quick sort en python",
                "dame la parte de la combinacion en el quick sort en python"
            ],
            "responses": [
                "La combinación de las sublistas con el pivote se realiza así:\n\n\nreturn quick_sort(left) + [pivot] + quick_sort(right)\n\n"
            ]
        },
        {
            "tag": "complejidad_quick_sort_py",
            "patterns": [
                "cual es la complejidad del quick sort en python",
                "puedes explicarme la eficiencia del quick sort en python",
                "que tan eficiente es el quick sort en python",
                "quiero saber la complejidad del quick sort en python",
                "dame la complejidad temporal del quick sort en python"
            ],
            "responses": [
                "La complejidad del Quick Sort es:\n\n- **Mejor caso**: O(n log n), cuando los pivotes dividen la lista de manera equilibrada.\n- **Peor caso**: O(n²), cuando el pivote es el elemento más grande o más pequeño en cada partición.\n- **Caso promedio**: O(n log n), debido a la naturaleza recursiva del algoritmo."
            ]
        },
        {
            "tag": "seleccion_pivote_quick_sort_py",
            "patterns": [
                "como se selecciona el pivote en el quick sort en python",
                "puedes darme solo la parte donde se elige el pivote en el quick sort",
                "como funciona el pivote en el quick sort en python",
                "quiero ver como se define el pivote en el quick sort en python",
                "dame la parte del pivote en el quick sort en python"
            ],
            "responses": [
                "El pivote se selecciona como el último elemento de la lista:\n\n\npivot = arr[-1]\n\n"
            ]
        },
        {
            "tag": "llenado_sublistas_quick_sort_py",
            "patterns": [
                "como se llenan las sublistas en el quick sort en python",
                "puedes darme solo la parte donde se distribuyen los elementos en el quick sort",
                "como se separan los elementos en el quick sort en python",
                "quiero ver como se llenan las sublistas en el quick sort en python",
                "dame la parte de las sublistas en el quick sort en python"
            ],
            "responses": [
                "Los elementos se separan en las sublistas izquierda y derecha en base al pivote:\n\n\nleft = [x for x in arr[:-1] if x < pivot]\nright = [x for x in arr[:-1] if x >= pivot]\n\n"
            ]
        },
        {
            "tag": "recursion_quick_sort_py",
            "patterns": [
                "como funciona la recursion en el quick sort en python",
                "puedes darme la parte donde se aplica la recursion en el quick sort",
                "como se llaman los subarreglos recursivamente en el quick sort en py",
                "quiero ver la recursion del quick sort en python",
                "dame la parte de la recursion en el quick sort en py"
            ],
            "responses": [
                "La recursion se aplica al ordenar los subarreglos izquierdo y derecho:\n\n\nreturn quick_sort(left) + [pivot] + quick_sort(right)\n\n"
            ]
        },
        {
            "tag": "merge_sort_py",
            "patterns": [
                "como funciona el merge sort en python",
                "que es el algoritmo de merge sort en py",
                "puedes explicarme el algoritmo de merge sort en python",
                "dame el codigo del merge sort en py",
                "como implemento el merge sort en python"
            ],
            "responses": [
                "El Merge Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en partes mas pequenas, las ordena y luego las combina. Aqui tienes el codigo completo en Python:\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    return merge(merge_sort(left), merge_sort(right))\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    return result + left + right\n\n# Ejemplo de uso\nnumeros = [38, 27, 43, 3, 9, 82, 10]\nprint(merge_sort(numeros))\n# Salida: [3, 9, 10, 27, 38, 43, 82]\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_sort_py",
            "patterns": [
                "como se define la funcion en el merge sort en python",
                "puedes darme solo la parte donde se define la funcion en el merge sort en python",
                "como empieza el merge sort en py",
                "quiero ver la cabecera de la funcion de merge sort en python",
                "dame la parte donde se define la funcion en el merge sort en py"
            ],
            "responses": [
                "La funcion principal del Merge Sort se define asi:\n\n\ndef merge_sort(arr):\n    # Aqui va el cuerpo del algoritmo\n\n"
            ]
        },
        {
            "tag": "condicion_base_merge_sort_py",
            "patterns": [
                "cual es la condicion base en el merge sort en python",
                "puedes darme la parte de la condicion base en el merge sort en python",
                "como termina la recursion en el merge sort en py",
                "quiero ver la condicion base del merge sort en python",
                "dame la parte donde se establece la condicion base en el merge sort en py"
            ],
            "responses": [
                "La condicion base del Merge Sort verifica si el arreglo tiene uno o ningun elemento, para detener la recursion:\n\n\nif len(arr) <= 1:\n    return arr\n\n"
            ]
        },
        {
            "tag": "division_arreglo_merge_sort_py",
            "patterns": [
                "como se divide el arreglo en el merge sort en python",
                "puedes darme la parte donde se divide el arreglo en el merge sort en python",
                "como funciona la division en el merge sort en py",
                "quiero ver como se divide el arreglo en el merge sort en python",
                "dame la parte de la division en el merge sort en py"
            ],
            "responses": [
                "El arreglo se divide en mitades utilizando el indice medio:\n\n\nmid = len(arr) // 2\nleft = arr[:mid]\nright = arr[mid:]\n\n"
            ]
        },
        {
            "tag": "recursion_merge_sort_py",
            "patterns": [
                "como funciona la recursion en el merge sort en python",
                "puedes darme la parte donde se aplica la recursion en el merge sort en python",
                "como se llaman las mitades recursivamente en el merge sort en py",
                "quiero ver la recursion del merge sort en python",
                "dame la parte de la recursion en el merge sort en python"
            ],
            "responses": [
                "La recursion se aplica al ordenar las mitades izquierda y derecha:\n\n\nreturn merge(merge_sort(left), merge_sort(right))\n\n"
            ]
        },
        {
            "tag": "definicion_funcion_merge_py",
            "patterns": [
                "como se define la funcion merge en el merge sort en python",
                "puedes darme solo la parte donde se define la funcion merge en el merge sort en python",
                "como empieza la funcion merge en python",
                "quiero ver la cabecera de la funcion merge en python",
                "dame la parte donde se define la funcion merge en el merge sort en python"
            ],
            "responses": [
                "La funcion merge combina dos subarreglos ordenados en uno solo:\n\n\ndef merge(left, right):\n    # Aqui va el cuerpo de la funcion merge\n\n"
            ]
        },
        {
            "tag": "comparacion_merge_python",
            "patterns": [
                "como se comparan los elementos en el merge sort en python",
                "puedes darme la parte donde se comparan los elementos en el merge sort en python",
                "como funciona la comparacion en el merge sort en python",
                "quiero ver la comparacion de los elementos en el merge sort en python",
                "dame la parte de la comparacion en el merge sort en python"
            ],
            "responses": [
                "Los elementos se comparan para determinar cuál agregar al resultado:\n\n\nif left[0] < right[0]:\n    result.append(left.pop(0))\nelse:\n    result.append(right.pop(0))\n"
            ]
        },
        {
            "tag": "combinar_restos_merge_python",
            "patterns": [
                "como se combinan los restos en el merge sort en python",
                "puedes darme la parte donde se combinan los elementos restantes en el merge sort en python",
                "como se manejan los restos en el merge sort en python",
                "quiero ver como se combinan los restos en el merge sort en python",
                "dame la parte de la combinacion de restos en el merge sort en python"
            ],
            "responses": [
                "Los elementos restantes de las mitades se combinan al resultado final:\n\n\nreturn result + left + right\n"
            ]
        },
        {
            "tag": "complejidad_merge_python",
            "patterns": [
                "cual es la complejidad del merge sort en python",
                "puedes explicarme la eficiencia del merge sort en python",
                "que tan eficiente es el merge sort en python",
                "quiero saber la complejidad del merge sort en python",
                "dame la complejidad temporal del merge sort en python"
            ],
            "responses": [
                "La complejidad del Merge Sort es:\n\n- **Mejor caso**: O(n log n), siempre, ya que divide y combina eficientemente.\n- **Peor caso**: O(n log n), ya que el algoritmo sigue siendo eficiente.\n- **Caso promedio**: O(n log n), independientemente de cómo estén ordenados los datos inicialmente."
            ]
        },
        {
            "tag": "fibonacci_python_es",
            "patterns": [
                "como funciona el algoritmo de fibonacci en python",
                "que es el algoritmo de fibonacci en python",
                "puedes explicarme como generar fibonacci en python",
                "dame el codigo del fibonacci en python",
                "como implemento la serie de fibonacci en python"
            ],
            "responses": [
                "El algoritmo de Fibonacci genera una secuencia donde cada número es la suma de los dos anteriores. Aquí tienes el código básico para calcular la serie de Fibonacci hasta un número n:\n\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Ejemplo de uso\nprint(fibonacci(10)) # Salida: 55 (décimo número de Fibonacci)\n"
            ]
        },
        {
            "tag": "definicion_funcion_fibonacci_python",
            "patterns": [
                "como se define la funcion de fibonacci en python",
                "puedes darme la parte donde se define la funcion fibonacci",
                "como empieza el algoritmo de fibonacci en python",
                "quiero ver la cabecera de la funcion fibonacci en python",
                "dame la parte donde se define la funcion fibonacci en python"
            ],
            "responses": [
                "La función de Fibonacci se define así:\n\n\ndef fibonacci(n):\n    # Aquí va el cuerpo del algoritmo\n"
            ]
        },
        {
            "tag": "condicion_base_fibonacci_python",
            "patterns": [
                "cual es la condicion base en el algoritmo de fibonacci en python",
                "puedes darme la condicion base del fibonacci en python",
                "como se detiene la recursion en fibonacci en python",
                "quiero ver la condicion base de fibonacci en python",
                "dame la parte de la condicion base en fibonacci en python"
            ],
            "responses": [
                "La condición base del algoritmo de Fibonacci es:\n\n\nif n <= 1:\n    return n\n\nEsto asegura que el cálculo termine cuando n sea 0 o 1."
            ]
        },
        {
            "tag": "recursion_fibonacci_python",
            "patterns": [
                "como funciona la recursion en el fibonacci en python",
                "puedes darme la parte donde se aplica la recursion en fibonacci",
                "como se llaman las funciones recursivas en fibonacci en python",
                "quiero ver la recursion del fibonacci en python",
                "dame la parte de la recursion en fibonacci en python"
            ],
            "responses": [
                "La recursión en Fibonacci se realiza llamando a la función con valores decrecientes:\n\n\nreturn fibonacci(n - 1) + fibonacci(n - 2)\n\nEsto calcula la suma de los dos números anteriores en la serie."
            ]
        },
        {
            "tag": "fibonacci_iterativo_python",
            "patterns": [
                "como implemento fibonacci de manera iterativa en python",
                "puedes darme una version iterativa del algoritmo de fibonacci",
                "como funciona el fibonacci iterativo en python",
                "quiero ver el codigo de fibonacci iterativo en python",
                "dame una implementacion iterativa de fibonacci en python"
            ],
            "responses": [
                "Aquí tienes una versión iterativa del algoritmo de Fibonacci, que es más eficiente en términos de memoria y rendimiento:\n\n\ndef fibonacci_iterativo(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Ejemplo de uso\nprint(fibonacci_iterativo(10)) # Salida: 55\n"
            ]
        },
        {
            "tag": "almacenamiento_fibonacci_python",
            "patterns": [
                "como uso almacenamiento para optimizar fibonacci en python",
                "puedes darme una version con almacenamiento de fibonacci en python",
                "como funciona el memoization en fibonacci en python",
                "quiero ver una implementacion optimizada de fibonacci con memoization en python",
                "dame un algoritmo optimizado de fibonacci con almacenamiento en python"
            ],
            "responses": [
                "El almacenamiento (memoization) se utiliza para guardar cálculos previos y mejorar la eficiencia del algoritmo. Aquí tienes una implementación optimizada de Fibonacci con memoization:\n\n\ndef fibonacci_memoization(n, memo = {}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_memoization(n - 1, memo) + fibonacci_memoization(n - 2, memo)\n    return memo[n]\n\n# Ejemplo de uso\nprint(fibonacci_memoization(10)) # Salida: 55\n"
            ]
        },
        {
            "tag": "complejidad_fibonacci_recursivo_python",
            "patterns": [
                "cual es la complejidad del fibonacci recursivo en python",
                "puedes explicarme la eficiencia del fibonacci recursivo en python",
                "que tan eficiente es el fibonacci recursivo en python",
                "quiero saber la complejidad del fibonacci recursivo en python",
                "dame la complejidad temporal del fibonacci recursivo en python"
            ],
            "responses": [
                "La complejidad del algoritmo recursivo de Fibonacci es:\n\n- **Complejidad temporal**: O(2^n), ya que cada llamada genera dos llamadas adicionales.\n- **Complejidad espacial**: O(n), debido a la profundidad de la pila de llamadas.\nEsto lo hace ineficiente para valores grandes de n."
            ]
        },
        {
            "tag": "complejidad_fibonacci_memoization_python",
            "patterns": [
                "cual es la complejidad del fibonacci con memoization en python",
                "puedes explicarme la eficiencia del fibonacci optimizado con memoization en python",
                "que tan eficiente es el fibonacci con memoization en python",
                "quiero saber la complejidad del fibonacci con memoization en python",
                "dame la complejidad temporal del fibonacci optimizado en python"
            ],
            "responses": [
                "La complejidad del algoritmo de Fibonacci con memoization es:\n\n- **Complejidad temporal**: O(n), ya que cada número en la serie se calcula solo una vez.\n- **Complejidad espacial**: O(n), debido al almacenamiento en el objeto memo.\nEsto lo hace altamente eficiente comparado con la versión recursiva estándar."
            ]
        },
        {
            "tag": "busqueda_en_profundidad_python",
            "patterns": [
                "como funciona la busqueda en profundidad en python",
                "que es el algoritmo de busqueda en profundidad en python",
                "puedes explicarme el dfs en python",
                "dame el codigo de busqueda en profundidad en python",
                "como implemento la busqueda en profundidad en python"
            ],
            "responses": [
                "La búsqueda en profundidad (DFS) es un algoritmo que explora tanto como sea posible por un camino antes de retroceder. Aquí tienes una implementación básica en Python:\n\n\ndef dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    print(start)\n    visited.add(start)\n\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\n# Ejemplo de uso\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\ndfs(graph, 'A')\n\nEste código imprimirá los nodos visitados en el orden DFS."
            ]
        },
        {
            "tag": "definicion_funcion_dfs_python",
            "patterns": [
                "como se define la funcion de busqueda en profundidad en python",
                "puedes darme la cabecera de la funcion dfs",
                "como empieza el dfs en python",
                "quiero ver la definicion de la funcion dfs en python",
                "dame la parte donde se define la funcion de busqueda en profundidad en python"
            ],
            "responses": [
                "La función principal de DFS en Python se define así:\n\n\ndef dfs(graph, start, visited=None):\n    # Cuerpo del algoritmo aquí\n\n"
            ]
        },
        {
            "tag": "marcar_nodo_visitado_dfs_python",
            "patterns": [
                "como se marca un nodo como visitado en dfs en python",
                "puedes darme la parte donde se marcan los nodos visitados en dfs",
                "como se registra un nodo visitado en el dfs en python",
                "quiero ver como se marcan los nodos en busqueda en profundidad en python",
                "dame la parte donde se registra un nodo como visitado en dfs en python"
            ],
            "responses": [
                "Un nodo se marca como visitado agregándolo a un conjunto:\n\n\nvisited.add(start)\n\nEsto evita visitar el mismo nodo más de una vez."
            ]
        },
        {
            "tag": "recorrer_vecinos_dfs_python",
            "patterns": [
                "como se recorren los vecinos en dfs en python",
                "puedes darme la parte donde se recorren los nodos adyacentes en dfs",
                "como funciona el recorrido de vecinos en busqueda en profundidad en python",
                "quiero ver el codigo para recorrer los vecinos en dfs en python",
                "dame la parte donde se recorren los vecinos en dfs en python"
            ],
            "responses": [
                "El recorrido de vecinos se realiza con un bucle for:\n\n\nfor neighbor in graph[start]:\n    if neighbor not in visited:\n        dfs(graph, neighbor, visited)\n\nEsto garantiza que todos los nodos adyacentes sean explorados."
            ]
        },
        {
            "tag": "estructura_grafo_dfs_python",
            "patterns": [
                "como se define el grafo para dfs en python",
                "puedes mostrarme como se estructura el grafo en dfs",
                "como funciona la estructura de datos para el grafo en dfs en python",
                "quiero ver como se representa el grafo para busqueda en profundidad en python",
                "dame un ejemplo de grafo para dfs en python"
            ],
            "responses": [
                "Un grafo para DFS se representa típicamente como un diccionario donde las claves son nodos y los valores son listas de nodos adyacentes. Ejemplo:\n\n\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n\nEsto permite representar la conectividad entre los nodos."
            ]
        },
        {
            "tag": "dfs_iterativo_python",
            "patterns": [
                "como se implementa dfs iterativo en python",
                "puedes mostrarme una version iterativa del dfs en python",
                "como funciona el dfs iterativo en python",
                "quiero ver el codigo de dfs iterativo en python",
                "dame una implementacion iterativa de dfs en python"
            ],
            "responses": [
                "Aquí tienes una implementación iterativa del DFS utilizando una pila:\n\n\ndef dfs_iterativo(graph, start):\n    stack = [start]\n    visited = set()\n\n    while stack:\n        node = stack.pop()\n\n        if node not in visited:\n            print(node)\n            visited.add(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n\n# Ejemplo de uso\ndfs_iterativo(graph, 'A')\n\nEsto utiliza una pila en lugar de la recursión para controlar el flujo del algoritmo."
            ]
        },
        {
            "tag": "complejidad_dfs_python",
            "patterns": [
                "cual es la complejidad del dfs en python",
                "puedes explicarme la eficiencia del dfs en python",
                "que tan eficiente es el dfs en python",
                "quiero saber la complejidad del dfs en python",
                "dame la complejidad temporal del dfs en python"
            ],
            "responses": [
                "La complejidad del algoritmo DFS es:\n\n- **Complejidad temporal**: O(V + E), donde V es el número de vértices y E es el número de aristas.\n- **Complejidad espacial**: O(V), debido al almacenamiento de los nodos visitados y la pila de llamadas (en la versión recursiva) o la pila explícita (en la versión iterativa).\nEsto lo hace eficiente para explorar grafos con muchos nodos y aristas."
            ]
        },
        {
            "tag": "inicializacion_pila_dfs_iterativo_python",
            "patterns": [
                "como se inicializa la pila en dfs iterativo en python",
                "puedes mostrarme la parte donde se crea la pila en dfs iterativo",
                "como empieza la pila en dfs iterativo en python",
                "quiero ver la inicializacion de la pila en dfs iterativo en python",
                "dame la parte donde se inicializa la pila en dfs iterativo en python"
            ],
            "responses": [
                "En la implementación iterativa de DFS, la pila se inicializa con el nodo inicial:\n\n\nstack = [start]\n\nEsto establece el punto de partida para explorar el grafo."
            ]
        },
        {
            "tag": "verificacion_nodo_no_visitado_dfs_python",
            "patterns": [
                "como se verifica que un nodo no ha sido visitado en dfs en python",
                "puedes mostrarme como se asegura que un nodo no sea visitado dos veces en dfs",
                "como se comprueba si un nodo ha sido visitado en busqueda en profundidad en python",
                "quiero ver como se verifica el estado de un nodo en dfs en python",
                "dame la parte donde se verifica si un nodo ya fue visitado en dfs en python"
            ],
            "responses": [
                "Para garantizar que un nodo no sea visitado dos veces, se utiliza la función `not in` del conjunto de nodos visitados:\n\n\nif node not in visited:\n    # Procesar el nodo\n\nEsto asegura que cada nodo se procese una sola vez."
            ]
        },
        {
            "tag": "agregar_vecinos_pila_dfs_python",
            "patterns": [
                "como se agregan los vecinos a la pila en dfs en python",
                "puedes mostrarme la parte donde se añaden los nodos vecinos en dfs iterativo",
                "como funciona el agregado de vecinos en dfs en python",
                "quiero ver como se añaden los vecinos a la pila en busqueda en profundidad en python",
                "dame la parte donde se añaden los nodos vecinos a la pila en dfs en python"
            ],
            "responses": [
                "En la versión iterativa de DFS, los vecinos del nodo actual se agregan a la pila con el bucle:\n\n\nfor neighbor in graph[node]:\n    stack.append(neighbor)\n\nEsto asegura que los nodos conectados sean explorados en futuras iteraciones."
            ]
        },
        {
            "tag": "impresion_nodos_visitados_dfs_python",
            "patterns": [
                "como se imprimen los nodos visitados en dfs en python",
                "puedes mostrarme como se registran los nodos visitados en dfs",
                "como se manejan los nodos procesados en busqueda en profundidad en python",
                "quiero ver como se imprimen los nodos visitados en dfs en python",
                "dame la parte donde se imprimen los nodos en dfs en python"
            ],
            "responses": [
                "Los nodos visitados se imprimen utilizando la función `print` justo después de ser marcados como visitados:\n\n\nprint(node)\n\nEsto registra cada nodo visitado en el orden de exploración."
            ]
        },
        {
            "tag": "uso_set_nodos_visitados_dfs_python",
            "patterns": [
                "por que se usa un set para nodos visitados en dfs en python",
                "puedes mostrarme como se utiliza el set en dfs",
                "como funciona el set para nodos en busqueda en profundidad en python",
                "quiero entender el uso del set en dfs en python",
                "dame la parte donde se explica el uso del set para nodos visitados en dfs en python"
            ],
            "responses": [
                "El `set` se utiliza para almacenar los nodos visitados porque permite comprobar si un nodo ya fue visitado de manera eficiente:\n\n\nvisited.add(node)\nif neighbor not in visited:\n    # Procesar el vecino\n\nEsta estructura tiene operaciones de inserción y verificación en tiempo constante."
            ]
        },
        {
            "tag": "heap_sort_python",
            "patterns": [
                "que es el algoritmo de heap sort en python",
                "como funciona el heap sort en python",
                "puedes explicarme el heap sort en python",
                "dame el codigo completo del algoritmo heap sort en python",
                "como implemento el heap sort en python"
            ],
            "responses": [
                "El algoritmo de Heap Sort es un algoritmo de ordenamiento que utiliza la estructura de datos de un heap (montículo). Primero construye un heap máximo a partir del arreglo, luego intercambia el primer elemento (el máximo) con el último, reduce el tamaño del heap y aplica heapify nuevamente. Aquí tienes el código completo en Python:\n\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Construir un heap máximo\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extraer elementos del heap uno por uno\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n# Ejemplo de uso\nnumeros = [12, 11, 13, 5, 6, 7]\nprint(heap_sort(numeros))\n# Salida: [5, 6, 7, 11, 12, 13]\n\nEste algoritmo es eficiente para grandes volúmenes de datos."
            ]
        },
        {
            "tag": "construccion_heap_maximo_python",
            "patterns": [
                "como se construye el heap maximo en heap sort en python",
                "puedes mostrarme la parte donde se crea el heap maximo",
                "como se inicializa el heap maximo en python",
                "quiero ver la construccion del heap maximo en heap sort en python",
                "dame la parte donde se construye el heap maximo en heap sort en python"
            ],
            "responses": [
                "El heap máximo se construye aplicando la función `heapify` desde la mitad del arreglo hacia atrás:\n\n\nfor i in range(len(arr) // 2 - 1, -1, -1):\n    heapify(arr, len(arr), i)\n\nEsto asegura que los subárboles sean heaps válidos."
            ]
        },
        {
            "tag": "extraccion_maximo_heap_sort_python",
            "patterns": [
                "como se extrae el elemento maximo en heap sort en python",
                "puedes mostrarme la parte donde se intercambia el primer elemento con el ultimo",
                "como se hace el intercambio en heap sort en python",
                "quiero ver la extraccion del maximo en heap sort en python",
                "dame la parte del intercambio en heap sort en python"
            ],
            "responses": [
                "En Heap Sort, el máximo (primer elemento) se intercambia con el último:\n\n\narr[0], arr[i] = arr[i], arr[0]\n\nEsto mueve el elemento más grande al final del arreglo ordenado."
            ]
        },
        {
            "tag": "complejidad_heap_sort_python",
            "patterns": [
                "cual es la complejidad del heap sort en python",
                "puedes explicarme la eficiencia del heap sort en python",
                "que tan eficiente es el heap sort en python",
                "quiero saber la complejidad temporal del heap sort en python",
                "dame la complejidad del heap sort en python"
            ],
            "responses": [
                "La complejidad del Heap Sort es:\n\n- **Mejor caso**: O(n log n)\n- **Peor caso**: O(n log n)\n- **Caso promedio**: O(n log n)\n\nEsto lo hace eficiente y estable en términos de complejidad."
            ]
        },
        {
            "tag": "definicion_funcion_heap_sort_python",
            "patterns": [
                "como se define la funcion principal en heap sort en python",
                "puedes darme la cabecera de la funcion heap sort en python",
                "como empieza la funcion heap sort en python",
                "quiero ver la cabecera de la funcion de heap sort en python",
                "dame el fragmento donde se define la funcion principal de heap sort en python"
            ],
            "responses": [
                "La definición de la función principal de Heap Sort es la siguiente:\n\n\ndef heap_sort(arr):\n    # Aquí empieza el cuerpo del algoritmo\n\nEste es el punto de entrada para ordenar el arreglo."
            ]
        },
        {
            "tag": "iteracion_heap_maximo_python",
            "patterns": [
                "como se itera para construir el heap maximo en heap sort en python",
                "puedes darme el fragmento donde se itera para construir el heap maximo en python",
                "quiero ver el bucle para construir el heap maximo en heap sort en python",
                "como se hace la iteracion para construir el heap maximo en python",
                "dame la parte donde se construye el heap maximo en heap sort en python"
            ],
            "responses": [
                "La iteración para construir el Heap máximo en el algoritmo Heap Sort es la siguiente:\n\n\nfor i in range(len(arr) // 2 - 1, -1, -1):\n    heapify(arr, len(arr), i)\n\nEste bucle recorre la mitad del arreglo hacia atrás, aplicando la función `heapify`."
            ]
        },
        {
            "tag": "intercambio_elementos_heap_sort_python",
            "patterns": [
                "como se intercambian los elementos en heap sort en python",
                "puedes darme el código para intercambiar elementos en heap sort en python",
                "quiero ver cómo se hace el intercambio de elementos en heap sort en python",
                "dame el fragmento donde se intercambian elementos en heap sort en python",
                "como se intercambian los elementos en heap sort en python"
            ],
            "responses": [
                "El intercambio de elementos en Heap Sort se realiza de la siguiente manera:\n\n\narr[0], arr[i] = arr[i], arr[0]\n\nEste intercambio mueve el elemento más grande al final del arreglo ordenado."
            ]
        },
        {
            "tag": "ejemplo_heap_sort_python",
            "patterns": [
                "puedes darme un ejemplo de uso del heap sort en python",
                "quiero ver un ejemplo completo de heap sort en python",
                "como se utiliza el heap sort en un arreglo de ejemplo en python",
                "dame un ejemplo práctico de heap sort en python",
                "como se usa el algoritmo heap sort en python"
            ],
            "responses": [
                "Aquí tienes un ejemplo de uso del Heap Sort en Python:\n\n\nnumeros = [12, 11, 13, 5, 6, 7]\nprint(heap_sort(numeros))\n# Salida: [5, 6, 7, 11, 12, 13]\n\nEste ejemplo demuestra cómo ordenar un arreglo de números utilizando el algoritmo Heap Sort."
            ]
        },
        {
            "tag": "tamano_arreglo_heap_sort_python",
            "patterns": [
                "como se obtiene el tamaño del arreglo en heap sort en python",
                "puedes mostrarme el fragmento donde se obtiene el tamaño del arreglo en heap sort en python",
                "como se define la variable que guarda el tamaño del arreglo en heap sort en python",
                "quiero ver cómo se maneja el tamaño del arreglo en heap sort en python",
                "dame la parte donde se obtiene el tamaño del arreglo en heap sort en python"
            ],
            "responses": [
                "El tamaño del arreglo se obtiene así:\n\n\nn = len(arr)\n\nEsto guarda la longitud del arreglo en la variable `n`, que se utiliza en el algoritmo Heap Sort."
            ]
        },
        {
            "tag": "for_loop_in_javascript",
            "patterns": [
              "how can I create a for loop in js",
              "give me an example of a for loop in js",
              "how do I write a for loop in js",
              "give me an example of a for loop in javascript"
            ],
            "responses": [
              "Here's a basic example of a for loop in JavaScript:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
              "You can use a for loop to iterate over an array:\n\tconst numbers = [1, 2, 3, 4];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tconsole.log('Element:', numbers[i]);\n\t}"
            ]
          },
          {
            "tag": "variable_declaration_in_for_header_js",
            "patterns": [
              "how do I declare a variable in a for loop in js",
              "give me an example of declaring a variable in js",
              "where is the variable declared for iterating in a for loop in js",
              "give me an example of a for loop with the variable declared in the header"
            ],
            "responses": [
              "Here's an example of a for loop with the variable declared in the header:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
              "In JavaScript, you can declare a variable directly in the header of the for loop, like this:\n\tfor (let counter = 10; counter > 0; counter--) {\n\t\tconsole.log('Countdown:', counter);\n\t}",
              "The variable declaration in the for loop header can look like this:\n\tfor (let index = 0; index < 3; index++) {\n\t\tconsole.log(`Iteration number: ${index}`);\n\t}",
              "An example where the variable is declared in the for loop header:\n\tfor (let number = 1; number <= 5; number++) {\n\t\tconsole.log(`Current number: ${number}`);\n\t}",
              "Here's how you can declare a variable in the for loop header in JavaScript:\n\tfor (let step = 0; step < 4; step++) {\n\t\tconsole.log(`Current step: ${step}`);\n\t}"
            ]
          },
          {
            "tag": "conditional_in_for_loop_js",
            "patterns": [
              "how does the conditional work in a for loop in js",
              "give me an example of the conditional in a for loop in js",
              "what does the conditional in the for loop header do",
              "give me a for loop with a conditional to iterate",
              "how do I use a conditional in a for loop in js"
            ],
            "responses": [
              "The conditional in a for loop determines when to stop iterating. Here's an example:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteration ${i}`);\n\t}\nIn this case, the loop stops when the condition `i < 5` is no longer true.",
              "A for loop with a conditional:\n\tfor (let number = 1; number <= 3; number++) {\n\t\tconsole.log(`Current number: ${number}`);\n\t}\nThe condition `number <= 3` evaluates whether to continue or not.",
              "The conditional is key to controlling the loop. Example:\n\tfor (let x = 10; x > 0; x--) {\n\t\tconsole.log(`Countdown: ${x}`);\n\t}\nHere, the loop stops when `x > 0` is no longer true.",
              "Another example with a conditional:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Value of i: ${i}`);\n\t}\nIn this case, the condition is `i < 10`.",
              "Here's how you can use a conditional in the for loop:\n\tfor (let index = 0; index !== 5; index++) {\n\t\tconsole.log(`Current index: ${index}`);\n\t}\nThe loop stops when `index !== 5` is false."
            ]
          },
          {
            "tag": "increment_in_for_loop_js",
            "patterns": [
              "how do I make a for loop increment in js",
              "give me an example of a for loop that increments in js",
              "how do I increment the value in a for loop in js",
              "give me a for loop that increments a counter in js",
              "example of a for loop that increments in each iteration"
            ],
            "responses": [
              "To make a for loop increment, you can use the `++` operator. Example:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteration ${i}`);\n\t}\nHere, `i++` increments the value of `i` in each iteration.",
              "A loop that increments by 1:\n\tfor (let counter = 1; counter <= 5; counter++) {\n\t\tconsole.log(`Counter: ${counter}`);\n\t}\nThe condition controls how far it increments.",
              "You can increment by steps other than 1. Example:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Value of i: ${i}`);\n\t}\nHere, `i += 2` increases the value of `i` by 2 in each iteration.",
              "An example where the increment is manually controlled:\n\tfor (let number = 0; number < 20; number += 5) {\n\t\tconsole.log(`Number: ${number}`);\n\t}\nThe loop increments by steps of 5.",
              "A for loop with simple increment:\n\tfor (let x = 1; x <= 10; x++) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nThe increment is done with `x++`."
            ]
          },
          {
            "tag": "decrement_in_for_loop_js",
            "patterns": [
              "how do I make a for loop decrement in js",
              "give me an example of a for loop that decrements in js",
              "how do I decrement the value in a for loop in js",
              "give me a for loop that decrements a counter in js",
              "example of a for loop that decrements in each iteration"
            ],
            "responses": [
              "To make a for loop decrement, use the `--` operator. Example:\n\tfor (let i = 5; i > 0; i--) {\n\t\tconsole.log(`Iteration ${i}`);\n\t}\nHere, `i--` decrements the value of `i` in each iteration.",
              "A loop that decrements from an initial value:\n\tfor (let counter = 10; counter >= 1; counter--) {\n\t\tconsole.log(`Counter: ${counter}`);\n\t}\nThe condition controls how far it decrements.",
              "You can decrement by steps other than 1. Example:\n\tfor (let i = 10; i > 0; i -= 2) {\n\t\tconsole.log(`Value of i: ${i}`);\n\t}\nHere, `i -= 2` reduces the value of `i` by 2 in each iteration.",
              "An example where the decrement is manually controlled:\n\tfor (let number = 50; number >= 0; number -= 5) {\n\t\tconsole.log(`Number: ${number}`);\n\t}\nThe loop decrements by steps of 5.",
              "A for loop with simple decrement:\n\tfor (let x = 3; x > 0; x--) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nThe decrement is done with `x--`."
            ]
          },
          {
            "tag": "break_in_for_loop_js",
            "patterns": [
              "how do I stop a for loop in js",
              "example of using break in a for loop in js",
              "how does break work in a for loop in js",
              "give me a for loop with a break statement in js",
              "how do I exit a for loop early in js"
            ],
            "responses": [
              "The `break` statement stops the loop entirely. Example:\n\tfor (let i = 0; i < 5; i++) {\n\t\tif (i === 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`Iteration ${i}`);\n\t}\nThis stops the loop when `i` equals 3.",
              "Here's an example where `break` exits a loop early:\n\tconst numbers = [1, 2, 3, 4, 5];\n\tfor (let num of numbers) {\n\t\tif (num > 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`Number: ${num}`);\n\t}",
              "You can use `break` to stop nested loops. Example:\n\tfor (let i = 0; i < 3; i++) {\n\t\tfor (let j = 0; j < 3; j++) {\n\t\t\tif (j === 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconsole.log(`i: ${i}, j: ${j}`);\n\t\t}\n\t}",
              "An example with a conditional `break`:\n\tfor (let count = 1; count <= 10; count++) {\n\t\tconsole.log(`Count: ${count}`);\n\t\tif (count === 6) {\n\t\t\tbreak;\n\t\t}\n\t}",
              "Use `break` to stop searching in a loop:\n\tconst names = ['Alice', 'Bob', 'Charlie', 'Dave'];\n\tfor (let name of names) {\n\t\tif (name === 'Charlie') {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`Checking: ${name}`);\n\t}"
            ]
          },
          {
            "tag": "continue_in_for_loop_js",
            "patterns": [
              "how do I skip an iteration in a for loop in js",
              "example of using continue in a for loop in js",
              "how does continue work in a for loop in js",
              "give me a for loop with a continue statement in js",
              "how do I skip the current iteration in js"
            ],
            "responses": [
              "The `continue` statement skips the rest of the loop body for the current iteration. Example:\n\tfor (let i = 0; i < 5; i++) {\n\t\tif (i === 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(`Iteration ${i}`);\n\t}\nThis skips the iteration when `i` equals 2.",
              "Here's an example where `continue` is used:\n\tconst numbers = [1, 2, 3, 4, 5];\n\tfor (let num of numbers) {\n\t\tif (num % 2 === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(`Odd number: ${num}`);\n\t}",
              "You can use `continue` in nested loops. Example:\n\tfor (let i = 0; i < 3; i++) {\n\t\tfor (let j = 0; j < 3; j++) {\n\t\t\tif (j === 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconsole.log(`i: ${i}, j: ${j}`);\n\t\t}\n\t}",
              "An example with a conditional `continue`:\n\tfor (let count = 1; count <= 5; count++) {\n\t\tif (count === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(`Count: ${count}`);\n\t}",
              "Use `continue` to filter values during iteration:\n\tconst values = ['a', 'b', 'c', 'd'];\n\tfor (let value of values) {\n\t\tif (value === 'c') {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(`Processing: ${value}`);\n\t}"
            ]
          },
          {
            "tag": "array_declaration_in_js",
            "patterns": [
              "how do you declare an array in js",
              "give me examples of array declarations in js",
              "how to create an array in javascript",
              "give me an example of an array in js",
              "example of array declaration in js"
            ],
            "responses": [
              "An array can be declared using brackets:\n\tconst numbers = [1, 2, 3, 4, 5];\n\tconsole.log(numbers);",
              "You can also use the generic syntax to declare an array:\n\tconst names: Array<string> = ['John', 'Mary', 'Luis'];\n\tconsole.log(names);",
              "Declare an empty array and fill it later:\n\tconst data = [];\n\tdata.push('value1');\n\tdata.push('value2');\n\tconsole.log(data);"
            ]
          },
          {
            "tag": "access_array_elements_with_for_js",
            "patterns": [
              "how to access array elements with a for loop in js",
              "give me examples of iterating an array with a for loop in js",
              "how to use a for loop to get array elements in javascript",
              "give me an example of accessing arrays with a for loop in js",
              "how to iterate over an array using for in js"
            ],
            "responses": [
              "You can use a for loop to access array elements:\n\tconst numbers: number[] = [10, 20, 30, 40];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tconsole.log(`Element at index ${i}: ${numbers[i]}`);\n\t}",
              "Basic example of iteration with a for loop:\n\tconst fruits: string[] = ['apple', 'orange', 'banana'];\n\tfor (let i = 0; i < fruits.length; i++) {\n\t\tconsole.log(fruits[i]);\n\t}"
            ]
          },
          {
            "tag": "tuple_declaration_and_basic_use_js",
            "patterns": [
              "how do you declare a tuple in js",
              "give me examples of how to use tuples in js",
              "how to create a tuple in javascript",
              "give me an example of a tuple in js",
              "basic example of a tuple in js"
            ],
            "responses": [
              "A tuple in JavaScript is declared by specifying the types in an array:\n\tconst tuple = ['John', 25];\n\tconsole.log(tuple);",
              "You can use a tuple to represent related data:\n\tconst coordinates = [40.7128, -74.0060];\n\tconsole.log(`Latitude: ${coordinates[0]}, Longitude: ${coordinates[1]}`);",
              "Example with mixed types:\n\tconst person = ['Anna', 30, true];\n\tconsole.log(`Name: ${person[0]}, Age: ${person[1]}, Active: ${person[2]}`);"
            ]
          },
          {
            "tag": "basic_if_structure_js",
            "patterns": [
              "how does an if statement work in js",
              "give me examples of an if statement in js",
              "how to use an if statement in javascript",
              "give me an example of an if statement structure in js",
              "how to structure an if statement in js"
            ],
            "responses": [
              "The basic structure of an `if` in JavaScript is:\n\tif (condition) {\n\t\t// code to execute if the condition is true\n\t}\nExample:\n\tif (age >= 18) {\n\t\tconsole.log('You are an adult');\n\t}",
              "A simple example of an `if`:\n\tlet number = 10;\n\tif (number > 5) {\n\t\tconsole.log('The number is greater than 5');\n\t}",
              "Another example using a comparison:\n\tlet temperature = 30;\n\tif (temperature > 25) {\n\t\tconsole.log('It is hot');\n\t}",
              "You can check logical conditions in the `if`:\n\tlet age = 20;\n\tif (age >= 18) {\n\t\tconsole.log('Access granted');\n\t}",
              "Example of a simple `if`:\n\tlet number = 4;\n\tif (number % 2 === 0) {\n\t\tconsole.log('It is an even number');\n\t}"
            ]
          },
          {
            "tag": "compound_conditionals_and_if_js",
            "patterns": [
              "how to add multiple conditions in an if statement in js",
              "give me examples of an if with multiple conditions in js",
              "how to use the and operator in an if statement in javascript",
              "how to combine conditions within an if in js"
            ],
            "responses": [
              "You can use the `&&` operator to combine conditions within an `if`:\n\tlet number = 10;\n\tif (number > 5 && number < 15) {\n\t\tconsole.log('The number is between 5 and 15');\n\t}",
              "Example of multiple conditions with `&&`:\n\tlet age = 25;\n\tlet hasLicense = true;\n\tif (age >= 18 && hasLicense) {\n\t\tconsole.log('Access granted');\n\t}",
              "You can combine more than one condition using `&&`:\n\tlet temperature = 30;\n\tlet humidity = 80;\n\tif (temperature > 25 && humidity > 70) {\n\t\tconsole.log('It is hot and humid');\n\t}"
            ]
          },
          {
            "tag": "negation_conditionals_if_js",
            "patterns": [
              "how to use negation within an if in js",
              "give me examples of how to use the not operator in an if statement in javascript",
              "how to negate a condition in an if in js",
              "how to set a false condition in an if in javascript"
            ],
            "responses": [
              "You can use the `!` operator to negate a condition within an `if`:\n\tlet isRaining = false;\n\tif (!isRaining) {\n\t\tconsole.log('It is not raining');\n\t}",
              "Negate a condition in an `if`:\n\tlet isAdult = false;\n\tif (!isAdult) {\n\t\tconsole.log('You are not an adult');\n\t}",
              "The `!` operator can be used to check if a condition is false:\n\tlet hasLicense = false;\n\tif (!hasLicense) {\n\t\tconsole.log('You do not have a license');\n\t}"
            ]
          },
          {
            "tag": "comparative_conditionals_if_js",
            "patterns": [
              "how to compare numbers within an if in js",
              "how to use numeric comparisons in an if in javascript",
              "give me examples of numeric comparisons in an if in js",
              "how to evaluate numeric conditions in an if in javascript"
            ],
            "responses": [
              "You can compare numbers using operators like `>`, `<`, `===`, etc.:\n\tlet number = 10;\n\tif (number > 5) {\n\t\tconsole.log('The number is greater than 5');\n\t}",
              "Numeric comparison in an `if`:\n\tlet age = 25;\n\tif (age >= 18) {\n\t\tconsole.log('You are an adult');\n\t}",
              "Using `===` to compare numeric values:\n\tlet value = 100;\n\tif (value === 100) {\n\t\tconsole.log('The value is 100');\n\t}",
              "Comparing if a number is less than or equal to a value:\n\tlet temperature = 18;\n\tif (temperature <= 20) {\n\t\tconsole.log('The temperature is low');\n\t}"
            ]
          },
          {
            "tag": "basic_if_else_structure_js",
            "patterns": [
              "how does an if else work in js",
              "give me examples of an if else in js",
              "how to use an if else in javascript",
              "give me an example of an if else structure in js",
              "how is an if else structured in js"
            ],
            "responses": [
              "The basic structure of an `if-else` is:\n\tif (condition) {\n\t\t// code if the condition is true\n\t} else {\n\t\t// code if the condition is false\n\t}\nExample:\n\tlet age = 18;\n\tif (age >= 18) {\n\t\tconsole.log('You are an adult');\n\t} else {\n\t\tconsole.log('You are a minor');\n\t}",
              "An example of using `if-else`:\n\tlet number = 10;\n\tif (number > 5) {\n\t\tconsole.log('The number is greater than 5');\n\t} else {\n\t\tconsole.log('The number is 5 or less');\n\t}",
              "You can use `else` to handle the false part of the condition:\n\tlet temperature = 20;\n\tif (temperature > 25) {\n\t\tconsole.log('It is hot');\n\t} else {\n\t\tconsole.log('It is cool');\n\t}"
            ]
          },
          {
            "tag": "complex_conditionals_if_else_js",
            "patterns": [
              "how to set complex conditions in an if else in js",
              "give me examples of if else with multiple conditions in js",
              "how to use logical operators in an if else in javascript",
              "how to combine conditions with if else in js"
            ],
            "responses": [
              "You can combine multiple conditions with logical operators within the `if-else`:\n\tlet number = 10;\n\tif (number > 5 && number < 15) {\n\t\tconsole.log('The number is between 5 and 15');\n\t} else {\n\t\tconsole.log('The number is not between 5 and 15');\n\t}",
              "Example of `if-else` with logical conditions:\n\tlet age = 25;\n\tlet hasLicense = true;\n\tif (age >= 18 && hasLicense) {\n\t\tconsole.log('Access granted');\n\t} else {\n\t\tconsole.log('Access denied');\n\t}",
              "If the first condition is false, you can check other conditions:\n\tlet hour = 9;\n\tif (hour >= 12) {\n\t\tconsole.log('It is afternoon');\n\t} else if (hour >= 6) {\n\t\tconsole.log('It is morning');\n\t} else {\n\t\tconsole.log('It is night');\n\t}"
            ]
          },
          {
            "tag": "using_else_if_js",
            "patterns": [
              "how to use else if in js",
              "give me examples of else if in javascript",
              "how does else if work in an if in js",
              "give me an example of using else if in an if in js"
            ],
            "responses": [
              "You can use `else if` to check additional conditions if the first is false:\n\tlet hour = 9;\n\tif (hour >= 12) {\n\t\tconsole.log('It is afternoon');\n\t} else if (hour >= 6) {\n\t\tconsole.log('It is morning');\n\t} else {\n\t\tconsole.log('It is night');\n\t}",
              "Example of `else if` to compare more than one condition:\n\tlet number = 5;\n\tif (number > 10) {\n\t\tconsole.log('The number is greater than 10');\n\t} else if (number === 5) {\n\t\tconsole.log('The number is 5');\n\t} else {\n\t\tconsole.log('The number is less than 5');\n\t}",
              "Using `else if` to create a more specific block of conditions:\n\tlet age = 25;\n\tif (age >= 18) {\n\t\tconsole.log('You are an adult');\n\t} else if (age >= 13) {\n\t\tconsole.log('You are a teenager');\n\t} else {\n\t\tconsole.log('You are a child');\n\t}"
            ]
          },
          {
            "tag": "basic_while_structure_js",
            "patterns": [
              "how to use a while loop in js",
              "give me an example of a while loop in javascript",
              "how does the while loop work in js",
              "how is a while loop structured in javascript"
            ],
            "responses": [
              "The basic structure of a `while` loop is as follows:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}\nThis loop will continue running as long as the condition is true.",
              "Basic example of a `while` loop:\n\tlet number = 0;\n\twhile (number < 5) {\n\t\tconsole.log(number);\n\t\tnumber++;\n\t}",
              "A `while` loop will continue until the condition is false:\n\tlet counter = 0;\n\twhile (counter < 3) {\n\t\tconsole.log('Counting:', counter);\n\t\tcounter++;\n\t}"
            ]
          },
          {
            "tag": "conditions_in_while_js",
            "patterns": [
              "how to set a condition inside a while loop in js",
              "give me examples of conditions inside a while loop in js",
              "how to use conditionals in a while loop in javascript",
              "how to evaluate conditions in a while loop in js"
            ],
            "responses": [
              "You can set a condition inside the `while` to keep iterating while it's true:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
              "Condition inside a `while` loop to exit after 5 iterations:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
              "You can use a complex logical condition inside the `while`:\n\tlet number = 1;\n\twhile (number <= 10) {\n\t\tif (number % 2 === 0) {\n\t\t\tconsole.log(number + ' is even');\n\t\t}\n\t\tnumber++;\n\t}"
            ]
          },
          {
            "tag": "using_break_in_while_js",
            "patterns": [
              "how to use break in a while loop in js",
              "give me an example of break in a while loop in javascript",
              "how to stop a while loop with break in js",
              "how to exit a while loop in javascript"
            ],
            "responses": [
              "You can use `break` to exit a `while` loop when a condition is met:\n\tlet i = 0;\n\twhile (i < 10) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
              "Use `break` to exit the loop before it ends:\n\tlet number = 1;\n\twhile (number <= 10) {\n\t\tif (number === 7) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(number);\n\t\tnumber++;\n\t}",
              "An example of how to exit a `while` loop with `break`:\n\tlet counter = 0;\n\twhile (counter < 10) {\n\t\tif (counter === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(counter);\n\t\tcounter++;\n\t}"
            ]
          },
          {
            "tag": "uso_continue_en_while_js",
            "patterns": [
              "how to use continue in a while loop in js",
              "give me an example of continue in a while loop in javascript",
              "how to skip an iteration with continue in while in js",
              "how does continue work in a while loop in javascript"
            ],
            "responses": [
              "You can use `continue` to skip the current iteration and proceed with the next one in a `while` loop:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
              "Example of how to use `continue` to skip an iteration:\n\tlet number = 0;\n\twhile (number < 10) {\n\t\tif (number % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(number);\n\t\tnumber++;\n\t}",
              "If you want to skip odd numbers inside a `while` loop, you can use `continue`:\n\tlet i = 0;\n\twhile (i <= 10) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}"
            ]
          },
          {
            "tag": "basic_structure_do_while_js",
            "patterns": [
              "how to use a do while loop in js",
              "give me an example of a do while loop in javascript",
              "how does a do while loop work in js",
              "how is a do while loop structured in javascript"
            ],
            "responses": [
              "The basic structure of a `do-while` loop is as follows:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);\nThe loop executes the code inside the `do` block at least once, and then evaluates the condition in the `while`.",
              "Basic example of a `do-while` loop:\n\tlet number = 0;\n\tdo {\n\t\tconsole.log(number);\n\t\tnumber++;\n\t} while (number < 3);",
              "A `do-while` loop ensures the code block is executed at least once, even if the condition is false from the beginning:\n\tlet counter = 0;\n\tdo {\n\t\tconsole.log(counter);\n\t\tcounter++;\n\t} while (counter > 3);"
            ]
          },
          {
            "tag": "conditions_in_do_while_js",
            "patterns": [
              "how to put a condition inside a do while loop in js",
              "give me examples of conditions inside a do while loop in js",
              "how to use conditionals in a do while in javascript",
              "how to evaluate conditions in a do while loop in js"
            ],
            "responses": [
              "You can put a condition inside the `do-while` to continue iterating while it is true:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
              "Example of how to use a condition in a `do-while` loop to check if the number is even:\n\tlet number = 1;\n\tdo {\n\t\tif (number % 2 === 0) {\n\t\t\tconsole.log(number + ' is even');\n\t\t}\n\t\tnumber++;\n\t} while (number <= 10);",
              "You can use a condition to exit the loop with `break` if a certain condition is met:\n\tlet counter = 0;\n\tdo {\n\t\tif (counter === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(counter);\n\t\tcounter++;\n\t} while (counter < 10);"
            ]
          },
          {
            "tag": "using_break_in_do_while_js",
            "patterns": [
              "how to use break in a do while loop in js",
              "give me an example of break in a do while loop in javascript",
              "how to exit a do while loop with break in js",
              "how to stop a do while loop with break in javascript"
            ],
            "responses": [
              "You can use `break` to exit a `do-while` loop when a condition is met:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
              "Use `break` to exit the loop before it completes:\n\tlet number = 0;\n\tdo {\n\t\tif (number === 2) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(number);\n\t\tnumber++;\n\t} while (number < 10);",
              "An example of how to exit a `do-while` loop with `break`:\n\tlet counter = 0;\n\tdo {\n\t\tif (counter === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(counter);\n\t\tcounter++;\n\t} while (counter < 10);"
            ]
          },
          {
            "tag": "using_continue_in_do_while_js",
            "patterns": [
              "how to use continue in a do while loop in js",
              "give me an example of continue in a do while loop in javascript",
              "how to skip an iteration with continue in do while in js",
              "how does continue work in a do while loop in javascript"
            ],
            "responses": [
              "You can use `continue` to skip the current iteration and proceed with the next one in a `do-while` loop:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
              "Example of how to use `continue` to skip an iteration:\n\tlet number = 0;\n\tdo {\n\t\tif (number % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(number);\n\t\tnumber++;\n\t} while (number < 10);",
              "If you want to skip odd numbers inside a `do-while` loop, you can use `continue`:\n\tlet i = 0;\n\tdo {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i <= 10);"
            ]
          },
          {
            "tag": "basic_structure_switch_js",
            "patterns": [
              "how to use a switch in js",
              "give me an example of a switch in javascript",
              "how does a switch work in js",
              "how is a switch structured in javascript"
            ],
            "responses": [
              "The basic structure of a `switch` is as follows:\n\tlet day = 2;\n\tswitch (day) {\n\t\tcase 1:\n\t\t\tconsole.log('Monday');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Tuesday');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Wednesday');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Invalid day');\n\t}",
              "Basic example of a `switch`:\n\tlet month = 3;\n\tswitch (month) {\n\t\tcase 1:\n\t\t\tconsole.log('January');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('February');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('March');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Invalid month');\n\t}",
              "A `switch` in JavaScript evaluates an expression and compares its value with the conditions (`case`); if it matches, it executes that block of code:\n\tlet color = 'red';\n\tswitch (color) {\n\t\tcase 'red':\n\t\t\tconsole.log('Red color selected');\n\t\t\tbreak;\n\t\tcase 'blue':\n\t\t\tconsole.log('Blue color selected');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unrecognized color');\n\t}"
            ]
          },
          {
            "tag": "use_break_in_switch_js",
            "patterns": [
              "how to use break in a switch in js",
              "give me an example of break in a switch in javascript",
              "how to exit a switch with break in js",
              "how to end a case in switch in javascript",
              "what is break used for in a switch in js"
            ],
            "responses": [
              "Within a `switch`, `break` is used to exit the structure after executing a block of code for a `case`:\n\tlet day = 2;\n\tswitch (day) {\n\t\tcase 1:\n\t\t\tconsole.log('Monday');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Tuesday');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Invalid day');\n\t}",
              "A `break` prevents the `switch` from continuing to evaluate cases after finding the first match:\n\tlet month = 3;\n\tswitch (month) {\n\t\tcase 1:\n\t\t\tconsole.log('January');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('February');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('March');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Invalid month');\n\t}",
              "`break` is essential in a `switch` to avoid executing the next `case`, even if the condition does not match:\n\tlet color = 'red';\n\tswitch (color) {\n\t\tcase 'red':\n\t\t\tconsole.log('Red color selected');\n\t\t\tbreak;\n\t\tcase 'blue':\n\t\t\tconsole.log('Blue color selected');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unrecognized color');\n\t}"
            ]
          },
          {
            "tag": "use_default_in_switch_js",
            "patterns": [
              "how to use default in a switch in js",
              "give me an example of default in a switch in javascript",
              "how to handle unexpected values in switch with default in js",
              "how to use the default case in switch in javascript"
            ],
            "responses": [
              "`default` in a `switch` handles any value that does not match any of the `case` statements. Example:\n\tlet month = 10;\n\tswitch (month) {\n\t\tcase 1:\n\t\t\tconsole.log('January');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('February');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Invalid month');\n\t}",
              "Using `default` allows you to handle any unforeseen case. Example:\n\tlet number = 7;\n\tswitch (number) {\n\t\tcase 1:\n\t\t\tconsole.log('One');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Two');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unrecognized number');\n\t}",
              "`default` is useful for handling any unexpected input that does not match a specific `case`:\n\tlet color = 'green';\n\tswitch (color) {\n\t\tcase 'red':\n\t\t\tconsole.log('Red color selected');\n\t\t\tbreak;\n\t\tcase 'blue':\n\t\t\tconsole.log('Blue color selected');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unrecognized color');\n\t}"
            ]
          },
          {
            "tag": "multiple_cases_in_switch_js",
            "patterns": [
              "how to handle multiple cases in a switch in js",
              "give me an example of switch with multiple cases in javascript",
              "how to group multiple cases in a switch in js",
              "how to use multiple cases in a switch in javascript"
            ],
            "responses": [
              "You can handle multiple cases in a `switch` by grouping them without using `break` between them:\n\tlet fruit = 'apple';\n\tswitch (fruit) {\n\t\tcase 'apple':\n\t\tcase 'pear':\n\t\t\tconsole.log('It is a fruit');\n\t\t\tbreak;\n\t\tcase 'carrot':\n\t\t\tconsole.log('It is a vegetable');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unrecognized input');\n\t}",
              "Grouping multiple cases is useful if you want to execute the same code for several options:\n\tlet number = 3;\n\tswitch (number) {\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\t\tconsole.log('Number 1, 2, or 3');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Other number');\n\t}",
              "Example of how to group multiple `case` statements to execute the same action:\n\tlet color = 'green';\n\tswitch (color) {\n\t\tcase 'green':\n\t\tcase 'yellow':\n\t\t\tconsole.log('Warm color');\n\t\t\tbreak;\n\t\tcase 'blue':\n\t\t\tconsole.log('Cool color');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unknown color');\n\t}"
            ]
          },
          {
            "tag": "basic_function_declaration_js",
            "patterns": [
              "how to declare a function in javascript",
              "give me an example of a function in js",
              "how to create a function in javascript",
              "what is the syntax for declaring a function in js"
            ],
            "responses": [
              "The basic syntax for declaring a function in JavaScript is as follows:\n\tfunction greet() {\n\t\tconsole.log('Hello, world');\n\t}",
              "An example of a basic function in JavaScript:\n\tfunction calculateSum(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
              "To declare a function in JavaScript, simply use the `function` keyword:\n\tfunction greet(name: string): void {\n\t\tconsole.log('Hello ' + name);\n\t}"
            ]
          },
          {
            "tag": "declare_function_with_parameters_js",
            "patterns": [
              "how to declare a function with parameters in js",
              "give me an example of a function with parameters in javascript",
              "how to pass parameters to a function in js",
              "how to create a function with parameters in javascript"
            ],
            "responses": [
              "To declare a function with parameters in JavaScript, place the parameters inside parentheses after the function name:\n\tfunction greet(name: string): void {\n\t\tconsole.log('Hello, ' + name);\n\t}",
              "Example of a function with parameters:\n\tfunction multiply(a: number, b: number): number {\n\t\treturn a * b;\n\t}",
              "Parameters are defined within parentheses in the function declaration:\n\tfunction displayMessage(message: string): void {\n\t\tconsole.log(message);\n\t}"
            ]
          },
          {
            "tag": "functions_with_return_type_js",
            "patterns": [
              "how to declare a function with a return type in js",
              "give me an example of a function with a return type in javascript",
              "how to specify the return type of a function in js",
              "how to return a value from a function in javascript"
            ],
            "responses": [
              "To specify the return type of a function in JavaScript, place the type after the parentheses:\n\tfunction add(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
              "Example of a function with a return type:\n\tfunction getName(): string {\n\t\treturn 'John';\n\t}",
              "In JavaScript, you can specify the return type as follows:\n\tfunction isPositive(number: number): boolean {\n\t\treturn number > 0;\n\t}"
            ]
          },
          {
            "tag": "functions_with_default_values_js",
            "patterns": [
              "how to declare a function with default values in js",
              "give me an example of a function with default parameters in javascript",
              "how to set default values in a function in js",
              "how to assign a default value to a parameter in javascript"
            ],
            "responses": [
              "You can assign default values to parameters as follows:\n\tfunction greet(name: string = 'John'): void {\n\t\tconsole.log('Hello, ' + name);\n\t}",
              "Example of a function with default values:\n\tfunction calculatePrice(price: number, discount: number = 0): number {\n\t\treturn price - (price * discount);\n\t}",
              "If a parameter is not passed, the default value will be used:\n\tfunction showDetails(product: string = 'Product A'): void {\n\t\tconsole.log('Details of ' + product);\n\t}"
            ]
          },
          {
            "tag": "anonymous_functions_js",
            "patterns": [
              "how to declare an anonymous function in js",
              "give me an example of an anonymous function in javascript",
              "how to use anonymous functions in js",
              "what is an anonymous function in javascript"
            ],
            "responses": [
              "An anonymous function in JavaScript is declared without a name:\n\tlet sum = function(a: number, b: number): number {\n\t\treturn a + b;\n\t};",
              "Example of an anonymous function assigned to a variable:\n\tlet greet = function(name: string): void {\n\t\tconsole.log('Hello, ' + name);\n\t};",
              "An anonymous function is useful when you need to pass a function as an argument or assign it to a variable:\n\tlet multiply = function(a: number, b: number): number {\n\t\treturn a * b;\n\t};"
            ]
          },
          {
            "tag": "arrow_functions_js",
            "patterns": [
              "how to use an arrow function in js",
              "give me an example of an arrow function in javascript",
              "how to declare an arrow function in js",
              "what are arrow functions in javascript"
            ],
            "responses": [
              "Arrow functions in JavaScript have a shorter syntax. Example:\n\tlet sum = (a: number, b: number): number => {\n\t\treturn a + b;\n\t};",
              "An example of an arrow function in JavaScript:\n\tlet greet = (name: string): void => {\n\t\tconsole.log('Hello, ' + name);\n\t};",
              "Arrow functions are useful when you want a more concise function:\n\tlet multiply = (a: number, b: number): number => a * b;"
            ]
          },
          {
            "tag": "recursive_functions_js",
            "patterns": [
              "how to declare a recursive function in js",
              "give me an example of a recursive function in javascript",
              "how to make a function call itself in js",
              "how to create a recursive function in javascript"
            ],
            "responses": [
              "A recursive function is one that calls itself. Example:\n\tfunction factorial(n: number): number {\n\t\tif (n === 0) return 1;\n\t\treturn n * factorial(n - 1);\n\t}",
              "Example of a recursive function to calculate the sum of numbers from 1 to `n`:\n\tfunction recursiveSum(n: number): number {\n\t\tif (n === 1) return 1;\n\t\treturn n + recursiveSum(n - 1);\n\t}",
              "A recursive function can be useful for solving complex problems by dividing them into simpler subproblems:\n\tfunction fibonacci(n: number): number {\n\t\tif (n <= 1) return n;\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2);\n\t}"
            ]
          },
          {
            "tag": "declare_object_js",
            "patterns": [
              "how to declare an object in javascript",
              "give me an example of an object in js",
              "how to create an object in javascript",
              "what is the syntax for declaring an object in js"
            ],
            "responses": [
              "In JavaScript, you can declare an object as follows:\n\tlet person = { name: 'John', age: 25 };",
              "Basic example of an object:\n\tlet book = { title: 'JavaScript for Beginners', author: 'John Doe', year: 2021 };",
              "The syntax for declaring an object is as follows:\n\tlet car = { brand: 'Toyota', model: 'Corolla', year: 2022 };"
            ]
          },
          {
            "tag": "typed_object_js",
            "patterns": [
              "how to type an object in javascript",
              "give me an example of a typed object in js",
              "how to use types in an object in javascript",
              "how to declare an object with types in js"
            ],
            "responses": [
              "To type an object in JavaScript, you can use an interface or type:\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\tlet person: Person = { name: 'John', age: 25 };",
              "You can type an object as follows:\n\tlet car: { brand: string; model: string; year: number } = { brand: 'Toyota', model: 'Corolla', year: 2022 };",
              "An example of typing using interfaces:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t}\n\tlet myBook: Book = { title: 'JavaScript for Everyone', author: 'Peter' };"
            ]
          },
          {
            "tag": "optional_properties_object_js",
            "patterns": [
              "how to declare optional properties in an object in js",
              "give me an example of an object with optional properties in javascript",
              "how to make a property optional in js",
              "how to declare an optional property in an object in javascript"
            ],
            "responses": [
              "You can declare optional properties using `?` in the interface or type:\n\tinterface Person {\n\t\tname: string;\n\t\tage?: number;\n\t}\n\tlet person: Person = { name: 'John' };",
              "Example of an optional property:\n\tinterface Car {\n\t\tbrand: string;\n\t\tmodel: string;\n\t\tyear?: number;\n\t}\n\tlet car: Car = { brand: 'Toyota', model: 'Corolla' };",
              "When declaring an object with optional properties:\n\tinterface User {\n\t\tname: string;\n\t\tage?: number;\n\t\temail?: string;\n\t}\n\tlet user: User = { name: 'Anna' };"
            ]
          },
          {
            "tag": "object_methods_js",
            "patterns": [
              "how to add methods to an object in javascript",
              "give me an example of an object with methods in js",
              "how to declare a method inside an object in js",
              "how to make an object have methods in javascript"
            ],
            "responses": [
              "You can add methods inside an object like this:\n\tlet person = {\n\t\tname: 'John',\n\t\tage: 25,\n\t\tgreet: function() {\n\t\t\tconsole.log('Hello, I am ' + this.name);\n\t\t}\n\t};",
              "Example of an object with a method:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tdisplayInfo: function() {\n\t\t\tconsole.log(this.brand + ' ' + this.model);\n\t\t}\n\t};",
              "You can declare methods inside an object using functions:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John',\n\t\tprintInfo: function() {\n\t\t\tconsole.log(this.title + ' by ' + this.author);\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "access_object_properties_js",
            "patterns": [
              "how to access a property of an object in javascript",
              "give me an example of accessing object properties in js",
              "how to get the value of an object property in javascript",
              "how to read object properties in js"
            ],
            "responses": [
              "You can access object properties using dot notation:\n\tlet person = { name: 'John', age: 25 };\n\tconsole.log(person.name);",
              "Example of accessing properties:\n\tlet car = { brand: 'Toyota', model: 'Corolla' };\n\tconsole.log(car.brand);",
              "You can also use bracket notation to access properties:\n\tlet book = { title: 'JavaScript', author: 'John' };\n\tconsole.log(book['title']);"
            ]
          },
          {
            "tag": "modify_object_properties_js",
            "patterns": [
              "how to modify an object property in javascript",
              "give me an example of modifying object properties in js",
              "how to change the value of an object property in javascript",
              "how to update object properties in js"
            ],
            "responses": [
              "You can modify an object property using dot notation:\n\tlet person = { name: 'John', age: 25 };\n\tperson.age = 30;",
              "Example of modifying a property:\n\tlet car = { brand: 'Toyota', model: 'Corolla' };\n\tcar.model = 'Camry';",
              "To change the value of a property, you can do this:\n\tlet book = { title: 'JavaScript', author: 'John' };\n\tbook.title = 'Advanced JavaScript';"
            ]
          },
          {
            "tag": "delete_object_property_js",
            "patterns": [
              "how to delete a property from an object in javascript",
              "give me an example of deleting a property from an object in js",
              "how to remove a property from an object in javascript",
              "how to get rid of a property in an object in js"
            ],
            "responses": [
              "You can delete a property from an object using the `delete` operator:\n\tlet person = { name: 'Juan', age: 25 };\n\tdelete person.age;",
              "Example of deleting a property:\n\tlet car = { brand: 'Toyota', model: 'Corolla' };\n\tdelete car.model;",
              "Use the `delete` operator to remove properties:\n\tlet book = { title: 'JavaScript', author: 'Juan' };\n\tdelete book.author;"
            ]
          },
          {
            "tag": "readonly_object_properties_js",
            "patterns": [
              "how to declare readonly properties in a javascript object",
              "give me an example of an object with readonly properties in js",
              "how to make a property readonly in javascript",
              "how to declare an object with readonly properties in js"
            ],
            "responses": [
              "You can declare readonly properties using `readonly`:\n\tinterface Person {\n\t\treadonly name: string;\n\t\tage: number;\n\t}\n\tlet person: Person = { name: 'Juan', age: 25 };",
              "Example of an object with readonly properties:\n\tlet car: { readonly brand: string; model: string } = { brand: 'Toyota', model: 'Corolla' };",
              "The `readonly` keyword ensures a property cannot be modified:\n\tlet book: { readonly title: string; author: string } = { title: 'JavaScript', author: 'Juan' };"
            ]
          },
          {
            "tag": "declare_object_methods_js",
            "patterns": [
              "how to declare a method in a javascript object",
              "give me an example of an object with a method in javascript",
              "how to add a method to an object in js",
              "how to make an object have a method in javascript"
            ],
            "responses": [
              "You can declare a method in an object like this:\n\tlet person = {\n\t\tname: 'Juan',\n\t\tage: 25,\n\t\tgreet: function() {\n\t\t\tconsole.log('Hello, I am ' + this.name);\n\t\t}\n\t};",
              "Example of an object with a method:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tshowInfo: function() {\n\t\t\tconsole.log(this.brand + ' ' + this.model);\n\t\t}\n\t};",
              "You can declare methods inside an object using functions:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'Juan',\n\t\tprintInfo: function() {\n\t\t\tconsole.log(this.title + ' by ' + this.author);\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "arrow_methods_object_js",
            "patterns": [
              "how to declare an arrow method in a javascript object",
              "give me an example of an arrow method in an object in javascript",
              "how to use arrow methods in objects in javascript",
              "how to make an object have an arrow method in js"
            ],
            "responses": [
              "You can use an arrow function as a method like this:\n\tlet person = {\n\t\tname: 'Juan',\n\t\tage: 25,\n\t\tgreet: () => {\n\t\t\tconsole.log('Hello, I am ' + this.name);\n\t\t}\n\t};",
              "Example of an arrow method:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tshowInfo: () => {\n\t\t\tconsole.log(this.brand + ' ' + this.model);\n\t\t}\n\t};",
              "Arrow methods do not have their own `this`, so they can be used in cases like this:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'Juan',\n\t\tprintInfo: () => {\n\t\t\tconsole.log(this.title + ' by ' + this.author);\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "methods_with_parameters_object_js",
            "patterns": [
              "how to declare a method with parameters in a javascript object",
              "give me an example of a method with parameters in an object in javascript",
              "how to pass parameters to a method in a javascript object",
              "how to make a method receive parameters in an object in js"
            ],
            "responses": [
              "You can add parameters to a method in an object like this:\n\tlet person = {\n\t\tname: 'Juan',\n\t\tage: 25,\n\t\tchangeName: function(newName) {\n\t\t\tthis.name = newName;\n\t\t}\n\t};",
              "Example of a method with parameters:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tchangeModel: function(newModel) {\n\t\t\tthis.model = newModel;\n\t\t}\n\t};",
              "You can define a method with parameters like this:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'Juan',\n\t\tupdateTitle: function(newTitle) {\n\t\t\tthis.title = newTitle;\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "readonly_methods_object_js",
            "patterns": [
              "how to declare a readonly method in a javascript object",
              "give me an example of a readonly method in an object in javascript",
              "how to make a method readonly in a javascript object",
              "how to declare a readonly method in an object in js"
            ],
            "responses": [
              "To make a method readonly, you can use `readonly` in the method:\n\tlet person = {\n\t\treadonly name: string;\n\t\tage: number,\n\t\tgetName: function() {\n\t\t\treturn this.name;\n\t\t}\n\t};",
              "Example of a readonly method:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tgetBrand: function() {\n\t\t\treturn this.brand;\n\t\t}\n\t};",
              "You can declare a readonly method like this:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tgetTitle: function() {\n\t\t\treturn this.title;\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "async_methods_object_js",
            "patterns": [
              "how to declare an async method in a javascript object",
              "give me an example of an async method in an object in javascript",
              "how to use async and await in a method in a javascript object",
              "how to make an async method in an object in js"
            ],
            "responses": [
              "You can declare an async method in an object using `async` and `await`:\n\tlet person = {\n\t\tname: 'Juan',\n\t\tage: 25,\n\t\tasync getName() {\n\t\t\tlet result = await fetch('url');\n\t\t\treturn result.json();\n\t\t}\n\t};",
              "Example of an async method:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tasync getModel() {\n\t\t\tlet response = await fetch('url');\n\t\t\treturn response.json();\n\t\t}\n\t};",
              "You can use `async` and `await` for async tasks in a method:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tasync getDetails() {\n\t\t\tlet details = await fetch('url');\n\t\t\treturn details.json();\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "static_methods_object_js",
            "patterns": [
              "how to declare a static method in an object in javascript",
              "give me an example of a static method in an object in javascript",
              "how to use static methods in objects in javascript",
              "how to declare a static method in js"
            ],
            "responses": [
              "You can declare a static method using `static`:\n\tclass Person {\n\t\tstatic greet() {\n\t\t\tconsole.log('Hello');\n\t\t}\n\t}\n\tPerson.greet();",
              "Example of a static method:\n\tclass Car {\n\t\tstatic showInfo() {\n\t\t\tconsole.log('Car information');\n\t\t}\n\t}\n\tCar.showInfo();",
              "Static methods can be declared in a class like this:\n\tclass Book {\n\t\tstatic showTitle() {\n\t\t\tconsole.log('Book title');\n\t\t}\n\t}\n\tBook.showTitle();"
            ]
          },
          {
            "tag": "methods_this_object_js",
            "patterns": [
              "how to use this inside a method in js",
              "give me an example of a method with this in an object in javascript",
              "how to make a method access properties using this in javascript",
              "how does this work inside a method in javascript"
            ],
            "responses": [
              "Inside a method, `this` refers to the current object:\n\tlet person = {\n\t\tname: 'John',\n\t\tage: 25,\n\t\tshowAge: function() {\n\t\t\tconsole.log(this.age);\n\t\t}\n\t};",
              "Example of using `this`:\n\tlet car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tshowBrand: function() {\n\t\t\tconsole.log(this.brand);\n\t\t}\n\t};",
              "When you use `this`, you access the properties of the object the method belongs to:\n\tlet book = {\n\t\ttitle: 'JavaScript',\n\t\tshowTitle: function() {\n\t\t\tconsole.log(this.title);\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "basic_interface_declaration_js",
            "patterns": [
              "how to declare an interface in javascript",
              "give me an example of how to declare an interface in js",
              "how is an interface declared in javascript",
              "show me an example of an interface in javascript"
            ],
            "responses": [
              "You can declare an interface like this:\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\tlet person: Person = {\n\t\tname: 'John',\n\t\tage: 25\n\t};",
              "Basic example of an interface:\n\tinterface Car {\n\t\tbrand: string;\n\t\tmodel: string;\n\t}\n\tlet car: Car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla'\n\t};",
              "An interface is declared like this:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t}\n\tlet book: Book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John'\n\t};"
            ]
          },
          {
            "tag": "interface_extension_js",
            "patterns": [
              "how to extend an interface in javascript",
              "give me an example of interface extension in javascript",
              "how to make one interface inherit another in js",
              "can you extend an interface in javascript"
            ],
            "responses": [
              "You can extend an interface using `extends`:\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\tinterface Employee extends Person {\n\t\tposition: string;\n\t}\n\tlet employee: Employee = {\n\t\tname: 'John',\n\t\tage: 25,\n\t\tposition: 'Developer'\n\t};",
              "Example of interface extension:\n\tinterface Car {\n\t\tbrand: string;\n\t\tmodel: string;\n\t}\n\tinterface SportsCar extends Car {\n\t\tmaxSpeed: number;\n\t}\n\tlet sportsCar: SportsCar = {\n\t\tbrand: 'Ferrari',\n\t\tmodel: 'F8',\n\t\tmaxSpeed: 340\n\t};",
              "An interface can extend another to add more properties:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t}\n\tinterface Ebook extends Book {\n\t\tsizeMB: number;\n\t}\n\tlet ebook: Ebook = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John',\n\t\tsizeMB: 10\n\t};"
            ]
          },
          {
            "tag": "interface_methods_js",
            "patterns": [
              "how to declare a method in an interface in javascript",
              "give me an example of an interface with a method in javascript",
              "how to add methods to an interface in js",
              "can methods be declared in an interface in javascript"
            ],
            "responses": [
              "You can declare methods inside an interface like this:\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t\tgreet(): void;\n\t}\n\tlet person: Person = {\n\t\tname: 'John',\n\t\tage: 25,\n\t\tgreet: function() {\n\t\t\tconsole.log('Hello, I am ' + this.name);\n\t\t}\n\t};",
              "Example of an interface with a method:\n\tinterface Car {\n\t\tbrand: string;\n\t\tmodel: string;\n\t\tshowInfo(): void;\n\t}\n\tlet car: Car = {\n\t\tbrand: 'Toyota',\n\t\tmodel: 'Corolla',\n\t\tshowInfo: function() {\n\t\t\tconsole.log(this.brand + ' ' + this.model);\n\t\t}\n\t};",
              "You can declare an interface with a method like this:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t\tprintInfo(): void;\n\t}\n\tlet book: Book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John',\n\t\tprintInfo: function() {\n\t\t\tconsole.log(this.title + ' by ' + this.author);\n\t\t}\n\t};"
            ]
          },
          {
            "tag": "interfaces_optional_properties_js",
            "patterns": [
              "how to declare optional properties in an interface in javascript",
              "give me an example of optional properties in an interface in javascript",
              "how to make a property optional in an interface in js",
              "can optional properties be made in an interface in javascript"
            ],
            "responses": [
              "You can make a property optional using the `?` sign:\n\tinterface Person {\n\t\tname: string;\n\t\tage?: number;\n\t}\n\tlet person: Person = {\n\t\tname: 'John'\n\t};",
              "Example of an optional property in an interface:\n\tinterface Car {\n\t\tmake: string;\n\t\tmodel: string;\n\t\tcolor?: string;\n\t}\n\tlet car: Car = {\n\t\tmake: 'Toyota',\n\t\tmodel: 'Corolla'\n\t};",
              "To declare optional properties, you can use `?`:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t\tpublicationDate?: string;\n\t}\n\tlet book: Book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John'\n\t};"
            ]
          },
          {
            "tag": "interfaces_readonly_properties_js",
            "patterns": [
              "how to declare readonly properties in an interface in javascript",
              "give me an example of a readonly property in an interface in javascript",
              "how to make a property readonly in an interface in js",
              "can readonly properties be made in an interface in javascript"
            ],
            "responses": [
              "You can make a property readonly using `readonly`:\n\tinterface Person {\n\t\treadonly name: string;\n\t\tage: number;\n\t}\n\tlet person: Person = {\n\t\tname: 'John',\n\t\tage: 25\n\t};",
              "Example of a readonly property:\n\tinterface Car {\n\t\treadonly make: string;\n\t\tmodel: string;\n\t}\n\tlet car: Car = {\n\t\tmake: 'Toyota',\n\t\tmodel: 'Corolla'\n\t};",
              "To declare readonly properties, you can use `readonly`:\n\tinterface Book {\n\t\treadonly title: string;\n\t\tauthor: string;\n\t}\n\tlet book: Book = {\n\t\ttitle: 'JavaScript',\n\t\tauthor: 'John'\n\t};"
            ]
          },
          {
            "tag": "interfaces_indices_js",
            "patterns": [
              "how to declare indices in an interface in javascript",
              "give me an example of a property with an index in an interface in javascript",
              "how to use indices for properties in an interface in js",
              "can properties with indices be declared in an interface in javascript"
            ],
            "responses": [
              "You can declare indices using the following syntax:\n\tinterface Person {\n\t\t[name: string]: number;\n\t}\n\tlet ages: Person = {\n\t\t'John': 25,\n\t\t'Ana': 30\n\t};",
              "Example with an index in an interface:\n\tinterface Car {\n\t\t[model: string]: number;\n\t}\n\tlet prices: Car = {\n\t\t'Corolla': 25000,\n\t\t'Camry': 35000\n\t};",
              "To use indices in an interface, you can do the following:\n\tinterface Book {\n\t\t[author: string]: string;\n\t}\n\tlet bookAuthors: Book = {\n\t\t'John': 'JavaScript',\n\t\t'Peter': 'JavaScript'\n\t};"
            ]
          },
          {
            "tag": "interfaces_functions_js",
            "patterns": [
              "how to use an interface in a function in javascript",
              "give me an example of a function with an interface in javascript",
              "how to apply an interface to a function in js",
              "can interfaces be used with functions in javascript"
            ],
            "responses": [
              "You can use an interface to define the parameters of a function:\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\tfunction greet(person: Person) {\n\t\tconsole.log('Hello, ' + person.name);\n\t}\n\tgreet({name: 'John', age: 25});",
              "Example of a function with an interface:\n\tinterface Car {\n\t\tmake: string;\n\t\tmodel: string;\n\t}\n\tfunction showCar(car: Car) {\n\t\tconsole.log(car.make + ' ' + car.model);\n\t}\n\tshowCar({make: 'Toyota', model: 'Corolla'});",
              "You can use interfaces to define the types of functions:\n\tinterface Book {\n\t\ttitle: string;\n\t\tauthor: string;\n\t}\n\tfunction printInfo(book: Book) {\n\t\tconsole.log(book.title + ' by ' + book.author);\n\t}\n\tprintInfo({title: 'JavaScript', author: 'John'});"
            ]
          },
          {
            "tag": "basic_enum_declaration_js",
            "patterns": [
              "how to declare an enum in js",
              "give me an example of an enum in javascript",
              "how to declare an enum in javascript",
              "show me an example of an enum in javascript"
            ],
            "responses": [
              "You can declare an enum like this:\n\tenum Direction {\n\t\tUp,\n\t\tDown,\n\t\tLeft,\n\t\tRight\n\t}\n\tlet myDirection: Direction = Direction.Up;",
              "Basic example of an enum:\n\tenum State {\n\t\tActive,\n\t\tInactive,\n\t\tPending\n\t}\n\tlet userState: State = State.Active;",
              "An enum in JavaScript is declared as follows:\n\tenum Color {\n\t\tRed,\n\t\tGreen,\n\t\tBlue\n\t}\n\tlet favoriteColor: Color = Color.Green;"
            ]
          },
          {
            "tag": "enum_specific_values_js",
            "patterns": [
              "how to assign values to an enum in javascript",
              "give me an example of an enum with specific values in javascript",
              "how to assign a value to each element in an enum in js",
              "can you assign values to an enum in javascript"
            ],
            "responses": [
              "You can assign values to enum elements like this:\n\tenum Direction {\n\t\tUp = 1,\n\t\tDown = 2,\n\t\tLeft = 3,\n\t\tRight = 4\n\t}\n\tlet myDirection: Direction = Direction.Up;",
              "Example of an enum with specific values:\n\tenum State {\n\t\tActive = 1,\n\t\tInactive = 0,\n\t\tPending = 2\n\t}\n\tlet userState: State = State.Active;",
              "An enum with specific values is declared as follows:\n\tenum Color {\n\t\tRed = '#FF0000',\n\t\tGreen = '#00FF00',\n\t\tBlue = '#0000FF'\n\t}\n\tlet favoriteColor: Color = Color.Green;"
            ]
          },
          {
            "tag": "enum_string_values_js",
            "patterns": [
              "how to declare an enum with string values in javascript",
              "give me an example of an enum with strings in javascript",
              "how to assign string values in an enum in js",
              "can you use string values in an enum in javascript"
            ],
            "responses": [
              "You can use string values in an enum like this:\n\tenum Direction {\n\t\tUp = 'UP',\n\t\tDown = 'DOWN',\n\t\tLeft = 'LEFT',\n\t\tRight = 'RIGHT'\n\t}\n\tlet myDirection: Direction = Direction.Up;",
              "Example of an enum with string values:\n\tenum State {\n\t\tActive = 'active',\n\t\tInactive = 'inactive',\n\t\tPending = 'pending'\n\t}\n\tlet userState: State = State.Active;",
              "An enum with string values is declared as follows:\n\tenum Color {\n\t\tRed = 'red',\n\t\tGreen = 'green',\n\t\tBlue = 'blue'\n\t}\n\tlet favoriteColor: Color = Color.Green;"
            ]
          },
          {
            "tag": "enum_value_access_js",
            "patterns": [
              "how to access a value of an enum in javascript",
              "give me an example of accessing enum values in javascript",
              "how to get the value of an enum in js",
              "can you access the values of an enum in javascript"
            ],
            "responses": [
              "You can access a value of an enum like this:\n\tenum Direction {\n\t\tUp,\n\t\tDown,\n\t\tLeft,\n\t\tRight\n\t}\n\tlet myDirection: Direction = Direction.Up;\n\tconsole.log(myDirection); // 0",
              "Example of accessing a value of an enum:\n\tenum State {\n\t\tActive = 1,\n\t\tInactive = 0,\n\t\tPending = 2\n\t}\n\tlet userState: State = State.Active;\n\tconsole.log(userState); // 1",
              "To access a value of an enum, you can do the following:\n\tenum Color {\n\t\tRed = '#FF0000',\n\t\tGreen = '#00FF00',\n\t\tBlue = '#0000FF'\n\t}\n\tlet favoriteColor: Color = Color.Green;\n\tconsole.log(favoriteColor); // '#00FF00'"
            ]
          },
          {
            "tag": "enum_iteration_js",
            "patterns": [
              "how to iterate over enum values in javascript",
              "give me an example of iterating an enum in javascript",
              "how to loop through an enum in js",
              "can you iterate over enum values in javascript"
            ],
            "responses": [
              "You can iterate over enum values using `for...in`:\n\tenum Direction {\n\t\tUp,\n\t\tDown,\n\t\tLeft,\n\t\tRight\n\t}\n\tfor (let direction in Direction) {\n\t\tconsole.log(direction);\n\t}",
              "Example of iterating over an enum:\n\tenum State {\n\t\tActive = 1,\n\t\tInactive = 0,\n\t\tPending = 2\n\t}\n\tfor (let state in State) {\n\t\tconsole.log(state);\n\t}",
              "You can loop through enum values this way:\n\tenum Color {\n\t\tRed = '#FF0000',\n\t\tGreen = '#00FF00',\n\t\tBlue = '#0000FF'\n\t}\n\tfor (let color in Color) {\n\t\tconsole.log(color);\n\t}"
            ]
          },
          {
            "tag": "enum_switch_js",
            "patterns": [
              "how to use an enum in a switch in javascript",
              "give me an example of using an enum in a switch in javascript",
              "how to apply an enum in a switch in js",
              "can you use enums in a switch in javascript"
            ],
            "responses": [
              "You can use an enum in a switch like this:\n\tenum Direction {\n\t\tUp,\n\t\tDown,\n\t\tLeft,\n\t\tRight\n\t}\n\tlet myDirection: Direction = Direction.Up;\n\tswitch (myDirection) {\n\t\tcase Direction.Up:\n\t\t\tconsole.log('You are going up');\n\t\t\tbreak;\n\t\tcase Direction.Down:\n\t\t\tconsole.log('You are going down');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unknown direction');\n\t}",
              "Example of using an enum in a switch:\n\tenum State {\n\t\tActive = 1,\n\t\tInactive = 0,\n\t\tPending = 2\n\t}\n\tlet userState: State = State.Active;\n\tswitch (userState) {\n\t\tcase State.Active:\n\t\t\tconsole.log('The user is active');\n\t\t\tbreak;\n\t\tcase State.Inactive:\n\t\t\tconsole.log('The user is inactive');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unknown state');\n\t}",
              "An example with an enum in a switch would be:\n\tenum Color {\n\t\tRed = '#FF0000',\n\t\tGreen = '#00FF00',\n\t\tBlue = '#0000FF'\n\t}\n\tlet favoriteColor: Color = Color.Red;\n\tswitch (favoriteColor) {\n\t\tcase Color.Red:\n\t\t\tconsole.log('Favorite color is red');\n\t\t\tbreak;\n\t\tcase Color.Green:\n\t\t\tconsole.log('Favorite color is green');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Unknown color');\n\t}"
            ]
          },
          {
            "tag": "sequential_search_step_by_step",
            "patterns": [
              "explain step by step the sequential search in javascript",
              "how does sequential search work step by step in js",
              "can you give me an example step by step of sequential search",
              "what is the flow of sequential search in javascript",
              "I want to understand sequential search step by step"
            ],
            "responses": [
              "Here is the sequential search algorithm explained step by step:\n\n1. **Define the function**:\n\nfunction sequentialSearch(array, targetValue) {\n\nThis function takes an array and the value we want to search for.\n\n2. **Iterate through the array using a loop**:\n\nfor (let i = 0; i < array.length; i++) {\n\nWe loop through each element of the array, using the index `i` to access the values.\n\n3. **Check if the current value matches the target**:\n\nif (array[i] === targetValue) {\n    return i; // Return the index if found\n}\n\nWe compare the current value with the target value. If they match, return the index.\n\n4. **Return -1 if the value is not found**:\n\nreturn -1; // If the value is not found\n\nThis indicates that the value is not in the array.\n\n5. **Complete example**:\n\nconst numbers = [4, 2, 7, 9, 5];\nconst result = sequentialSearch(numbers, 7);\nconsole.log(result); // Output: 2\n"
            ]
          },
          {
            "tag": "for_loop_sequential_search",
            "patterns": [
              "how is the for loop implemented in sequential search in js",
              "can you give me just the for loop of the sequential search algorithm in js",
              "how does sequential search loop through the array in js",
              "I want to see the loop part of sequential search in js",
              "give me the for loop part of sequential search in js"
            ],
            "responses": [
              "The for loop in sequential search iterates through the array element by element:\n\n\nfor (let i = 0; i < array.length; i++) {\n    // Here, the elements are evaluated one by one\n}\n"
            ]
          },
          {
            "tag": "if_conditional_sequential_search",
            "patterns": [
              "how does the if condition work in sequential search in js",
              "can you give me the if conditional of the sequential search algorithm in js",
              "how does it check if the value is found in sequential search in js",
              "I want to see the if condition in sequential search in js",
              "give me the if part in sequential search in js"
            ],
            "responses": [
              "The if condition checks if the current value matches the target:\n\n\nif (array[i] === targetValue) {\n    return i; // Return the index if found\n}\n"
            ]
          },
          {
            "tag": "not_found_return_sequential_search",
            "patterns": [
              "what happens if the value is not found in sequential search in js",
              "can you give me the part where it returns -1 in js",
              "how does it return -1 in sequential search in js",
              "I want to see the return of -1 in the sequential search algorithm in js",
              "give me the part where it doesn’t find the value in sequential search in js"
            ],
            "responses": [
              "If the value is not found, the algorithm returns -1:\n\n\nreturn -1; // If the value is not found\n"
            ]
          },
          {
            "tag": "function_definition_sequential_search",
            "patterns": [
              "how is the function defined in sequential search in js",
              "can you give me just the part where the function is defined in js",
              "how does sequential search start in js",
              "I want to see the function header for sequential search in js",
              "give me the part where the function is defined in sequential search in js"
            ],
            "responses": [
              "The sequential search function is defined as follows:\n\n\nfunction sequentialSearch(array, targetValue) {\n    // Algorithm body goes here\n}\n"
            ]
          },
          {
            "tag": "sequential_search_arguments",
            "patterns": [
              "what arguments does sequential search receive in js",
              "can you explain the parameters of sequential search in js",
              "how do the arguments work in the sequential search algorithm in js",
              "what parameters does the sequential search function need in js",
              "give me the arguments for sequential search in js"
            ],
            "responses": [
              "The sequential search function takes two arguments:\n\n1. **array**: The array to be searched.\n2. **targetValue**: The value to find.\n\nExample:\n\nsequentialSearch([4, 2, 7, 9], 7);\n"
            ]
          },
          {
            "tag": "found_index_sequential_search",
            "patterns": [
              "how does it return the found index in sequential search in js",
              "can you give me the part where it returns the index in sequential search in js",
              "what does it do when the target value is found in sequential search in js",
              "I want to see how the found index is returned in sequential search in js",
              "give me the part where it returns the index in sequential search in js"
            ],
            "responses": [
              "When the target value is found, the function returns the index:\n\n\nreturn i; // Returns the index where the value was found\n"
            ]
          },
          {
            "tag": "practical_usage_sequential_search",
            "patterns": [
              "how to use sequential search in a practical case in js",
              "can you give me a practical example of sequential search in js",
              "what do I need to test sequential search in js",
              "I want to see how to use sequential search in a program in js",
              "give me an example of using sequential search in js"
            ],
            "responses": [
              "Here is a practical example of using sequential search:\n\n\nconst numbers = [1, 3, 5, 7, 9];\nconst targetValue = 7;\nconst result = sequentialSearch(numbers, targetValue);\n\nif (result !== -1) {\n    console.log(`Value found at index ${result}`);\n} else {\n    console.log('Value not found');\n}\n\nThis shows whether the value was found, its index, or indicates it is not present."
            ]
          },
          {
            "tag": "complexity_sequential_search",
            "patterns": [
              "what is the complexity of sequential search",
              "can you explain the efficiency of sequential search",
              "how efficient is the sequential search algorithm",
              "I want to know the complexity of sequential search",
              "give me the time complexity of sequential search"
            ],
            "responses": [
              "The complexity of sequential search is:\n\n- **Best case**: O(1), when the target value is the first element.\n- **Worst case**: O(n), when the target value is at the end or not in the array.\n- **Average case**: O(n/2), which simplifies to O(n).\n\nThis makes it inefficient for large arrays if the target value is not near the beginning."
            ]
          },
          {
            "tag": "binary_search_js",
            "patterns": [
              "how does binary search work in javascript",
              "what is binary search in js",
              "can you explain the binary search algorithm in javascript",
              "give me the code for the binary search algorithm in js",
              "how do I implement binary search in javascript"
            ],
            "responses": [
              "Binary search is an efficient algorithm for finding an element in a sorted array. It halves the search range at each step. Here's the basic code in JavaScript:\n\n\nfunction binarySearch(array, targetValue) {\n    let start = 0;\n    let end = array.length - 1;\n\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n\n        if (array[mid] === targetValue) {\n            return mid; // Returns the index if the value is found\n        } else if (array[mid] < targetValue) {\n            start = mid + 1; // Adjusts the start\n        } else {\n            end = mid - 1; // Adjusts the end\n        }\n    }\n\n    return -1; // Returns -1 if the value is not present\n}\n\n// Example usage\nconst numbers = [1, 3, 5, 7, 9];\nconst result = binarySearch(numbers, 7);\nconsole.log(result); // Output: 3\n"
            ]
          },
          {
            "tag": "binary_search_function_definition_js",
            "patterns": [
              "how is the function defined in binary search in javascript",
              "can you give me just the part where the function is defined in binary search",
              "how does binary search start in js",
              "I want to see the function header for binary search in javascript",
              "give me the part where the function is defined in binary search in js"
            ],
            "responses": [
              "The binary search function in JavaScript is defined as follows:\n\n\nfunction binarySearch(array, targetValue) {\n    // Algorithm body goes here\n}\n"
            ]
          },
          {
            "tag": "variable_initialization_binary_search_js",
            "patterns": [
              "how are variables initialized in binary search in javascript",
              "can you give me the part where variables are initialized in binary search",
              "how are the start, end, and mid variables set in binary search",
              "I want to see variable initialization in binary search in js",
              "give me the part where variables are initialized in binary search in js"
            ],
            "responses": [
              "In binary search, variables are initialized as follows:\n\n\nlet start = 0;\nlet end = array.length - 1;\nlet mid = Math.floor((start + end) / 2);\n"
            ]
          },
          {
            "tag": "binary_search_while_loop_condition_js",
            "patterns": [
              "how is the while loop implemented in binary search in javascript",
              "can you give me just the while loop part in binary search",
              "how does the while loop work in binary search in js",
              "i want to see the while loop of binary search in javascript",
              "give me the while loop condition in binary search in js"
            ],
            "responses": [
              "The while loop controls the search by dividing the range in half:\n\n\nwhile (start <= end) {\n    // Code to evaluate and adjust the boundaries goes here\n}\n"
            ]
          },
          {
            "tag": "binary_search_if_condition_js",
            "patterns": [
              "how does the if statement work in binary search in javascript",
              "can you give me just the if statement part in binary search",
              "how does it compare the searched value in binary search in js",
              "i want to see the if condition of binary search in javascript",
              "give me the if statement part in binary search in js"
            ],
            "responses": [
              "The `if` condition checks if the searched value equals the value at the middle index:\n\n\nif (array[middle] === targetValue) {\n    return middle; // Returns the index if the value is found\n}\n"
            ]
          },
          {
            "tag": "binary_search_boundaries_adjustment_js",
            "patterns": [
              "how are boundaries adjusted in binary search in javascript",
              "can you give me the part where start and end are adjusted in binary search",
              "how are the boundaries modified in binary search in js",
              "i want to see the adjustment of start and end in binary search in javascript",
              "give me the part where boundaries are adjusted in binary search in js"
            ],
            "responses": [
              "In binary search, the boundaries are adjusted depending on the compared value:\n\n\nif (array[middle] < targetValue) {\n    start = middle + 1; // Adjusts the start\n} else {\n    end = middle - 1; // Adjusts the end\n}\n"
            ]
          },
          {
            "tag": "binary_search_not_found_return_js",
            "patterns": [
              "what happens if the value is not found in binary search in javascript",
              "can you give me the part where it doesn’t find the value in binary search",
              "how does it return -1 in binary search in js",
              "i want to see how it indicates that the value was not found in binary search in javascript",
              "give me the part where it doesn’t find the value in binary search in js"
            ],
            "responses": [
              "If the value is not found, the function returns -1:\n\n\nreturn -1; // Returns -1 if the value is not present\n"
            ]
          },
          {
            "tag": "binary_search_complexity_js",
            "patterns": [
              "what is the complexity of binary search in javascript",
              "can you explain the efficiency of binary search in js",
              "how efficient is the binary search algorithm in javascript",
              "i want to know the complexity of binary search in js",
              "give me the time complexity of binary search in javascript"
            ],
            "responses": [
              "The complexity of binary search is:\n\n- **Best case**: O(1), when the value is in the middle.\n- **Worst case**: O(log n), when the search range is divided until only one element remains.\n\nThis makes it much more efficient than sequential search for large arrays."
            ]
          },
          {
            "tag": "bubble_sort_js",
            "patterns": [
              "how does bubble sort work in javascript",
              "what is the bubble sort algorithm in js",
              "can you explain the bubble sort algorithm in javascript",
              "give me the code for the bubble sort algorithm in js",
              "how do I implement the bubble sort algorithm in javascript"
            ],
            "responses": [
              "Bubble sort is an algorithm that compares adjacent elements in an array and swaps them if they are in the wrong order. This repeats until the array is completely sorted. Here is the code in JavaScript:\n\n\nfunction bubbleSort(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap elements\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n// Example usage\nconst numbers = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(bubbleSort(numbers));\n// Output: [11, 12, 22, 25, 34, 64, 90]\n"
            ]
          },
          {
            "tag": "bubble_sort_function_definition_js",
            "patterns": [
              "how is the function defined in bubble sort in javascript",
              "can you give me just the part where the function is defined in the bubble sort algorithm",
              "how does bubble sort start in js",
              "i want to see the function header of bubble sort in javascript",
              "give me the part where the function is defined in the bubble sort algorithm in js"
            ],
            "responses": [
              "The bubble sort function in JavaScript is defined as follows:\n\n\nfunction bubbleSort(arr) {\n    // The body of the algorithm goes here\n}\n"
            ]
          },
          {
            "tag": "initialize_variable_n_bubble_sort_js",
            "patterns": [
              "how is the variable n initialized in bubble sort in javascript",
              "can you give me the part where n is initialized in the bubble sort algorithm",
              "how is the array size set in the bubble sort algorithm in js",
              "i want to see how n is initialized in bubble sort in javascript",
              "give me the part where n is initialized in the bubble sort algorithm in js"
            ],
            "responses": [
              "The variable `n` is initialized with the length of the array:\n\n\nlet n = arr.length;\n"
            ]
          },
          {
            "tag": "nested_loop_structure_bubble_sort_js",
            "patterns": [
              "how do the loops work in bubble sort in javascript",
              "can you give me the part of the loop in the bubble sort algorithm",
              "how are the loops structured in the bubble sort algorithm in js",
              "i want to see the nested loop of bubble sort in javascript",
              "give me the part of the loops in the bubble sort algorithm in js"
            ],
            "responses": [
              "The algorithm uses a nested loop to traverse the array:\n\n\nfor (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        // Comparison and swapping happen here\n    }\n}\n"
            ]
          },
          {
            "tag": "comparison_condition_bubble_sort_js",
            "patterns": [
              "how are elements compared in bubble sort in javascript",
              "can you give me just the part where elements are compared in the bubble sort algorithm",
              "how does the if condition work in the bubble sort algorithm in js",
              "i want to see the comparison between elements in bubble sort in javascript",
              "give me the part of the if condition in the bubble sort algorithm in js"
            ],
            "responses": [
              "The `if` condition checks if the current element is greater than the next one:\n\n\nif (arr[j] > arr[j + 1]) {\n    // Swap elements\n}\n"
            ]
          },
          {
            "tag": "swap_elements_bubble_sort_js",
            "patterns": [
              "how are elements swapped in bubble sort in javascript",
              "can you give me just the part of the swap in the bubble sort algorithm",
              "how is the swap done in the bubble sort algorithm in js",
              "i want to see how elements are swapped in bubble sort in javascript",
              "give me the part of the swap in the bubble sort algorithm in js"
            ],
            "responses": [
              "Elements are swapped using a temporary variable:\n\n\nlet temp = arr[j];\narr[j] = arr[j + 1];\narr[j + 1] = temp;\n"
            ]
          },
          {
            "tag": "bubble_sort_complexity_js",
            "patterns": [
              "what is the complexity of bubble sort in javascript",
              "can you explain the efficiency of the bubble sort algorithm in js",
              "how efficient is the bubble sort algorithm in javascript",
              "i want to know the complexity of bubble sort in js",
              "give me the time complexity of the bubble sort algorithm in javascript"
            ],
            "responses": [
              "The complexity of bubble sort is:\n\n- **Best case**: O(n), if the array is already sorted (with optimization).\n- **Worst case**: O(n²), when the array is in reverse order.\n- **Average case**: O(n²), due to the nested loops.\n\nThis makes the algorithm inefficient for large datasets."
            ]
          },
          {
            "tag": "quick_sort_js",
            "patterns": [
              "how does quick sort work in javascript",
              "what is the quick sort algorithm in js",
              "can you explain the quick sort algorithm in javascript",
              "give me the code for quick sort in js",
              "how do I implement quick sort in javascript"
            ],
            "responses": [
              "Quick Sort is a sorting algorithm that uses the divide-and-conquer approach. It divides the array into subarrays using a pivot element, placing smaller elements to the left and larger elements to the right. Then, it recursively sorts the parts. Here's the full code in JavaScript:\n\n\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[arr.length - 1];\n    const left = [];\n    const right = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\n// Example usage\nconst numbers = [34, 7, 23, 32, 5, 62];\nconsole.log(quickSort(numbers));\n// Output: [5, 7, 23, 32, 34, 62]\n\n"
            ]
          },
          {
            "tag": "function_definition_quick_sort_js",
            "patterns": [
              "how is the function defined in quick sort in javascript",
              "can you give me just the part where the function is defined in quick sort in js",
              "how does quick sort start in js",
              "i want to see the function header of quick sort in javascript",
              "give me the part where the function is defined in quick sort in js"
            ],
            "responses": [
              "The definition of the Quick Sort function in JavaScript is as follows:\n\n\nfunction quickSort(arr) {\n    // The body of the algorithm goes here\n}\n\n"
            ]
          },
          {
            "tag": "base_condition_quick_sort_js",
            "patterns": [
              "what is the base condition in quick sort in javascript",
              "can you give me the part of the base condition in quick sort in js",
              "how does recursion end in quick sort in js",
              "i want to see the base condition of quick sort in javascript",
              "give me the part where the base condition is established in quick sort in js"
            ],
            "responses": [
              "The base condition of Quick Sort checks if the array has one or no elements to stop recursion:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
          },
          {
            "tag": "partitioning_quick_sort_js",
            "patterns": [
              "how is partitioning done in quick sort in javascript",
              "can you give me just the part of partitioning in quick sort in js",
              "how are elements divided in quick sort in js",
              "i want to see how the array is partitioned in quick sort in javascript",
              "give me the part of partitioning in quick sort in js"
            ],
            "responses": [
              "Partitioning in Quick Sort divides the array into two subarrays based on a pivot:\n\n\nconst pivot = arr[arr.length - 1];\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
          },
          {
            "tag": "combine_subarrays_quick_sort_js",
            "patterns": [
              "how are subarrays combined in quick sort in javascript",
              "can you give me just the part of combining in quick sort in js",
              "how are elements joined in quick sort in js",
              "i want to see how subarrays are combined in quick sort in javascript",
              "give me the part of combining in quick sort in js"
            ],
            "responses": [
              "The combination of subarrays with the pivot is done as follows:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
          },
          {
            "tag": "complexity_quick_sort_js",
            "patterns": [
              "what is the complexity of quick sort in javascript",
              "can you explain the efficiency of quick sort in js",
              "how efficient is quick sort in javascript",
              "i want to know the complexity of quick sort in js",
              "give me the time complexity of quick sort in javascript"
            ],
            "responses": [
              "The complexity of Quick Sort is:\n\n- **Best case**: O(n log n), when pivots divide the array evenly.\n- **Worst case**: O(n²), when the pivot is the largest or smallest element in each partition.\n- **Average case**: O(n log n), due to the recursive nature of the algorithm."
            ]
          },
          {
            "tag": "pivot_selection_quick_sort_js",
            "patterns": [
              "how is the pivot selected in quick sort in javascript",
              "can you give me just the part where the pivot is chosen in quick sort in js",
              "how does the pivot work in quick sort in js",
              "i want to see how the pivot is defined in quick sort in javascript",
              "give me the part about the pivot in quick sort in js"
            ],
            "responses": [
              "The pivot is selected as the last element of the array:\n\n\nconst pivot = arr[arr.length - 1];\n\n"
            ]
          },
          {
            "tag": "filling_subarrays_quick_sort_js",
            "patterns": [
              "how are the subarrays filled in quick sort in javascript",
              "can you give me just the part where the elements are distributed in quick sort in js",
              "how are the elements separated in quick sort in js",
              "i want to see how the subarrays are filled in quick sort in javascript",
              "give me the part about the subarrays in quick sort in js"
            ],
            "responses": [
              "The elements are separated into the left and right subarrays based on the pivot:\n\n\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n\n"
            ]
          },
          {
            "tag": "recursion_quick_sort_js",
            "patterns": [
              "how does recursion work in quick sort in javascript",
              "can you give me the part where recursion is applied in quick sort in js",
              "how are the subarrays called recursively in quick sort in js",
              "i want to see the recursion of quick sort in javascript",
              "give me the part about recursion in quick sort in js"
            ],
            "responses": [
              "Recursion is applied to sort the left and right subarrays:\n\n\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n\n"
            ]
          },
          {
            "tag": "merge_sort_js",
            "patterns": [
              "how does merge sort work in javascript",
              "what is the merge sort algorithm in js",
              "can you explain the merge sort algorithm in javascript",
              "give me the code for merge sort in js",
              "how do I implement merge sort in javascript"
            ],
            "responses": [
              "Merge Sort is a sorting algorithm that uses the divide-and-conquer approach. It divides the array into smaller parts, sorts them, and then merges them. Here's the full code in JavaScript:\n\n\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    const result = [];\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    return [...result, ...left, ...right];\n}\n\n// Example usage\nconst numbers = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(numbers));\n// Output: [3, 9, 10, 27, 38, 43, 82]\n\n"
            ]
          },
          {
            "tag": "function_definition_merge_sort_js",
            "patterns": [
              "how is the function defined in merge sort in javascript",
              "can you give me just the part where the function is defined in merge sort in js",
              "how does merge sort start in js",
              "i want to see the function header of merge sort in javascript",
              "give me the part where the function is defined in merge sort in js"
            ],
            "responses": [
              "The main function of Merge Sort is defined as follows:\n\n\nfunction mergeSort(arr) {\n    // The body of the algorithm goes here\n}\n\n"
            ]
          },
          {
            "tag": "base_condition_merge_sort_js",
            "patterns": [
              "what is the base condition in merge sort in javascript",
              "can you give me the part of the base condition in merge sort in js",
              "how does recursion end in merge sort in js",
              "i want to see the base condition of merge sort in javascript",
              "give me the part where the base condition is established in merge sort in js"
            ],
            "responses": [
              "The base condition of Merge Sort checks if the array has one or no elements to stop recursion:\n\n\nif (arr.length <= 1) {\n    return arr;\n}\n\n"
            ]
          },
          {
            "tag": "array_division_merge_sort_js",
            "patterns": [
              "how is the array divided in merge sort in javascript",
              "can you give me the part where the array is divided in merge sort in js",
              "how does division work in merge sort in js",
              "i want to see how the array is divided in merge sort in javascript",
              "give me the part about division in merge sort in js"
            ],
            "responses": [
              "The array is divided into halves using the middle index:\n\n\nconst mid = Math.floor(arr.length / 2);\nconst left = arr.slice(0, mid);\nconst right = arr.slice(mid);\n\n"
            ]
          },
          {
            "tag": "recursion_merge_sort_js",
            "patterns": [
              "how does recursion work in merge sort in javascript",
              "can you give me the part where recursion is applied in merge sort in js",
              "how are the halves called recursively in merge sort in js",
              "i want to see the recursion of merge sort in javascript",
              "give me the part about recursion in merge sort in js"
            ],
            "responses": [
              "Recursion is applied to sort the left and right halves:\n\n\nreturn merge(mergeSort(left), mergeSort(right));\n\n"
            ]
          },
          {
            "tag": "function_definition_merge_js",
            "patterns": [
              "how is the merge function defined in merge sort in javascript",
              "can you give me just the part where the merge function is defined in merge sort in js",
              "how does the merge function start in js",
              "i want to see the function header of merge in javascript",
              "give me the part where the merge function is defined in merge sort in js"
            ],
            "responses": [
              "The merge function combines two sorted subarrays into one:\n\n\nfunction merge(left, right) {\n    // The body of the merge function goes here\n}\n\n"
            ]
          },
          {
            "tag": "comparison_merge_js",
            "patterns": [
              "how are the elements compared in merge sort in javascript",
              "can you give me the part where elements are compared in merge sort in js",
              "how does comparison work in merge sort in js",
              "i want to see the comparison of elements in merge sort in javascript",
              "give me the part about comparison in merge sort in js"
            ],
            "responses": [
              "The elements are compared to determine which one to add to the result:\n\n\nif (left[0] < right[0]) {\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n\n"
            ]
          },
          {
            "tag": "merge_sort_remaining_elements_js",
            "patterns": [
              "how are the remaining elements combined in merge sort in JavaScript",
              "can you show me the part where the remaining elements are merged in merge sort in js",
              "how are the remaining elements handled in merge sort in js",
              "I want to see how the remaining elements are merged in merge sort in JavaScript",
              "show me the part about merging remaining elements in merge sort in js"
            ],
            "responses": [
              "The remaining elements from the halves are merged into the final result:\n\n\nreturn [...result, ...left, ...right];\n\n"
            ]
          },
          {
            "tag": "merge_sort_complexity_js",
            "patterns": [
              "what is the complexity of merge sort in JavaScript",
              "can you explain the efficiency of merge sort in js",
              "how efficient is merge sort in JavaScript",
              "I want to know the complexity of merge sort in js",
              "show me the time complexity of merge sort in JavaScript"
            ],
            "responses": [
              "The complexity of Merge Sort is:\n\n- **Best case**: O(n log n), always, because it divides and merges efficiently.\n- **Worst case**: O(n log n), as the algorithm remains efficient.\n- **Average case**: O(n log n), regardless of the initial data order."
            ]
          },
          {
            "tag": "fibonacci_js_en",
            "patterns": [
              "how does the Fibonacci algorithm work in JavaScript",
              "what is the Fibonacci algorithm in js",
              "can you explain how to generate Fibonacci in JavaScript",
              "show me the Fibonacci code in js",
              "how do I implement the Fibonacci series in JavaScript"
            ],
            "responses": [
              "The Fibonacci algorithm generates a sequence where each number is the sum of the two preceding ones. Here's the basic code to calculate the Fibonacci series up to a number n:\n\n\nfunction fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Usage example\nconsole.log(fibonacci(10)); // Output: 55 (10th Fibonacci number)\n\n"
            ]
          },
          {
            "tag": "fibonacci_function_definition_js",
            "patterns": [
              "how is the Fibonacci function defined in JavaScript",
              "can you show me the part where the Fibonacci function is defined",
              "how does the Fibonacci algorithm start in js",
              "I want to see the header of the Fibonacci function in JavaScript",
              "show me the part where the Fibonacci function is defined in js"
            ],
            "responses": [
              "The Fibonacci function is defined as:\n\n\nfunction fibonacci(n) {\n    // The body of the algorithm goes here\n}\n\n"
            ]
          },
          {
            "tag": "fibonacci_base_condition_js",
            "patterns": [
              "what is the base condition in the Fibonacci algorithm in JavaScript",
              "can you show me the base condition of Fibonacci in js",
              "how does recursion stop in Fibonacci in js",
              "I want to see the base condition of Fibonacci in JavaScript",
              "show me the part about the base condition in Fibonacci in js"
            ],
            "responses": [
              "The base condition of the Fibonacci algorithm is:\n\n\nif (n <= 1) {\n    return n;\n}\n\nThis ensures the calculation stops when n is 0 or 1."
            ]
          },
          {
            "tag": "fibonacci_recursion_js",
            "patterns": [
              "how does recursion work in Fibonacci in JavaScript",
              "can you show me the part where recursion is applied in Fibonacci",
              "how are recursive calls made in Fibonacci in js",
              "I want to see the recursion of Fibonacci in JavaScript",
              "show me the part about recursion in Fibonacci in js"
            ],
            "responses": [
              "Recursion in Fibonacci is performed by calling the function with decreasing values:\n\n\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n\nThis calculates the sum of the two preceding numbers in the series."
            ]
          },
          {
            "tag": "fibonacci_iterative_js",
            "patterns": [
              "how do I implement Fibonacci iteratively in JavaScript",
              "can you show me an iterative version of the Fibonacci algorithm",
              "how does iterative Fibonacci work in js",
              "I want to see the iterative Fibonacci code in JavaScript",
              "show me an iterative implementation of Fibonacci in js"
            ],
            "responses": [
              "Here's an iterative version of the Fibonacci algorithm, which is more efficient in terms of memory and performance:\n\n\nfunction fibonacciIterative(n) {\n    if (n <= 1) {\n        return n;\n    }\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Usage example\nconsole.log(fibonacciIterative(10)); // Output: 55\n\n"
            ]
          },
          {
            "tag": "fibonacci_memoization_js",
            "patterns": [
              "how do I use memoization to optimize Fibonacci in JavaScript",
              "can you show me a version of Fibonacci with memoization in js",
              "how does memoization work in Fibonacci in JavaScript",
              "I want to see an optimized Fibonacci implementation with memoization in js",
              "give me an optimized Fibonacci algorithm with memoization in JavaScript"
            ],
            "responses": [
              "Memoization is used to store previous calculations and improve the efficiency of the algorithm. Here's an optimized Fibonacci implementation with memoization:\n\n\nfunction fibonacciMemoization(n, memo = {}) {\n    if (n in memo) {\n        return memo[n];\n    }\n    if (n <= 1) {\n        return n;\n    }\n    memo[n] = fibonacciMemoization(n - 1, memo) + fibonacciMemoization(n - 2, memo);\n    return memo[n];\n}\n\n// Example usage\nconsole.log(fibonacciMemoization(10)); // Output: 55\n\n"
            ]
          },
          {
            "tag": "recursive_fibonacci_complexity_js",
            "patterns": [
              "what is the complexity of recursive Fibonacci in JavaScript",
              "can you explain the efficiency of recursive Fibonacci in js",
              "how efficient is recursive Fibonacci in JavaScript",
              "I want to know the complexity of recursive Fibonacci in js",
              "show me the time complexity of recursive Fibonacci in JavaScript"
            ],
            "responses": [
              "The complexity of the recursive Fibonacci algorithm is:\n\n- **Time complexity**: O(2^n), as each call generates two additional calls.\n- **Space complexity**: O(n), due to the depth of the call stack.\nThis makes it inefficient for large values of n."
            ]
          },
          {
            "tag": "fibonacci_memoization_complexity_js",
            "patterns": [
              "what is the complexity of Fibonacci with memoization in JavaScript",
              "can you explain the efficiency of optimized Fibonacci with memoization in js",
              "how efficient is Fibonacci with memoization in JavaScript",
              "I want to know the complexity of Fibonacci with memoization in js",
              "show me the time complexity of optimized Fibonacci in JavaScript"
            ],
            "responses": [
              "The complexity of the Fibonacci algorithm with memoization is:\n\n- **Time complexity**: O(n), as each number in the series is calculated only once.\n- **Space complexity**: O(n), due to storage in the memo object.\nThis makes it highly efficient compared to the standard recursive version."
            ]
          },
          {
            "tag": "depth_first_search_js",
            "patterns": [
              "how does depth-first search work in JavaScript",
              "what is the depth-first search algorithm in js",
              "can you explain DFS in JavaScript",
              "show me the depth-first search code in js",
              "how do I implement depth-first search in JavaScript"
            ],
            "responses": [
              "Depth-first search (DFS) is an algorithm that explores as far as possible along a branch before backtracking. Here's a basic implementation in JavaScript:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    console.log(start);\n    visited.add(start);\n\n    for (const neighbor of graph[start]) {\n        if (!visited.has(neighbor)) {\n            dfs(graph, neighbor, visited);\n        }\n    }\n}\n\n// Example usage\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\ndfs(graph, 'A');\n\nThis code will print the nodes visited in DFS order."
            ]
          },
          {
            "tag": "dfs_function_definition_js",
            "patterns": [
              "how is the depth-first search function defined in JavaScript",
              "can you show me the header of the DFS function",
              "how does DFS start in js",
              "I want to see the definition of the DFS function in JavaScript",
              "show me the part where the depth-first search function is defined in js"
            ],
            "responses": [
              "The main DFS function in JavaScript is defined as:\n\n\nfunction dfs(graph, start, visited = new Set()) {\n    // Algorithm body here\n}\n\n"
            ]
          },
          {
            "tag": "mark_node_visited_dfs_js",
            "patterns": [
              "how is a node marked as visited in DFS in JavaScript",
              "can you show me the part where nodes are marked as visited in DFS",
              "how is a visited node recorded in DFS in js",
              "I want to see how nodes are marked in depth-first search in JavaScript",
              "show me the part where a node is recorded as visited in DFS in js"
            ],
            "responses": [
              "A node is marked as visited by adding it to a set:\n\n\nvisited.add(start);\n\nThis prevents visiting the same node more than once."
            ]
          },
          {
            "tag": "traverse_neighbors_dfs_js",
            "patterns": [
              "how to traverse neighbors in dfs in javascript",
              "can you show me the part where adjacent nodes are traversed in dfs",
              "how does neighbor traversal work in depth-first search in js",
              "I want to see the code to traverse neighbors in dfs in javascript",
              "show me the part where neighbors are traversed in dfs in js"
            ],
            "responses": [
              "Neighbor traversal is performed with a for loop:\n\n\nfor (const neighbor of graph[start]) {\n    if (!visited.has(neighbor)) {\n        dfs(graph, neighbor, visited);\n    }\n}\n\nThis ensures that all adjacent nodes are explored."
            ]
          },
          {
            "tag": "graph_structure_dfs_js",
            "patterns": [
              "how is the graph defined for dfs in javascript",
              "can you show me how the graph is structured in dfs",
              "how does the data structure for the graph work in dfs in js",
              "I want to see how the graph is represented for depth-first search in javascript",
              "give me an example of a graph for dfs in js"
            ],
            "responses": [
              "A graph for DFS is typically represented as an object where the keys are nodes and the values are lists of adjacent nodes. Example:\n\n\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\n\nThis representation shows the connectivity between nodes."
            ]
          },
          {
            "tag": "iterative_dfs_js",
            "patterns": [
              "how to implement iterative dfs in javascript",
              "can you show me an iterative version of dfs in js",
              "how does iterative dfs work in javascript",
              "I want to see the iterative dfs code in javascript",
              "give me an iterative implementation of dfs in js"
            ],
            "responses": [
              "Here's an iterative implementation of DFS using a stack:\n\n\nfunction dfsIterative(graph, start) {\n    const stack = [start];\n    const visited = new Set();\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n\n        if (!visited.has(node)) {\n            console.log(node);\n            visited.add(node);\n            for (const neighbor of graph[node]) {\n                stack.push(neighbor);\n            }\n        }\n    }\n}\n\n// Example usage\ndfsIterative(graph, 'A');\n\nThis uses a stack instead of recursion to control the algorithm's flow."
            ]
          },
          {
            "tag": "dfs_complexity_js",
            "patterns": [
              "what is the complexity of dfs in javascript",
              "can you explain the efficiency of dfs in js",
              "how efficient is dfs in javascript",
              "I want to know the complexity of dfs in js",
              "give me the time complexity of dfs in javascript"
            ],
            "responses": [
              "The complexity of the DFS algorithm is:\n\n- **Time complexity**: O(V + E), where V is the number of vertices and E is the number of edges.\n- **Space complexity**: O(V), due to the storage of visited nodes and the call stack (in the recursive version) or explicit stack (in the iterative version).\nThis makes it efficient for exploring graphs with many nodes and edges."
            ]
          },
          {
            "tag": "stack_initialization_iterative_dfs_js",
            "patterns": [
              "how is the stack initialized in iterative dfs in javascript",
              "can you show me the part where the stack is created in iterative dfs",
              "how does the stack start in iterative dfs in js",
              "I want to see the stack initialization in iterative dfs in javascript",
              "give me the part where the stack is initialized in iterative dfs in js"
            ],
            "responses": [
              "In the iterative DFS implementation, the stack is initialized with the starting node:\n\n\nconst stack = [start];\n\nThis sets the starting point for graph exploration."
            ]
          },
          {
            "tag": "unvisited_node_check_dfs_js",
            "patterns": [
              "how to check if a node has not been visited in dfs in javascript",
              "can you show me how to ensure a node is not visited twice in dfs",
              "how to check if a node has been visited in depth-first search in js",
              "I want to see how to verify the state of a node in dfs in javascript",
              "give me the part where it checks if a node has already been visited in dfs in js"
            ],
            "responses": [
              "To ensure a node is not visited twice, use the `has` function of the visited nodes set:\n\n\nif (!visited.has(node)) {\n    // Process the node\n}\n\nThis ensures that each node is processed only once."
            ]
          },
          {
            "tag": "add_neighbors_stack_dfs_js",
            "patterns": [
              "how to add neighbors to the stack in dfs in javascript",
              "can you show me the part where adjacent nodes are added in iterative dfs",
              "how does adding neighbors work in dfs in js",
              "I want to see how neighbors are added to the stack in depth-first search in javascript",
              "give me the part where adjacent nodes are added to the stack in dfs in js"
            ],
            "responses": [
              "In the iterative version of DFS, the neighbors of the current node are added to the stack with the loop:\n\n\nfor (const neighbor of graph[node]) {\n    stack.push(neighbor);\n}\n\nThis ensures that connected nodes are explored in future iterations."
            ]
          },
          {
            "tag": "print_visited_nodes_dfs_js",
            "patterns": [
              "how to print visited nodes in dfs in javascript",
              "can you show me how visited nodes are recorded in dfs",
              "how to handle processed nodes in depth-first search in js",
              "I want to see how visited nodes are printed in dfs in javascript",
              "give me the part where nodes are printed in dfs in js"
            ],
            "responses": [
              "Visited nodes are printed using the `console.log` function right after being marked as visited:\n\n\nconsole.log(node);\n\nThis logs each visited node in the order of exploration."
            ]
          },
          {
            "tag": "use_set_visited_nodes_dfs_js",
            "patterns": [
              "why is a set used for visited nodes in dfs in javascript",
              "can you show me how the set is used in dfs",
              "how does the set work for nodes in depth-first search in js",
              "I want to understand the use of the set in dfs in javascript",
              "give me the part where the use of the set for visited nodes in dfs in js is explained"
            ],
            "responses": [
              "The `Set` is used to store visited nodes because it allows efficient checking if a node has already been visited:\n\n\nvisited.add(node);\nif (!visited.has(neighbor)) {\n    // Process the neighbor\n}\n\nThis structure has constant-time insertion and checking operations."
            ]
          },
          {
            "tag": "heap_sort_js",
            "patterns": [
              "what is the heap sort algorithm in javascript",
              "how does heap sort work in js",
              "can you explain heap sort in javascript",
              "give me the complete code for the heap sort algorithm in js",
              "how do I implement heap sort in javascript"
            ],
            "responses": [
              "The Heap Sort algorithm is a sorting algorithm that uses the heap data structure. It first builds a max heap from the array, then swaps the first element (the maximum) with the last, reduces the heap size, and applies heapify again. Here's the complete code in JavaScript:\n\n\nfunction heapSort(arr) {\n    let n = arr.length;\n\n    // Build a max heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n\n    // Extract elements from the heap one by one\n    for (let i = n - 1; i > 0; i--) {\n        // Move the current maximum to the end\n        [arr[0], arr[i]] = [arr[i], arr[0]];\n\n        // Apply heapify to the reduced heap\n        heapify(arr, i, 0);\n    }\n\n    return arr;\n}\n\nfunction heapify(arr, n, i) {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n\n    // If the left child is larger than the root\n    if (left < n && arr[left] > arr[largest]) {\n        largest = left;\n    }\n\n    // If the right child is larger than the root\n    if (right < n && arr[right] > arr[largest]) {\n        largest = right;\n    }\n\n    // If the root is not the largest\n    if (largest !== i) {\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, n, largest);\n    }\n}\n\n// Usage example\nconst numbers = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numbers));\n// Output: [5, 6, 7, 11, 12, 13]\n"
            ]
          },
          {
            "tag": "build_max_heap_js",
            "patterns": [
              "how is the max heap built in heap sort in javascript",
              "can you show me the part where the max heap is created",
              "how do you initialize the max heap in js",
              "I want to see the construction of the max heap in heap sort in javascript",
              "show me the part where the max heap is built in heap sort in js"
            ],
            "responses": [
              "The max heap is built by applying the `heapify` function from the middle of the array backwards:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n    heapify(arr, arr.length, i);\n}\n"
            ]
          },
          {
            "tag": "extract_max_heap_sort_js",
            "patterns": [
              "how is the maximum element extracted in heap sort in javascript",
              "can you show me the part where the first element is swapped with the last",
              "how is swapping done in heap sort in js",
              "I want to see the extraction of the maximum in heap sort in javascript",
              "give me the part about swapping in heap sort in js"
            ],
            "responses": [
              "In Heap Sort, the maximum (first element) is swapped with the last:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n\nThis moves the largest element to the end of the sorted array."
            ]
          },
          {
            "tag": "heap_sort_complexity_js",
            "patterns": [
              "what is the complexity of heap sort in javascript",
              "can you explain the efficiency of heap sort en js",
              "how efficient is heap sort in js",
              "I want to know the time complexity of heap sort in javascript",
              "give me the complexity of heap sort in js"
            ],
            "responses": [
              "The complexity of Heap Sort is:\n\n- **Best case**: O(n log n)\n- **Worst case**: O(n log n)\n- **Average case**: O(n log n)\n\nThis makes it efficient and stable in terms of complexity."
            ]
          },
          {
            "tag": "define_heap_sort_function_js",
            "patterns": [
              "how is the main function defined in heap sort in javascript",
              "can you show me the header of the heap sort function",
              "how does the heap sort function start in js",
              "I want to see the header of the heap sort function in javascript",
              "show me the fragment where the main heap sort function is defined in js"
            ],
            "responses": [
              "The definition of the main Heap Sort function is as follows:\n\n\nfunction heapSort(arr) {\n    // The body of the algorithm starts here\n}\n"
            ]
          },
          {
            "tag": "max_heap_iteration_js",
            "patterns": [
              "how is the iteration done to build the max heap in heap sort in js",
              "can you give me the fragment where the iteration is done to build the max heap in js",
              "I want to see the loop for building the max heap in heap sort in js",
              "how is the iteration done to build the max heap in javascript",
              "show me the part where the max heap is built in heap sort in js"
            ],
            "responses": [
              "The iteration to build the max heap in the Heap Sort algorithm is as follows:\n\n\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n    heapify(arr, arr.length, i);\n}\n"
            ]
          },
          {
            "tag": "swap_elements_heap_sort_js",
            "patterns": [
              "how are elements swapped in heap sort in js",
              "can you give me the code to swap elements in heap sort in js",
              "I want to see how elements are swapped in heap sort in js",
              "show me the fragment where elements are swapped in heap sort in javascript",
              "how are elements swapped in heap sort in js"
            ],
            "responses": [
              "The swapping of elements in Heap Sort is done as follows:\n\n\n[arr[0], arr[i]] = [arr[i], arr[0]];\n"
            ]
          },
          {
            "tag": "heap_sort_example_js",
            "patterns": [
              "can you give me an example of using heap sort in javascript",
              "I want to see a complete example of heap sort in js",
              "how is heap sort used on a sample array",
              "give me a practical example of heap sort in javascript",
              "how is the heap sort algorithm used in js"
            ],
            "responses": [
              "Here is an example of using Heap Sort in JavaScript:\n\n\nconst numbers = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numbers));\n// Output: [5, 6, 7, 11, 12, 13]\n"
            ]
          },
          {
            "tag": "array_size_heap_sort_js",
            "patterns": [
              "how do you get the size of the array in heap sort in js",
              "can you show me the snippet where the array size is retrieved in heap sort in js",
              "how do you define the variable that holds the array size in heap sort in js",
              "I want to see how the array size is managed in heap sort in javascript",
              "show me the part where the array size is retrieved in heap sort in js"
            ],
            "responses": [
              "The array size is obtained as follows:\n\n\nlet n = arr.length;\n"
            ]
          },
          {
            "tag": "for_loop_python",
            "patterns": [
              "how can I create a for loop in python",
              "give me an example of a for loop in python",
              "how do I write a for loop in python",
              "give me an example of a for loop in python"
            ],
            "responses": [
              "Here is a basic example of a for loop in Python:\n\n\nfor i in range(5):\n    print(i)\n",
              "You can use a for loop to iterate over a list:\n\n\nnumbers = [1, 2, 3, 4]\nfor number in numbers:\n    print(f'Element: {number}')\n"
            ]
          },
          {
            "tag": "variable_declaration_for_loop_python",
            "patterns": [
              "how do I declare a variable in a loop in python",
              "give me an example of declaring a variable in python",
              "where is the variable used for iteration declared in a for loop in python",
              "give me an example of a for loop with the variable declared in the header"
            ],
            "responses": [
              "In Python, the variable is automatically declared in the loop's header:\n\n\nfor i in range(5):\n    print(i)\n",
              "An example where the variable is declared in the for loop's header:\n\n\nfor number in range(1, 6):\n    print(f'Current number: {number}')\n"
            ]
          },
          {
            "tag": "conditional_in_for_loop_python",
            "patterns": [
              "how does a conditional work in a for loop in python",
              "give me an example of a conditional in a for loop in python",
              "what does a conditional do in a for loop",
              "give me a for loop with a conditional for iteration",
              "how do I use a conditional in a for loop in python"
            ],
            "responses": [
              "You can use a conditional inside a for loop. Example:\n\n\nfor i in range(5):\n    if i % 2 == 0:\n        print(f'{i} is an even number')\n",
              "An example with a conditional in a for loop:\n\n\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    if number > 3:\n        print(f'Number greater than 3: {number}')\n"
            ]
          },
          {
            "tag": "increment_in_for_loop_python",
            "patterns": [
              "how do I make the for loop increment in python",
              "give me an example of a for loop that increments in python",
              "how do I increment the value in a for loop in python",
              "give me a for loop that increments a counter in python",
              "example of a for loop that increments on each iteration"
            ],
            "responses": [
              "In Python, you can specify the increment in the for loop with `range`:\n\n\nfor i in range(0, 10, 2):\n    print(i)\n",
              "An example of incrementing in a for loop:\n\n\nfor number in range(1, 6):\n    print(f'Number: {number}')\n"
            ]
          },
          {
            "tag": "decrement_in_for_loop_python",
            "patterns": [
              "how do I make the for loop decrement in python",
              "give me an example of a for loop that decrements in python",
              "how do I decrement the value in a for loop in python",
              "give me a for loop that decrements a counter in python",
              "example of a for loop that decrements on each iteration"
            ],
            "responses": [
              "To decrement, use a negative step in `range`:\n\n\nfor i in range(10, 0, -1):\n    print(i)\n",
              "A loop that decrements in steps of 2:\n\n\nfor i in range(20, 0, -2):\n    print(i)\n"
            ]
          },
          {
            "tag": "use_break_in_for_loop_python",
            "patterns": [
              "how to use break in a for loop in python",
              "give me an example of break in a loop in python",
              "how does break work in a for loop in python",
              "how to stop a loop with break in python"
            ],
            "responses": [
              "`break` is used to exit a loop before it completes. Example with a `for` loop:\n\tfor i in range(10):\n\t\tif i == 5:\n\t\t\tbreak\n\t\tprint(i)",
              "You can use `break` to exit the loop when a condition is met:\n\tnumbers = [1, 2, 3, 4, 5, 6, 7]\n\tfor num in numbers:\n\t\tif num == 4:\n\t\t\tbreak\n\t\tprint(num)",
              "Example of stopping the loop upon finding a specific value:\n\tfor i in range(20):\n\t\tif i > 10:\n\t\t\tbreak\n\t\tprint(i)"
            ]
          },
          {
            "tag": "use_continue_in_loop_python",
            "patterns": [
              "how to use continue in a for loop in python",
              "give me an example of continue in a loop in python",
              "how does continue work in a loop in python",
              "how to skip an iteration with continue in python"
            ],
            "responses": [
              "`continue` is used to skip an iteration of the loop and move to the next one. Example in a `for` loop:\n\tfor i in range(10):\n\t\tif i == 5:\n\t\t\tcontinue\n\t\tprint(i)",
              "You can use `continue` to skip specific values in a loop:\n\tnumbers = [1, 2, 3, 4, 5, 6, 7]\n\tfor num in numbers:\n\t\tif num == 4:\n\t\t\tcontinue\n\t\tprint(num)",
              "An example with `continue` to skip odd numbers:\n\tfor i in range(11):\n\t\tif i % 2 != 0:\n\t\t\tcontinue\n\t\tprint(i)"
            ]
          },
          {
            "tag": "list_declaration_python",
            "patterns": [
              "how to declare a list in python",
              "give me examples of declaring lists in python",
              "how to create a list in python",
              "give me an example of a list in python",
              "example of declaring lists in python"
            ],
            "responses": [
              "A list can be declared using square brackets:\n\tnumbers = [1, 2, 3, 4, 5]\n\tprint(numbers)",
              "Declare a list of strings:\n\tnames = ['John', 'Maria', 'Luis']\n\tprint(names)",
              "Declare an empty list and fill it later:\n\tdata = []\n\tdata.append('value1')\n\tdata.append('value2')\n\tprint(data)"
            ]
          },
          {
            "tag": "access_list_elements_with_for_python",
            "patterns": [
              "how to access elements of a list with a for loop in python",
              "give me examples of iterating through a list with a for loop in python",
              "how to use a for loop to retrieve elements from a list in python",
              "give me an example of accessing lists with a for loop in python",
              "how to iterate over a list using for in python"
            ],
            "responses": [
              "You can use a for loop to access the elements of a list:\n\tnumbers = [10, 20, 30, 40]\n\tfor i in range(len(numbers)):\n\t\tprint(f'Element at index {i}: {numbers[i]}')",
              "Basic example of iteration with a for loop:\n\tfruits = ['apple', 'orange', 'banana']\n\tfor fruit in fruits:\n\t\tprint(fruit)"
            ]
          },
          {
            "tag": "basic_if_structure_python",
            "patterns": [
              "how does an if statement work in python",
              "give me examples of an if statement in python",
              "how to use an if statement in python",
              "give me an example of an if structure in python",
              "how is an if structured in python"
            ],
            "responses": [
              "The basic structure of an `if` in Python is:\n\tif condition:\n\t\t# code to execute if the condition is true\n\tExample:\n\tif age >= 18:\n\t\tprint('You are an adult')",
              "A simple example of an `if`:\n\tnumber = 10\n\tif number > 5:\n\t\tprint('The number is greater than 5')",
              "Another example using a comparison:\n\ttemperature = 30\n\tif temperature > 25:\n\t\tprint('It is hot')",
              "You can check logical conditions in the `if`:\n\tage = 20\n\tif age >= 18:\n\t\tprint('Access granted')",
              "Example of a simple `if`:\n\tnumber = 4\n\tif number % 2 == 0:\n\t\tprint('It is an even number')"
            ]
          },
          {
            "tag": "compound_conditionals_and_if_python",
            "patterns": [
              "how to put multiple conditions in an if statement in python",
              "give me examples of an if statement with multiple conditions in python",
              "how to use the and operator in an if statement in python",
              "how to combine conditions within an if statement in python"
            ],
            "responses": [
              "You can use the `and` operator to combine conditions within an `if` statement:\n\tnumber = 10\n\tif number > 5 and number < 15:\n\t\tprint('The number is between 5 and 15')",
              "Example of multiple conditions with `and`:\n\tage = 25\n\thas_license = True\n\tif age >= 18 and has_license:\n\t\tprint('Access granted')",
              "You can combine more than one condition using `and`:\n\ttemperature = 30\n\thumidity = 80\n\tif temperature > 25 and humidity > 70:\n\t\tprint('It is hot and humid')"
            ]
          },
          {
            "tag": "negation_conditionals_if_python",
            "patterns": [
              "how to use negation in an if statement in python",
              "give me examples of how to use the not operator in an if statement in python",
              "how to negate a condition in an if statement in python",
              "how to make a condition false in an if statement in python"
            ],
            "responses": [
              "You can use the `not` operator to negate a condition in an `if` statement:\n\tis_raining = False\n\tif not is_raining:\n\t\tprint('It is not raining')",
              "Negating a condition in an `if`:\n\tis_adult = False\n\tif not is_adult:\n\t\tprint('You are not an adult')",
              "The `not` operator can be used to check if a condition is false:\n\thas_license = False\n\tif not has_license:\n\t\tprint('You do not have a license')"
            ]
          },
          {
            "tag": "comparative_conditionals_if_python",
            "patterns": [
              "how to compare numbers in an if statement in python",
              "how to use numerical comparisons in an if statement in python",
              "give me examples of numerical comparisons in an if statement in python",
              "how to evaluate numerical conditions in an if statement in python"
            ],
            "responses": [
              "You can compare numbers using operators like `>`, `<`, `==`, etc.:\n\tnumber = 10\n\tif number > 5:\n\t\tprint('The number is greater than 5')",
              "Numerical comparison in an `if`:\n\tage = 25\n\tif age >= 18:\n\t\tprint('You are an adult')",
              "Using `==` to compare numeric values:\n\tvalue = 100\n\tif value == 100:\n\t\tprint('The value is 100')",
              "Comparing if a number is less than or equal to a value:\n\ttemperature = 18\n\tif temperature <= 20:\n\t\tprint('The temperature is low')"
            ]
          },
          {
            "tag": "basic_structure_if_else_python",
            "patterns": [
              "how does an if else statement work in python",
              "give me examples of an if else in python",
              "how to use an if else in python",
              "give me an example of an if else structure in python",
              "how is an if else structured in python"
            ],
            "responses": [
              "The basic structure of an `if-else` is:\n\tif condition:\n\t\t# code if the condition is true\n\telse:\n\t\t# code if the condition is false\n\tExample:\n\tage = 18\n\tif age >= 18:\n\t\tprint('You are an adult')\n\telse:\n\t\tprint('You are a minor')",
              "An example of using `if-else`:\n\tnumber = 10\n\tif number > 5:\n\t\tprint('The number is greater than 5')\n\telse:\n\t\tprint('The number is 5 or less')",
              "You can use `else` to handle the false part of the condition:\n\ttemperature = 20\n\tif temperature > 25:\n\t\tprint('It is hot')\n\telse:\n\t\tprint('It is cool')"
            ]
          },
          {
            "tag": "complex_conditionals_if_else_python",
            "patterns": [
              "how to set complex conditions in an if else in python",
              "give me examples of if else with multiple conditions in python",
              "how to use logical operators in an if else in python",
              "how to combine conditions with if else in python"
            ],
            "responses": [
              "You can combine multiple conditions with logical operators inside `if-else`:\n\tnumber = 10\n\tif number > 5 and number < 15:\n\t\tprint('The number is between 5 and 15')\n\telse:\n\t\tprint('The number is not between 5 and 15')",
              "Example of `if-else` with logical conditions:\n\tage = 25\n\thas_license = True\n\tif age >= 18 and has_license:\n\t\tprint('Access granted')\n\telse:\n\t\tprint('Access denied')",
              "If the first condition is false, you can check other conditions:\n\thour = 9\n\tif hour >= 12:\n\t\tprint('It is afternoon')\n\telif hour >= 6:\n\t\tprint('It is morning')\n\telse:\n\t\tprint('It is night')"
            ]
          },
          {
            "tag": "using_else_if_python",
            "patterns": [
              "how to use elif in python",
              "give me examples of elif in python",
              "how does elif work in an if statement in python",
              "give me an example of using elif in an if statement in python"
            ],
            "responses": [
              "You can use `elif` to check additional conditions if the first one is false:\n\thour = 9\n\tif hour >= 12:\n\t\tprint('It is afternoon')\n\telif hour >= 6:\n\t\tprint('It is morning')\n\telse:\n\t\tprint('It is night')",
              "Example of `elif` to compare more than one condition:\n\tnumber = 5\n\tif number > 10:\n\t\tprint('The number is greater than 10')\n\telif number == 5:\n\t\tprint('The number is 5')\n\telse:\n\t\tprint('The number is less than 5')",
              "Using `elif` to create a more specific block of conditions:\n\tage = 25\n\tif age >= 18:\n\t\tprint('You are an adult')\n\telif age >= 13:\n\t\tprint('You are a teenager')\n\telse:\n\t\tprint('You are a child')"
            ]
          },
          {
            "tag": "basic_while_structure_python",
            "patterns": [
              "how to use a while loop in python",
              "give me an example of a while loop in python",
              "how does the while loop work in python",
              "how to structure a while loop in python"
            ],
            "responses": [
              "The basic structure of a `while` loop is as follows:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1\n\tThis loop will continue running as long as the condition is true.",
              "Basic example of a `while` loop:\n\tnumber = 0\n\twhile number < 5:\n\t\tprint(number)\n\t\tnumber += 1",
              "A `while` loop will keep running until the condition becomes false:\n\tcounter = 0\n\twhile counter < 3:\n\t\tprint('Counting:', counter)\n\t\tcounter += 1"
            ]
          },
          {
            "tag": "conditions_in_while_python",
            "patterns": [
              "how to set a condition inside a while loop in python",
              "give me examples of conditions inside a while loop in python",
              "how to use conditionals in a while in python",
              "how to evaluate conditions in a while loop in python"
            ],
            "responses": [
              "You can place a condition inside the `while` loop to keep iterating while it's true:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
              "Condition inside a `while` loop to exit after 5 iterations:\n\ti = 0\n\twhile i < 5:\n\t\tprint(i)\n\t\ti += 1",
              "You can use a complex logical condition inside the `while` loop:\n\tnumber = 1\n\twhile number <= 10:\n\t\tif number % 2 == 0:\n\t\t\tprint(f'{number} is even')\n\t\tnumber += 1"
            ]
          },
          {
            "tag": "use_break_in_while_python",
            "patterns": [
              "how to use break in a while loop in python",
              "give me an example of break in a while loop in python",
              "how to stop a while loop with break in python",
              "how to exit a while loop in python"
            ],
            "responses": [
              "You can use `break` to exit a `while` loop when a condition is met:\n\ti = 0\n\twhile i < 10:\n\t\tif i == 5:\n\t\t\tbreak\n\t\tprint(i)\n\t\ti += 1",
              "Use `break` to exit the loop before it finishes:\n\tnumber = 1\n\twhile number <= 10:\n\t\tif number == 7:\n\t\t\tbreak\n\t\tprint(number)\n\t\tnumber += 1",
              "An example of how to exit a `while` loop using `break`:\n\tcounter = 0\n\twhile counter < 10:\n\t\tif counter == 5:\n\t\t\tbreak\n\t\tprint(counter)\n\t\tcounter += 1"
            ]
          },
          {
            "tag": "use_continue_in_while_python",
            "patterns": [
              "how to use continue in a while loop in python",
              "give me an example of continue in a while loop in python",
              "how to skip an iteration with continue in while in python",
              "how does continue work in a while loop in python"
            ],
            "responses": [
              "You can use `continue` to skip the current iteration and move to the next one in a `while` loop:\n\ti = 0\n\twhile i < 5:\n\t\tif i == 3:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tprint(i)\n\t\ti += 1",
              "Example of how to use `continue` to skip an iteration:\n\tnumber = 0\n\twhile number < 10:\n\t\tif number % 2 != 0:\n\t\t\tnumber += 1\n\t\t\tcontinue\n\t\tprint(number)\n\t\tnumber += 1",
              "If you want to skip odd numbers inside a `while` loop, you can use `continue`:\n\ti = 0\n\twhile i <= 10:\n\t\tif i % 2 != 0:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tprint(i)\n\t\ti += 1"
            ]
          },
          {
            "tag": "basic_do_while_structure_python",
            "patterns": [
              "how to use a do while loop in python",
              "give me an example of a do while loop in python",
              "how does the do while loop work in python",
              "how to structure a do while loop in python"
            ],
            "responses": [
              "In Python, there's no explicit `do-while` loop, but it can be simulated with a `while` loop with a condition at the end:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif not (i < 5):\n\t\t\tbreak",
              "Basic example of a simulated `do-while` loop:\n\tnumber = 0\n\twhile True:\n\t\tprint(number)\n\t\tnumber += 1\n\t\tif not (number < 3):\n\t\t\tbreak",
              "A `do-while` loop ensures the block of code runs at least once, even if the condition is false at the start:\n\tcounter = 0\n\twhile True:\n\t\tprint(counter)\n\t\tcounter += 1\n\t\tif not (counter > 3):\n\t\t\tbreak"
            ]
          },
          {
            "tag": "conditions_in_do_while_python",
            "patterns": [
              "how to set a condition inside a do while loop in python",
              "give me examples of conditions inside a do while loop in python",
              "how to use conditionals in a do while in python",
              "how to evaluate conditions in a do while loop in python"
            ],
            "responses": [
              "You can place a condition inside the `do-while` to keep iterating while it's true:\n\ti = 0\n\twhile True:\n\t\tprint(i)\n\t\ti += 1\n\t\tif not (i < 5):\n\t\t\tbreak",
              "Example of setting a condition in a `do-while` loop to evaluate if the number is even:\n\tnumber = 1\n\twhile True:\n\t\tif number % 2 == 0:\n\t\t\tprint(f'{number} is even')\n\t\tnumber += 1\n\t\tif not (number <= 10):\n\t\t\tbreak",
              "You can use a condition to exit the loop with `break` if a condition is met:\n\tcounter = 0\n\twhile True:\n\t\tif counter == 5:\n\t\t\tbreak\n\t\tprint(counter)\n\t\tcounter += 1"
            ]
          },
          {
            "tag": "use_break_in_do_while_python",
            "patterns": [
              "how to use break in a do while loop in python",
              "give me an example of break in a do while loop in python",
              "how to stop a do while loop with break in python",
              "how to exit a do while loop in python"
            ],
            "responses": [
              "In Python, there's no `do-while` loop, but you can simulate it with a `while True` and use `break` to exit the loop when a condition is met:\n\tcounter = 0\n\twhile True:\n\t\tif counter == 3:\n\t\t\tbreak\n\t\tprint(counter)\n\t\tcounter += 1",
              "Use `break` to exit the loop before it finishes:\n\tcounter = 0\n\twhile True:\n\t\tif counter == 2:\n\t\t\tbreak\n\t\tprint(counter)\n\t\tcounter += 1",
              "An example of how to exit a simulated `do-while` loop with `break`:\n\tcounter = 0\n\twhile True:\n\t\tif counter == 4:\n\t\t\tbreak\n\t\tprint(counter)\n\t\tcounter += 1"
            ]
          },
          {
            "tag": "use_continue_in_do_while_python",
            "patterns": [
              "how to use continue in a do-while loop in python",
              "give me an example of continue in a do-while loop in python",
              "how to skip an iteration with continue in do-while in python",
              "how does continue work in a do-while loop in python"
            ],
            "responses": [
              "You can use `continue` to skip the current iteration and proceed to the next one in a simulated `do-while` loop in Python:\n\tcounter = 0\n\twhile True:\n\t\tif counter == 3:\n\t\t\tcounter += 1\n\t\t\tcontinue\n\t\tprint(counter)\n\t\tcounter += 1\n\t\tif counter >= 5:\n\t\t\tbreak",
              "Example of using `continue` to skip an iteration:\n\tcounter = 0\n\twhile True:\n\t\tif counter % 2 != 0:\n\t\t\tcounter += 1\n\t\t\tcontinue\n\t\tprint(counter)\n\t\tcounter += 1\n\t\tif counter >= 10:\n\t\t\tbreak",
              "If you want to skip odd numbers in a simulated `do-while` loop, you can use `continue`:\n\tnumber = 0\n\twhile True:\n\t\tif number % 2 != 0:\n\t\t\tnumber += 1\n\t\t\tcontinue\n\t\tprint(number)\n\t\tnumber += 1\n\t\tif number > 10:\n\t\t\tbreak"
            ]
          },
          {
            "tag": "basic_function_declaration_python",
            "patterns": [
              "how to declare a function in python",
              "give me an example of a function in python",
              "how to create a function in python",
              "what is the syntax for declaring a function in python"
            ],
            "responses": [
              "The basic syntax to declare a function in Python is as follows:\n\tdef greet():\n\t\tprint('Hello, world')",
              "An example of a basic function in Python:\n\tdef calculate_sum(a, b):\n\t\treturn a + b",
              "To declare a function in Python, simply use the `def` keyword:\n\tdef greet(name):\n\t\tprint(f'Hello {name}')"
            ]
          },
          {
            "tag": "function_with_parameters_python",
            "patterns": [
              "how to declare a function with parameters in python",
              "give me an example of a function with parameters in python",
              "how to pass parameters to a function in python",
              "how to create a function with parameters in python"
            ],
            "responses": [
              "To declare a function with parameters in Python, place the parameters in parentheses after the function name:\n\tdef greet(name):\n\t\tprint(f'Hello, {name}')",
              "Example of a function with parameters:\n\tdef multiply(a, b):\n\t\treturn a * b",
              "Parameters are defined in parentheses in the function declaration:\n\tdef display_message(message):\n\t\tprint(message)"
            ]
          },
          {
            "tag": "functions_with_return_typing_python",
            "patterns": [
              "how to declare a function with return type in python",
              "give me an example of a function with return type in python",
              "how to specify the return type of a function in python",
              "how to return a value from a function in python"
            ],
            "responses": [
              "To specify the return type of a function in Python, you can use type annotations:\n\tdef add(a: int, b: int) -> int:\n\t\treturn a + b",
              "Example of a function with a return type:\n\tdef get_name() -> str:\n\t\treturn 'John'",
              "In Python, you can specify the return type as follows:\n\tdef is_positive(number: int) -> bool:\n\t\treturn number > 0"
            ]
          },
          {
            "tag": "functions_with_default_values_python",
            "patterns": [
              "how to declare a function with default values in python",
              "give me an example of a function with default parameters in python",
              "how to set default values in a function in python",
              "how to assign a default value to a parameter in python"
            ],
            "responses": [
              "You can assign default values to parameters as follows:\n\tdef greet(name='John'):\n\t\tprint(f'Hello, {name}')",
              "Example of a function with default values:\n\tdef calculate_price(price, discount=0):\n\t\treturn price - (price * discount)",
              "If a parameter is not passed, the default value will be used:\n\tdef show_details(product='Product A'):\n\t\tprint(f'Details of {product}')"
            ]
          },
          {
            "tag": "anonymous_functions_python",
            "patterns": [
              "how to declare an anonymous function in python",
              "give me an example of an anonymous function in python",
              "how to use anonymous functions in python",
              "what is an anonymous function in python"
            ],
            "responses": [
              "An anonymous function in Python is declared using the `lambda` keyword:\n\tsum = lambda a, b: a + b\n\tprint(sum(3, 5))",
              "Example of an anonymous function assigned to a variable:\n\tgreeting = lambda name: print(f'Hello, {name}')\n\tgreeting('Anna')",
              "An anonymous function is useful when you need to pass a function as an argument:\n\tmultiply = lambda a, b: a * b\n\tprint(multiply(2, 3))"
            ]
          },
          {
            "tag": "recursive_functions_python",
            "patterns": [
              "how to declare a recursive function in python",
              "give me an example of a recursive function in python",
              "how to make a function call itself in python",
              "how to create a recursive function in python"
            ],
            "responses": [
              "A recursive function is one that calls itself. Example:\n\tdef factorial(n):\n\t\tif n == 0:\n\t\t\treturn 1\n\t\treturn n * factorial(n - 1)",
              "Example of a recursive function to calculate the sum of numbers from 1 to `n`:\n\tdef recursive_sum(n):\n\t\tif n == 1:\n\t\t\treturn 1\n\t\treturn n + recursive_sum(n - 1)",
              "A recursive function can be useful for solving complex problems that can be divided into simpler subproblems:\n\tdef fibonacci(n):\n\t\tif n <= 1:\n\t\t\treturn n\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2)"
            ]
          },
          {
            "tag": "basic_enum_declaration_python",
            "patterns": [
              "how to declare an enum in python",
              "give me an example of an enum in python",
              "how to define an enum in python",
              "show me an example of an enum in python"
            ],
            "responses": [
              "You can declare an enum like this:\n\tfrom enum import Enum\n\tclass Direction(Enum):\n\t\tUP = 1\n\t\tDOWN = 2\n\t\tLEFT = 3\n\t\tRIGHT = 4\n\tmy_direction = Direction.UP",
              "Basic example of an enum:\n\tfrom enum import Enum\n\tclass Status(Enum):\n\t\tACTIVE = 1\n\t\tINACTIVE = 2\n\t\tPENDING = 3\n\tuser_status = Status.ACTIVE",
              "An enum in Python is defined as follows:\n\tfrom enum import Enum\n\tclass Color(Enum):\n\t\tRED = 1\n\t\tGREEN = 2\n\t\tBLUE = 3\n\tfavorite_color = Color.GREEN"
            ]
          },
          {
            "tag": "enum_specific_values_python",
            "patterns": [
              "how to assign values to an enum in python",
              "give me an example of an enum with specific values in python",
              "how to assign a value to each element in an enum in python",
              "can you assign values to an enum in python"
            ],
            "responses": [
              "You can assign values to enum elements like this:\n\tfrom enum import Enum\n\tclass Direction(Enum):\n\t\tUP = 1\n\t\tDOWN = 2\n\t\tLEFT = 3\n\t\tRIGHT = 4\n\tmy_direction = Direction.UP",
              "Example of an enum with specific values:\n\tfrom enum import Enum\n\tclass Status(Enum):\n\t\tACTIVE = 1\n\t\tINACTIVE = 0\n\t\tPENDING = 2\n\tuser_status = Status.ACTIVE",
              "An enum with specific values is defined as follows:\n\tfrom enum import Enum\n\tclass Color(Enum):\n\t\tRED = '#FF0000'\n\t\tGREEN = '#00FF00'\n\t\tBLUE = '#0000FF'\n\tfavorite_color = Color.GREEN"
            ]
          },
          {
            "tag": "enum_string_values_python",
            "patterns": [
              "how to declare an enum with string values in python",
              "give me an example of an enum with strings in python",
              "how to assign string values in an enum in python",
              "can you use string values in an enum in python"
            ],
            "responses": [
              "You can use string values in an enum like this:\n\tfrom enum import Enum\n\tclass Direction(Enum):\n\t\tUP = 'up'\n\t\tDOWN = 'down'\n\t\tLEFT = 'left'\n\t\tRIGHT = 'right'\n\tmy_direction = Direction.UP",
              "Example of an enum with string values:\n\tfrom enum import Enum\n\tclass Status(Enum):\n\t\tACTIVE = 'active'\n\t\tINACTIVE = 'inactive'\n\t\tPENDING = 'pending'\n\tuser_status = Status.ACTIVE",
              "An enum with string values is defined as follows:\n\tfrom enum import Enum\n\tclass Color(Enum):\n\t\tRED = 'red'\n\t\tGREEN = 'green'\n\t\tBLUE = 'blue'\n\tfavorite_color = Color.GREEN"
            ]
          },
          {
            "tag": "access_enum_values_python",
            "patterns": [
              "how to access a value from an enum in python",
              "give me an example of accessing enum values in python",
              "how to get the value of an enum in python",
              "can you access the values of an enum in python"
            ],
            "responses": [
              "You can access a value from an enum like this:\n\tfrom enum import Enum\n\tclass Direction(Enum):\n\t\tUP = 1\n\t\tDOWN = 2\n\t\tLEFT = 3\n\t\tRIGHT = 4\n\tmy_direction = Direction.UP\n\tprint(my_direction.name)  # 'UP'\n\tprint(my_direction.value)  # 1",
              "Example of accessing an enum value:\n\tfrom enum import Enum\n\tclass Status(Enum):\n\t\tACTIVE = 1\n\t\tINACTIVE = 0\n\t\tPENDING = 2\n\tuser_status = Status.ACTIVE\n\tprint(user_status.name)  # 'ACTIVE'\n\tprint(user_status.value)  # 1",
              "To access an enum value, you can do the following:\n\tfrom enum import Enum\n\tclass Color(Enum):\n\t\tRED = '#FF0000'\n\t\tGREEN = '#00FF00'\n\t\tBLUE = '#0000FF'\n\tfavorite_color = Color.GREEN\n\tprint(favorite_color.name)  # 'GREEN'\n\tprint(favorite_color.value)  # '#00FF00'"
            ]
          },
          {
            "tag": "iterate_enum_python",
            "patterns": [
              "how to iterate over the values of an enum in python",
              "give me an example of iterating through an enum in python",
              "how to loop through an enum in python",
              "can you iterate over the values of an enum in python"
            ],
            "responses": [
              "You can iterate over enum values using a `for` loop:\n\tfrom enum import Enum\n\tclass Direction(Enum):\n\t\tUP = 1\n\t\tDOWN = 2\n\t\tLEFT = 3\n\t\tRIGHT = 4\n\tfor direction in Direction:\n\t\tprint(direction)",
              "Example of iterating through an enum:\n\tfrom enum import Enum\n\tclass Status(Enum):\n\t\tACTIVE = 1\n\t\tINACTIVE = 0\n\t\tPENDING = 2\n\tfor status in Status:\n\t\tprint(f'{status.name}: {status.value}')",
              "You can loop through the values of an enum as follows:\n\tfrom enum import Enum\n\tclass Color(Enum):\n\t\tRED = '#FF0000'\n\t\tGREEN = '#00FF00'\n\t\tBLUE = '#0000FF'\n\tfor color in Color:\n\t\tprint(f'{color.name}: {color.value}')"
            ]
          },
          {
            "tag": "sequential_search_step_by_step_python",
            "patterns": [
              "explain step-by-step sequential search in python",
              "how does step-by-step sequential search work in python",
              "can you give me a step-by-step example of sequential search in python",
              "what is the flow of sequential search in python",
              "i want to understand sequential search step by step in python"
            ],
            "responses": [
              "Here is the sequential search algorithm explained step by step:\n\n1. **Define the function**:\n\ndef sequential_search(array, target_value):\n\nThis function takes an array and the value we want to find.\n\n2. **Iterate over the array using a loop**:\n\nfor i in range(len(array)):\n\nWe iterate through each element in the array, using the index `i` to access the values.\n\n3. **Check if the current value matches the target**:\n\nif array[i] == target_value:\n    return i  # Return the index if found\n\nWe compare the current value to the target value. If they match, we return the index.\n\n4. **Return -1 if the value is not found**:\n\nreturn -1  # If the value is not found\n\nThis indicates that the value is not present in the array.\n\n5. **Complete example**:\n\nnumbers = [4, 2, 7, 9, 5]\nresult = sequential_search(numbers, 7)\nprint(result)  # Output: 2\n"
            ]
          },
          {
            "tag": "for_loop_sequential_search_python",
            "patterns": [
              "how is the for loop implemented in sequential search in python",
              "can you give me just the for loop of the sequential search algorithm in python",
              "how does sequential search traverse the array in python",
              "i want to see the loop in sequential search in python",
              "give me the for loop part of sequential search in python"
            ],
            "responses": [
              "The for loop in sequential search goes through the array element by element:\n\n\nfor i in range(len(array)):\n    # Here, each element is evaluated one by one\n\n"
            ]
          },
          {
            "tag": "if_condition_sequential_search_python",
            "patterns": [
              "how does the if condition work in sequential search in python",
              "can you give me the if condition of the sequential search algorithm in python",
              "how does it check if the value is found in sequential search in python",
              "i want to see the if condition in sequential search in python",
              "give me the if part of sequential search in python"
            ],
            "responses": [
              "The if condition checks if the current value matches the target:\n\n\nif array[i] == target_value:\n    return i  # Return the index if found\n\n"
            ]
          },
          {
            "tag": "not_found_return_sequential_search_python",
            "patterns": [
              "what happens if the value is not found in sequential search in python",
              "can you give me the part where the value is not found in python",
              "how does it return -1 in sequential search in python",
              "i want to see the return of -1 in the sequential search algorithm in python",
              "give me the part where the value is not found in sequential search in python"
            ],
            "responses": [
              "If the value is not found, the algorithm returns -1:\n\n\nreturn -1  # If the value is not found\n\n"
            ]
          },
          {
            "tag": "function_definition_sequential_search_python",
            "patterns": [
              "how is the function defined in sequential search in python",
              "can you give me just the part where the function is defined in python",
              "how does sequential search start in python",
              "i want to see the function header of sequential search in python",
              "give me the function definition part in sequential search in python"
            ],
            "responses": [
              "The sequential search function is defined like this:\n\n\ndef sequential_search(array, target_value):\n    # Here goes the algorithm body\n\n"
            ]
          },
          {
            "tag": "arguments_sequential_search_python",
            "patterns": [
              "what arguments does sequential search receive in python",
              "can you explain the parameters of sequential search in python",
              "how do the arguments work in the sequential search algorithm in python",
              "what parameters does the sequential search function need in python",
              "give me the arguments of sequential search in python"
            ],
            "responses": [
              "The sequential search function takes two arguments:\n\n1. **array**: This is the list that will be iterated over.\n2. **target_value**: This is the value we want to find.\n\nExample:\n\nsequential_search([4, 2, 7, 9], 7)\n"
            ]
          },
          {
            "tag": "index_found_sequential_search_python",
            "patterns": [
              "how does it return the found index in sequential search in python",
              "can you give me the part where it returns the index in sequential search in python",
              "what happens when the target value is found in sequential search in python",
              "i want to see how it returns the found index in sequential search in python",
              "give me the part where it returns the index in sequential search in python"
            ],
            "responses": [
              "When the target value is found, the function returns the index:\n\n\nreturn i  # returns the index where the value was found\n"
            ]
          },
          {
            "tag": "practical_use_sequential_search_python",
            "patterns": [
              "how do i use sequential search in a practical case in python",
              "can you give me a practical example of sequential search in python",
              "what do i need to test sequential search in python",
              "i want to see how sequential search is used in a program in python",
              "give me an example of sequential search usage in python"
            ],
            "responses": [
              "Here is a practical example of using sequential search:\n\n\ndef sequential_search(lst, target):\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return -1\n\nnumbers = [1, 3, 5, 7, 9]\ntarget = 7\nresult = sequential_search(numbers, target)\n\nif result != -1:\n    print(f'Value found at index {result}')\nelse:\n    print('Value not found')\n"
            ]
          },
          {
            "tag": "complexity_sequential_search_python",
            "patterns": [
              "what is the complexity of sequential search",
              "can you explain the efficiency of sequential search",
              "how efficient is the sequential search algorithm",
              "i want to know the complexity of sequential search",
              "give me the time complexity of sequential search"
            ],
            "responses": [
              "The complexity of sequential search is:\n\n- **Best case**: O(1), when the target value is the first element.\n- **Worst case**: O(n), when the value is at the end or not in the list.\n- **Average case**: O(n/2), which simplifies to O(n).\n\nThis makes it inefficient for large lists if the target value is not near the beginning."
            ]
          },
          {
            "tag": "binary_search_python",
            "patterns": [
              "how does binary search work in python",
              "what is binary search in python",
              "can you explain the binary search algorithm in python",
              "give me the code for the binary search algorithm in python",
              "how do i implement binary search in python"
            ],
            "responses": [
              "Binary search is an efficient algorithm to find an element in a sorted list. It halves the search range at each step. Here is the basic code in Python:\n\n\ndef binary_search(lst, target):\n    start = 0\n    end = len(lst) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if lst[mid] == target:\n            return mid  # returns the index if the value is found\n        elif lst[mid] < target:\n            start = mid + 1  # adjusts the start\n        else:\n            end = mid - 1  # adjusts the end\n\n    return -1  # returns -1 if the value is not present\n\n# Example usage\nnumbers = [1, 3, 5, 7, 9]\nresult = binary_search(numbers, 7)\nprint(result)  # Output: 3\n"
            ]
          },
          {
            "tag": "function_definition_binary_search_python",
            "patterns": [
              "how is the function defined in binary search in python",
              "can you give me just the part where the function is defined in binary search",
              "how does binary search start in python",
              "i want to see the function header of binary search in python",
              "give me the part where the function is defined in binary search in python"
            ],
            "responses": [
              "The binary search function in Python is defined like this:\n\n\ndef binary_search(lst, target):\n    # Here goes the body of the algorithm\n    pass\n"
            ]
          },
          {
            "tag": "variable_initialization_binary_search_python",
            "patterns": [
              "how are variables initialized in binary search in python",
              "can you give me the part where variables are initialized in binary search",
              "how are start, end, and mid variables set in binary search",
              "i want to see the initialization of variables in binary search in python",
              "give me the part where variables are initialized in binary search in python"
            ],
            "responses": [
              "In binary search, the variables are initialized as follows:\n\n\nstart = 0\nend = len(lst) - 1\nmid = (start + end) // 2\n"
            ]
          },
          {
            "tag": "loop_condition_binary_search_python",
            "patterns": [
              "how is the while loop implemented in binary search in python",
              "can you give me just the while loop part in binary search",
              "how does the while loop work in binary search in python",
              "i want to see the while loop of binary search in python",
              "give me the loop condition in binary search in python"
            ],
            "responses": [
              "The while loop controls the search by halving the range:\n\n\nwhile start <= end:\n    # Code to evaluate and adjust the limits goes here\n    pass\n"
            ]
          },
          {
            "tag": "conditional_value_binary_search_python",
            "patterns": [
              "how does the if condition work in binary search in python",
              "can you give me just the if condition part in binary search",
              "how does it compare the target value in binary search in python",
              "i want to see the if condition of binary search in python",
              "give me the if condition part in binary search in python"
            ],
            "responses": [
              "The `if` conditional checks if the target value equals the value at the middle index:\n\n\nif lst[mid] == target:\n    return mid  # Returns the index if the value is found\n"
            ]
          },
          {
            "tag": "adjusting_limits_binary_search_python",
            "patterns": [
              "how are the limits adjusted in binary search in python",
              "can you give me the part where start and end are adjusted in binary search",
              "how are the limits modified in binary search in python",
              "i want to see the adjustment of start and end in binary search in python",
              "give me the part where limits are adjusted in binary search in python"
            ],
            "responses": [
              "In binary search, the limits are adjusted depending on the compared value:\n\n\nif lst[mid] < target:\n    start = mid + 1  # Adjusts the start\nelse:\n    end = mid - 1  # Adjusts the end\n"
            ]
          },
          {
            "tag": "return_not_found_binary_search_python",
            "patterns": [
              "what happens if the value is not found in binary search in python",
              "can you give me the part where it handles not finding the value in binary search",
              "how does it return -1 in binary search in python",
              "i want to see how it indicates that the value was not found in binary search in python",
              "give me the part where it doesn't find the value in binary search in python"
            ],
            "responses": [
              "If the value is not found, the function returns -1:\n\n\nreturn -1  # Returns -1 if the value is not present\n"
            ]
          },
          {
            "tag": "complexity_binary_search_python",
            "patterns": [
              "what is the complexity of binary search in python",
              "can you explain the efficiency of binary search in python",
              "how efficient is the binary search algorithm in python",
              "i want to know the complexity of binary search in python",
              "give me the time complexity of binary search in python"
            ],
            "responses": [
              "The complexity of binary search is:\n\n- **Best case**: O(1), when the value is at the middle.\n- **Worst case**: O(log n), when the search range is divided until only one element remains.\n\nThis makes it much more efficient than sequential search for large lists."
            ]
          },
          {
            "tag": "function_definition_bubble_sort_python",
            "patterns": [
              "how is the function defined in bubble sort in python",
              "can you give me just the part where the function is defined in the bubble sort algorithm",
              "how does bubble sort start in python",
              "i want to see the function header of bubble sort in python",
              "give me the part where the function is defined in the bubble sort algorithm in python"
            ],
            "responses": [
              "The bubble sort function in Python is defined like this:\n\n\ndef bubble_sort(arr):\n    # The body of the algorithm goes here\n"
            ]
          },
          {
            "tag": "initialize_variable_n_bubble_sort_python",
            "patterns": [
              "how is the variable n initialized in bubble sort in python",
              "can you give me the part where n is initialized in the bubble sort algorithm",
              "how is the array size set in the bubble sort algorithm in python",
              "i want to see how n is initialized in bubble sort in python",
              "give me the part where n is initialized in the bubble sort algorithm in python"
            ],
            "responses": [
              "The variable `n` is initialized with the length of the array:\n\n\nn = len(arr)\n"
            ]
          },
          {
            "tag": "nested_loop_structure_bubble_sort_python",
            "patterns": [
              "how do the loops work in bubble sort in python",
              "can you give me the loop part in the bubble sort algorithm",
              "how are the loops structured in the bubble sort algorithm in python",
              "i want to see the nested loop of bubble sort in python",
              "give me the loop part in the bubble sort algorithm in python"
            ],
            "responses": [
              "The algorithm uses a nested loop to iterate through the array:\n\n\nfor i in range(n - 1):\n    for j in range(n - i - 1):\n        # Comparison and swapping here\n"
            ]
          },
          {
            "tag": "comparison_condition_bubble_sort_python",
            "patterns": [
              "how are the elements compared in bubble sort in python",
              "can you give me just the part where the elements are compared in the bubble sort algorithm",
              "how does the if condition work in the bubble sort algorithm in python",
              "i want to see the comparison between elements in bubble sort in python",
              "give me the if part in the bubble sort algorithm in python"
            ],
            "responses": [
              "The `if` condition checks if the current element is greater than the next:\n\n\nif arr[j] > arr[j + 1]:\n    # Swap elements\n"
            ]
          },
          {
            "tag": "element_swapping_bubble_sort_python",
            "patterns": [
              "how are elements swapped in bubble sort in python",
              "can you give me just the swapping part in the bubble sort algorithm",
              "how is the swap done in the bubble sort algorithm in python",
              "i want to see how elements are swapped in bubble sort in python",
              "give me the swapping part in the bubble sort algorithm in python"
            ],
            "responses": [
              "The swapping of elements is done using a temporary variable:\n\n\ntemp = arr[j]\narr[j] = arr[j + 1]\narr[j + 1] = temp\n"
            ]
          },
          {
            "tag": "complexity_bubble_sort_python",
            "patterns": [
              "what is the complexity of bubble sort in python",
              "can you explain the efficiency of the bubble sort algorithm in python",
              "how efficient is the bubble sort algorithm in python",
              "i want to know the complexity of bubble sort in python",
              "give me the time complexity of the bubble sort algorithm in python"
            ],
            "responses": [
              "The complexity of bubble sort is:\n\n- **Best case**: O(n), if the array is already sorted (with optimization).\n- **Worst case**: O(n²), when the array is in reverse order.\n- **Average case**: O(n²), due to the nested loop.\n\nThis makes the algorithm inefficient for large data volumes."
            ]
          },
          {
            "tag": "quick_sort_python",
            "patterns": [
              "how does quick sort work in python",
              "what is the quick sort algorithm in python",
              "can you explain the quick sort algorithm in python",
              "give me the quick sort code in python",
              "how do i implement quick sort in python"
            ],
            "responses": [
              "Quick Sort is a sorting algorithm that uses the divide-and-conquer approach. It divides the list into sublists using a pivot element, placing smaller elements to the left and larger elements to the right. It then recursively sorts the parts. Here's the complete code in Python:\n\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[-1]\n    left = [x for x in arr[:-1] if x < pivot]\n    right = [x for x in arr[:-1] if x >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n# Example usage\nnumbers = [34, 7, 23, 32, 5, 62]\nprint(quick_sort(numbers))\n# Output: [5, 7, 23, 32, 34, 62]\n\n"
            ]
          },
          {
            "tag": "function_definition_quick_sort_py",
            "patterns": [
              "how is the function defined in quick sort in python",
              "can you give me just the part where the function is defined in quick sort in python",
              "how does quick sort start in python",
              "i want to see the header of the quick sort function in python",
              "give me the part where the function is defined in quick sort in python"
            ],
            "responses": [
              "The Quick Sort function definition in Python is as follows:\n\n\ndef quick_sort(arr):\n    # Here goes the algorithm body\n    pass\n\n"
            ]
          },
          {
            "tag": "base_condition_quick_sort_py",
            "patterns": [
              "what is the base condition in quick sort in python",
              "can you give me the part with the base condition in quick sort in python",
              "how does recursion end in quick sort in python",
              "i want to see the base condition of quick sort in python",
              "give me the part where the base condition is set in quick sort in python"
            ],
            "responses": [
              "The base condition of Quick Sort checks if the list has one or no elements, stopping recursion:\n\n\nif len(arr) <= 1:\n    return arr\n\n"
            ]
          },
          {
            "tag": "partitioning_quick_sort_py",
            "patterns": [
              "how is partitioning done in quick sort in python",
              "can you give me just the partitioning part in quick sort in python",
              "how are elements divided in quick sort in python",
              "i want to see how the list is partitioned in quick sort in python",
              "give me the partitioning part in quick sort in python"
            ],
            "responses": [
              "The Quick Sort partitioning divides the list into two sublists based on a pivot:\n\n\npivot = arr[-1]\nleft = [x for x in arr[:-1] if x < pivot]\nright = [x for x in arr[:-1] if x >= pivot]\n\n"
            ]
          },
          {
            "tag": "sublist_combination_quick_sort_py",
            "patterns": [
              "how are sublists combined in quick sort in python",
              "can you give me just the combination part in quick sort in python",
              "how are elements merged in quick sort in python",
              "i want to see how sublists are combined in quick sort in python",
              "give me the combination part in quick sort in python"
            ],
            "responses": [
              "The combination of the sublists with the pivot is done as follows:\n\n\nreturn quick_sort(left) + [pivot] + quick_sort(right)\n\n"
            ]
          },
          {
            "tag": "complexity_quick_sort_py",
            "patterns": [
              "what is the complexity of quick sort in python",
              "can you explain the efficiency of quick sort in python",
              "how efficient is quick sort in python",
              "i want to know the complexity of quick sort in python",
              "give me the time complexity of quick sort in python"
            ],
            "responses": [
              "The complexity of Quick Sort is:\n\n- **Best case**: O(n log n), when the pivots divide the list evenly.\n- **Worst case**: O(n²), when the pivot is the largest or smallest element in each partition.\n- **Average case**: O(n log n), due to the recursive nature of the algorithm."
            ]
          },
          {
            "tag": "pivot_selection_quick_sort_py",
            "patterns": [
              "how is the pivot selected in quick sort in python",
              "can you give me just the part where the pivot is chosen in quick sort in python",
              "how does the pivot work in quick sort in python",
              "i want to see how the pivot is defined in quick sort in python",
              "give me the pivot part in quick sort in python"
            ],
            "responses": [
              "The pivot is selected as the last element of the list:\n\n\npivot = arr[-1]\n\n"
            ]
          },
          {
            "tag": "sublist_filling_quick_sort_py",
            "patterns": [
              "how are sublists filled in quick sort in python",
              "can you give me just the part where elements are distributed in quick sort in python",
              "how are elements separated in quick sort in python",
              "i want to see how sublists are filled in quick sort in python",
              "give me the sublist part in quick sort in python"
            ],
            "responses": [
              "Elements are separated into the left and right sublists based on the pivot:\n\n\nleft = [x for x in arr[:-1] if x < pivot]\nright = [x for x in arr[:-1] if x >= pivot]\n\n"
            ]
          },
          {
            "tag": "recursion_quick_sort_py",
            "patterns": [
              "how does recursion work in quick sort in python",
              "can you give me the part where recursion is applied in quick sort in python",
              "how are subarrays called recursively in quick sort in py",
              "i want to see the recursion of quick sort in python",
              "give me the recursion part in quick sort in py"
            ],
            "responses": [
              "Recursion is applied by sorting the left and right subarrays:\n\n\nreturn quick_sort(left) + [pivot] + quick_sort(right)\n\n"
            ]
          },
          {
            "tag": "merge_sort_py",
            "patterns": [
              "how does merge sort work in python",
              "what is the merge sort algorithm in py",
              "can you explain the merge sort algorithm in python",
              "give me the code for merge sort in py",
              "how do i implement merge sort in python"
            ],
            "responses": [
              "Merge Sort is a sorting algorithm that uses the divide-and-conquer approach. It divides the array into smaller parts, sorts them, and then merges them. Here's the complete code in Python:\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    return merge(merge_sort(left), merge_sort(right))\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    return result + left + right\n\n# Example usage\nnumbers = [38, 27, 43, 3, 9, 82, 10]\nprint(merge_sort(numbers))\n# Output: [3, 9, 10, 27, 38, 43, 82]\n\n"
            ]
          },
          {
            "tag": "function_definition_merge_sort_py",
            "patterns": [
              "how is the function defined in merge sort in python",
              "can you give me just the part where the function is defined in merge sort in python",
              "how does merge sort start in py",
              "i want to see the header of the merge sort function in python",
              "give me the part where the function is defined in merge sort in py"
            ],
            "responses": [
              "The main function of Merge Sort is defined as follows:\n\n\ndef merge_sort(arr):\n    # Here goes the algorithm body\n\n"
            ]
          },
          {
            "tag": "base_condition_merge_sort_py",
            "patterns": [
              "what is the base condition in merge sort in python",
              "can you give me the base condition part in merge sort in python",
              "how does recursion end in merge sort in py",
              "i want to see the base condition of merge sort in python",
              "give me the part where the base condition is set in merge sort in py"
            ],
            "responses": [
              "The base condition of Merge Sort checks if the array has one or no elements, stopping recursion:\n\n\nif len(arr) <= 1:\n    return arr\n\n"
            ]
          },
          {
            "tag": "array_division_merge_sort_py",
            "patterns": [
              "how is the array divided in merge sort in python",
              "can you give me the part where the array is divided in merge sort in python",
              "how does division work in merge sort in py",
              "i want to see how the array is divided in merge sort in python",
              "give me the division part in merge sort in py"
            ],
            "responses": [
              "The array is divided into halves using the middle index:\n\n\nmid = len(arr) // 2\nleft = arr[:mid]\nright = arr[mid:]\n\n"
            ]
          },
          {
            "tag": "recursion_merge_sort_py",
            "patterns": [
              "how does recursion work in merge sort in python",
              "can you give me the part where recursion is applied in merge sort in python",
              "how are halves called recursively in merge sort in py",
              "i want to see the recursion of merge sort in python",
              "give me the recursion part in merge sort in python"
            ],
            "responses": [
              "Recursion is applied by sorting the left and right halves:\n\n\nreturn merge(merge_sort(left), merge_sort(right))\n\n"
            ]
          },
          {
            "tag": "definition_function_merge_py",
            "patterns": [
              "how is the merge function defined in merge sort in python",
              "can you give me just the part where the merge function is defined in merge sort in python",
              "how does the merge function start in python",
              "i want to see the header of the merge function in python",
              "give me the part where the merge function is defined in merge sort in python"
            ],
            "responses": [
              "The merge function combines two sorted subarrays into one:\n\n\ndef merge(left, right):\n    # Here goes the body of the merge function\n\n"
            ]
          },
          {
            "tag": "comparison_merge_python",
            "patterns": [
              "how are elements compared in merge sort in python",
              "can you give me the part where elements are compared in merge sort in python",
              "how does comparison work in merge sort in python",
              "i want to see the comparison of elements in merge sort in python",
              "give me the comparison part in merge sort in python"
            ],
            "responses": [
              "Elements are compared to determine which one to add to the result:\n\n\nif left[0] < right[0]:\n    result.append(left.pop(0))\nelse:\n    result.append(right.pop(0))\n\n"
            ]
          },
          {
            "tag": "combine_remainders_merge_python",
            "patterns": [
              "how are remainders combined in merge sort in python",
              "can you give me the part where remaining elements are combined in merge sort in python",
              "how are remainders handled in merge sort in python",
              "i want to see how remainders are combined in merge sort in python",
              "give me the part of combining remainders in merge sort in python"
            ],
            "responses": [
              "The remaining elements from the halves are combined into the final result:\n\n\nreturn result + left + right\n\n"
            ]
          },
          {
            "tag": "complexity_merge_python",
            "patterns": [
              "what is the complexity of merge sort in python",
              "can you explain the efficiency of merge sort in python",
              "how efficient is merge sort in python",
              "i want to know the complexity of merge sort in python",
              "give me the time complexity of merge sort in python"
            ],
            "responses": [
              "The complexity of Merge Sort is:\n\n- **Best case**: O(n log n), always, as it efficiently divides and combines.\n- **Worst case**: O(n log n), since the algorithm remains efficient.\n- **Average case**: O(n log n), regardless of the initial data order."
            ]
          },
          {
            "tag": "fibonacci_python_en",
            "patterns": [
              "how does the fibonacci algorithm work in python",
              "what is the fibonacci algorithm in python",
              "can you explain how to generate fibonacci in python",
              "give me the code for fibonacci in python",
              "how do i implement the fibonacci series in python"
            ],
            "responses": [
              "The Fibonacci algorithm generates a sequence where each number is the sum of the two preceding ones. Here's the basic code to calculate the Fibonacci series up to a number n:\n\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Example usage\nprint(fibonacci(10)) # Output: 55 (tenth Fibonacci number)\n\n"
            ]
          },
          {
            "tag": "definition_function_fibonacci_python",
            "patterns": [
              "how is the fibonacci function defined in python",
              "can you give me the part where the fibonacci function is defined",
              "how does the fibonacci algorithm start in python",
              "i want to see the header of the fibonacci function in python",
              "give me the part where the fibonacci function is defined in python"
            ],
            "responses": [
              "The Fibonacci function is defined as follows:\n\n\ndef fibonacci(n):\n    # Here goes the body of the algorithm\n\n"
            ]
          },
          {
            "tag": "base_condition_fibonacci_python",
            "patterns": [
              "what is the base condition in the fibonacci algorithm in python",
              "can you give me the base condition of fibonacci in python",
              "how does recursion stop in fibonacci in python",
              "i want to see the base condition of fibonacci in python",
              "give me the base condition part in fibonacci in python"
            ],
            "responses": [
              "The base condition of the Fibonacci algorithm is:\n\n\nif n <= 1:\n    return n\n\nThis ensures the calculation ends when n is 0 or 1."
            ]
          },
          {
            "tag": "recursion_fibonacci_python",
            "patterns": [
              "how does recursion work in fibonacci in python",
              "can you give me the part where recursion is applied in fibonacci",
              "how are recursive calls made in fibonacci in python",
              "i want to see the recursion of fibonacci in python",
              "give me the recursion part in fibonacci in python"
            ],
            "responses": [
              "Recursion in Fibonacci is done by calling the function with decreasing values:\n\n\nreturn fibonacci(n - 1) + fibonacci(n - 2)\n\nThis calculates the sum of the two preceding numbers in the series."
            ]
          },
          {
            "tag": "fibonacci_iterative_python",
            "patterns": [
              "how do i implement fibonacci iteratively in python",
              "can you give me an iterative version of the fibonacci algorithm",
              "how does iterative fibonacci work in python",
              "i want to see the code for iterative fibonacci in python",
              "give me an iterative implementation of fibonacci in python"
            ],
            "responses": [
              "Here's an iterative version of the Fibonacci algorithm, which is more memory and performance efficient:\n\n\ndef fibonacci_iterative(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Example usage\nprint(fibonacci_iterative(10)) # Output: 55\n"
            ]
          },
          {
            "tag": "fibonacci_storage_python",
            "patterns": [
              "how to use storage to optimize fibonacci in python",
              "can you give me a version with storage for fibonacci in python",
              "how does memoization work in fibonacci in python",
              "i want to see an optimized implementation of fibonacci with memoization in python",
              "give me an optimized algorithm for fibonacci with storage in python"
            ],
            "responses": [
              "Memoization is used to save previous calculations and improve the efficiency of the algorithm. Here's an optimized implementation of Fibonacci with memoization:\n\n\ndef fibonacci_memoization(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_memoization(n - 1, memo) + fibonacci_memoization(n - 2, memo)\n    return memo[n]\n\n# Example usage\nprint(fibonacci_memoization(10)) # Output: 55\n"
            ]
          },
          {
            "tag": "fibonacci_recursive_complexity_python",
            "patterns": [
              "what is the complexity of recursive fibonacci in python",
              "can you explain the efficiency of recursive fibonacci in python",
              "how efficient is recursive fibonacci in python",
              "i want to know the complexity of recursive fibonacci in python",
              "give me the time complexity of recursive fibonacci in python"
            ],
            "responses": [
              "The complexity of the recursive Fibonacci algorithm is:\n\n- **Time complexity**: O(2^n), as each call generates two additional calls.\n- **Space complexity**: O(n), due to the depth of the call stack.\nThis makes it inefficient for large values of n."
            ]
          },
          {
            "tag": "fibonacci_memoization_complexity_python",
            "patterns": [
              "what is the complexity of fibonacci with memoization in python",
              "can you explain the efficiency of optimized fibonacci with memoization in python",
              "how efficient is fibonacci with memoization in python",
              "i want to know the complexity of fibonacci with memoization in python",
              "give me the time complexity of optimized fibonacci in python"
            ],
            "responses": [
              "The complexity of the Fibonacci algorithm with memoization is:\n\n- **Time complexity**: O(n), as each number in the sequence is computed only once.\n- **Space complexity**: O(n), due to storage in the memo object.\nThis makes it highly efficient compared to the standard recursive version."
            ]
          },
          {
            "tag": "depth_first_search_python",
            "patterns": [
              "how does depth first search work in python",
              "what is the depth first search algorithm in python",
              "can you explain dfs in python",
              "give me the code for depth first search in python",
              "how do i implement depth first search in python"
            ],
            "responses": [
              "Depth First Search (DFS) is an algorithm that explores as far as possible along a path before backtracking. Here's a basic implementation in Python:\n\n\ndef dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    print(start)\n    visited.add(start)\n\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\n# Example usage\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\ndfs(graph, 'A')\n\nThis code will print the nodes visited in DFS order."
            ]
          },
          {
            "tag": "function_definition_dfs_python",
            "patterns": [
              "how is the depth first search function defined in python",
              "can you give me the header of the dfs function",
              "how does dfs start in python",
              "i want to see the definition of the dfs function in python",
              "give me the part where the depth first search function is defined in python"
            ],
            "responses": [
              "The main DFS function in Python is defined as follows:\n\n\ndef dfs(graph, start, visited=None):\n    # Algorithm body here\n\n"
            ]
          },
          {
            "tag": "mark_node_visited_dfs_python",
            "patterns": [
              "how is a node marked as visited in dfs in python",
              "can you give me the part where nodes are marked as visited in dfs",
              "how is a node registered as visited in dfs in python",
              "i want to see how nodes are marked in depth first search in python",
              "give me the part where a node is registered as visited in dfs in python"
            ],
            "responses": [
              "A node is marked as visited by adding it to a set:\n\n\nvisited.add(start)\n\nThis prevents visiting the same node more than once."
            ]
          },
          {
            "tag": "iterate_neighbors_dfs_python",
            "patterns": [
              "how are neighbors iterated in dfs in python",
              "can you give me the part where adjacent nodes are iterated in dfs",
              "how does neighbor iteration work in depth first search in python",
              "i want to see the code to iterate neighbors in dfs in python",
              "give me the part where neighbors are iterated in dfs in python"
            ],
            "responses": [
              "Neighbors are iterated using a for loop:\n\n\nfor neighbor in graph[start]:\n    if neighbor not in visited:\n        dfs(graph, neighbor, visited)\n\nThis ensures all adjacent nodes are explored."
            ]
          },
          {
            "tag": "graph_structure_dfs_python",
            "patterns": [
              "how is the graph defined for dfs in python",
              "can you show me how the graph is structured in dfs",
              "how does the data structure for the graph work in dfs in python",
              "i want to see how the graph is represented for depth first search in python",
              "give me an example of a graph for dfs in python"
            ],
            "responses": [
              "A graph for DFS is typically represented as a dictionary where the keys are nodes and the values are lists of adjacent nodes. Example:\n\n\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n\nThis allows representing the connectivity between nodes."
            ]
          },
          {
            "tag": "iterative_dfs_python",
            "patterns": [
              "how is iterative dfs implemented in python",
              "can you show me an iterative version of dfs in python",
              "how does iterative dfs work in python",
              "i want to see the code for iterative dfs in python",
              "give me an iterative implementation of dfs in python"
            ],
            "responses": [
              "Here is an iterative implementation of DFS using a stack:\n\n\ndef dfs_iterative(graph, start):\n    stack = [start]\n    visited = set()\n\n    while stack:\n        node = stack.pop()\n\n        if node not in visited:\n            print(node)\n            visited.add(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n\n# Example usage\ndfs_iterative(graph, 'A')\n\nThis uses a stack instead of recursion to control the algorithm's flow."
            ]
          },
          {
            "tag": "dfs_complexity_python",
            "patterns": [
              "what is the complexity of dfs in python",
              "can you explain the efficiency of dfs in python",
              "how efficient is dfs in python",
              "i want to know the complexity of dfs in python",
              "give me the time complexity of dfs in python"
            ],
            "responses": [
              "The complexity of the DFS algorithm is:\n\n- **Time complexity**: O(V + E), where V is the number of vertices and E is the number of edges.\n- **Space complexity**: O(V), due to storing visited nodes and the call stack (in the recursive version) or the explicit stack (in the iterative version).\nThis makes it efficient for exploring graphs with many nodes and edges."
            ]
          },
          {
            "tag": "stack_initialization_dfs_iterative_python",
            "patterns": [
              "how is the stack initialized in iterative dfs in python",
              "can you show me the part where the stack is created in iterative dfs",
              "how does the stack start in iterative dfs in python",
              "i want to see the stack initialization in iterative dfs in python",
              "give me the part where the stack is initialized in iterative dfs in python"
            ],
            "responses": [
              "In the iterative implementation of DFS, the stack is initialized with the starting node:\n\n\nstack = [start]\n\nThis sets the starting point for graph exploration."
            ]
          },
          {
            "tag": "unvisited_node_check_dfs_python",
            "patterns": [
              "how to check if a node has not been visited in dfs in python",
              "can you show me how to ensure a node is not visited twice in dfs",
              "how to check if a node has been visited in depth-first search in python",
              "i want to see how the node state is checked in dfs in python",
              "give me the part where it checks if a node has already been visited in dfs in python"
            ],
            "responses": [
              "To ensure a node is not visited twice, the `not in` function of the visited set is used:\n\n\nif node not in visited:\n    # Process the node\n\nThis ensures each node is processed only once."
            ]
          },
          {
            "tag": "add_neighbors_to_stack_dfs_python",
            "patterns": [
              "how are neighbors added to the stack in dfs in python",
              "can you show me the part where neighboring nodes are added in iterative dfs",
              "how does adding neighbors work in dfs in python",
              "i want to see how neighbors are added to the stack in depth-first search in python",
              "give me the part where neighboring nodes are added to the stack in dfs in python"
            ],
            "responses": [
              "In the iterative version of DFS, the neighbors of the current node are added to the stack using the loop:\n\n\nfor neighbor in graph[node]:\n    stack.append(neighbor)\n\nThis ensures connected nodes are explored in future iterations."
            ]
          },
          {
            "tag": "print_visited_nodes_dfs_python",
            "patterns": [
              "how are visited nodes printed in dfs in python",
              "can you show me how visited nodes are recorded in dfs",
              "how are processed nodes handled in depth-first search in python",
              "i want to see how visited nodes are printed in dfs in python",
              "give me the part where nodes are printed in dfs in python"
            ],
            "responses": [
              "Visited nodes are printed using the `print` function immediately after being marked as visited:\n\n\nprint(node)\n\nThis logs each visited node in the exploration order."
            ]
          },
          {
            "tag": "use_set_visited_nodes_dfs_python",
            "patterns": [
              "why is a set used for visited nodes in dfs in python",
              "can you show me how the set is used in dfs",
              "how does the set work for nodes in depth-first search in python",
              "i want to understand the use of the set in dfs in python",
              "give me the part where the use of the set for visited nodes in dfs in python is explained"
            ],
            "responses": [
              "The `set` is used to store visited nodes because it allows efficient checks to see if a node has already been visited:\n\n\nvisited.add(node)\nif neighbor not in visited:\n    # Process the neighbor\n\nThis structure provides constant-time insertion and verification operations."
            ]
          },
          {
            "tag": "heap_sort_python",
            "patterns": [
              "what is the heap sort algorithm in python",
              "how does heap sort work in python",
              "can you explain heap sort in python",
              "give me the complete code of the heap sort algorithm in python",
              "how do i implement heap sort in python"
            ],
            "responses": [
              "The Heap Sort algorithm is a sorting algorithm that uses the heap data structure. It first builds a max heap from the array, then swaps the first element (the maximum) with the last, reduces the heap size, and applies heapify again. Here's the complete code in Python:\n\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n# Example usage\nnumbers = [12, 11, 13, 5, 6, 7]\nprint(heap_sort(numbers))\n# Output: [5, 6, 7, 11, 12, 13]\n\nThis algorithm is efficient for large datasets."
            ]
          },
          {
            "tag": "max_heap_construction_python",
            "patterns": [
              "how is the max heap built in heap sort in python",
              "can you show me the part where the max heap is created",
              "how is the max heap initialized in python",
              "i want to see the max heap construction in heap sort in python",
              "give me the part where the max heap is built in heap sort in python"
            ],
            "responses": [
              "The max heap is built by applying the `heapify` function from the middle of the array backward:\n\n\nfor i in range(len(arr) // 2 - 1, -1, -1):\n    heapify(arr, len(arr), i)\n\nThis ensures that subtrees are valid heaps."
            ]
          },
          {
            "tag": "max_extraction_heap_sort_python",
            "patterns": [
              "how is the maximum element extracted in heap sort in python",
              "can you show me the part where the first element is swapped with the last",
              "how is the swapping done in heap sort in python",
              "i want to see the maximum extraction in heap sort in python",
              "give me the part where the swap happens in heap sort in python"
            ],
            "responses": [
              "In Heap Sort, the maximum (first element) is swapped with the last:\n\n\narr[0], arr[i] = arr[i], arr[0]\n\nThis moves the largest element to the end of the sorted array."
            ]
          },
          {
            "tag": "complexity_heap_sort_python",
            "patterns": [
              "what is the complexity of heap sort in python",
              "can you explain the efficiency of heap sort en python",
              "how efficient is heap sort in python",
              "i want to know the time complexity of heap sort in python",
              "give me the complexity of heap sort in python"
            ],
            "responses": [
              "The complexity of Heap Sort is:\n\n- **Best case**: O(n log n)\n- **Worst case**: O(n log n)\n- **Average case**: O(n log n)\n\nThis makes it efficient and stable in terms of complexity."
            ]
          },
          {
            "tag": "function_definition_heap_sort_python",
            "patterns": [
              "how is the main function defined in heap sort in python",
              "can you give me the header of the heap sort function",
              "how does the heap sort function start in python",
              "i want to see the header of the heap sort function in python",
              "give me the snippet where the main heap sort function is defined in python"
            ],
            "responses": [
              "The definition of the main Heap Sort function is as follows:\n\n\ndef heap_sort(arr):\n    # Here begins the body of the algorithm\n\nThis is the entry point for sorting the array."
            ]
          },
          {
            "tag": "max_heap_iteration_python",
            "patterns": [
              "how do you iterate to build the max heap in heap sort in python",
              "can you give me the snippet where iteration is done to build the max heap in python",
              "i want to see the loop for building the max heap in heap sort in python",
              "how is the iteration for building the max heap done in python",
              "give me the part where the max heap is built in heap sort in python"
            ],
            "responses": [
              "The iteration for building the max heap in the Heap Sort algorithm is as follows:\n\n\nfor i in range(len(arr) // 2 - 1, -1, -1):\n    heapify(arr, len(arr), i)\n\nThis loop iterates from the middle of the array backward, applying the `heapify` function."
            ]
          },
          {
            "tag": "element_swap_heap_sort_python",
            "patterns": [
              "how are elements swapped in heap sort in python",
              "can you give me the code for swapping elements in heap sort in python",
              "i want to see how elements are swapped in heap sort in python",
              "give me the snippet where elements are swapped in heap sort in python",
              "how are elements swapped in heap sort in python"
            ],
            "responses": [
              "The element swap in Heap Sort is performed as follows:\n\n\narr[0], arr[i] = arr[i], arr[0]\n\nThis swap moves the largest element to the end of the sorted array."
            ]
          },
          {
            "tag": "heap_sort_example_python",
            "patterns": [
              "can you give me an example of using heap sort in python",
              "i want to see a complete example of heap sort in python",
              "how is heap sort used on an example array in python",
              "give me a practical example of heap sort in python",
              "how is the heap sort algorithm used in python"
            ],
            "responses": [
              "Here is an example of using Heap Sort in Python:\n\n\nnumbers = [12, 11, 13, 5, 6, 7]\nprint(heap_sort(numbers))\n# Output: [5, 6, 7, 11, 12, 13]\n\nThis example demonstrates how to sort an array of numbers using the Heap Sort algorithm."
            ]
          },
          {
            "tag": "array_size_heap_sort_python",
            "patterns": [
              "how is the size of the array obtained in heap sort in python",
              "can you show me the snippet where the size of the array is obtained in heap sort in python",
              "how is the variable holding the array size defined in heap sort in python",
              "i want to see how the size of the array is handled in heap sort in python",
              "give me the part where the size of the array is obtained in heap sort in python"
            ],
            "responses": [
              "The size of the array is obtained as follows:\n\n\nn = len(arr)\n\nThis stores the length of the array in the variable `n`, which is used in the Heap Sort algorithm."
            ]
          }
    ]
}