[
    {
        "tag": "ciclo_for_en_javascript",
        "patterns": [
            "como puedo crear un ciclo for en js",
            "dame un ejemplo de un ciclo for en js",
            "como escribo un buble for en js",
            "dame un ejemplo de un ciclo for en js"
        ],
        "responses": [
            "Aquí tienes un ejemplo básico de un ciclo for en JavaScrip:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
            "Puedes usar un for para iterar sobre un arreglo:\n\tconst numeros = [1, 2, 3, 4];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log('Elemento:', numeros[i]);\n\t}"
        ]
    },
    {
        "tag": "declaracion_de_variable_en_encabezado_for_js",
        "patterns": [
            "como declaro una variable en un ciclo en js",
            "dame un ejemplo para declarar una variable en js",
            "donde se declara la variable que se usara para iterar en un ciclo for en js",
            "dame un ejemplo de un ciclo for con la variable declarada en el encabezado."
        ],
        "responses": [
            "Aquí tienes un ejemplo de un ciclo for con la variable declarada en el encabezado:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(i);\n\t}",
            "En JavaScript puedes declarar una variable directamente en el encabezado del for, así:\n\tfor (let contador = 10; contador > 0; contador--) {\n\t\tconsole.log('Cuenta regresiva:', contador);\n\t}",
            "La declaración de la variable en el encabezado del ciclo for puede verse así:\n\tfor (let indice = 0; indice < 3; indice++) {\n\t\tconsole.log(`Iteración número: ${indice}`);\n\t}",
            "Un ejemplo donde se declara la variable en el encabezado del for:\n\tfor (let numero = 1; numero <= 5; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}",
            "Así puedes declarar una variable en el encabezado del for en JavaScript:\n\tfor (let paso = 0; paso < 4; paso++) {\n\t\tconsole.log(`Paso actual: ${paso}`);\n\t}"
        ]
    },
    {
        "tag": "condicional_en_ciclo_for_js",
        "patterns": [
            "como funciona la condicional en un ciclo for en js",
            "dame un ejemplo de la condicional en un ciclo for en js",
            "que hace la condicional en el encabezado de un for",
            "dame un ciclo for con una condicional para iterar",
            "como uso una condicional en un ciclo for en js"
        ],
        "responses": [
            "La condicional en un ciclo for determina cuándo se detiene la iteración. Aquí tienes un ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nEn este caso, el ciclo se detiene cuando la condición `i < 5` deja de cumplirse.",
            "Un ciclo for con una condicional:\n\tfor (let numero = 1; numero <= 3; numero++) {\n\t\tconsole.log(`Número actual: ${numero}`);\n\t}\nLa condición `numero <= 3` evalúa si continuar o no.",
            "La condicional es clave para controlar el ciclo. Ejemplo:\n\tfor (let x = 10; x > 0; x--) {\n\t\tconsole.log(`Cuenta regresiva: ${x}`);\n\t}\nAquí, el ciclo se detiene cuando `x > 0` deja de ser verdadero.",
            "Otro ejemplo con condicional:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nEn este caso, la condición es `i < 10`.",
            "Así puedes usar una condicional en el ciclo for:\n\tfor (let indice = 0; indice !== 5; indice++) {\n\t\tconsole.log(`Indice actual: ${indice}`);\n\t}\nEl ciclo se detiene cuando `indice !== 5` es falso."
        ]
    },
    {
        "tag": "incremento_en_ciclo_for_js",
        "patterns": [
            "como hago para que el ciclo for incremente en js",
            "dame un ejemplo de un ciclo for que vaya en incremento en js",
            "como incremento el valor en un ciclo for en js",
            "dame un for que incremente un contador en js",
            "ejemplo de ciclo for que incremente en cada iteracion"
        ],
        "responses": [
            "Para hacer que un ciclo for incremente, puedes usar el operador `++`. Ejemplo:\n\tfor (let i = 0; i < 5; i++) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i++` incrementa el valor de `i` en cada iteración.",
            "Un ciclo que incrementa en pasos de 1:\n\tfor (let contador = 1; contador <= 5; contador++) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se incrementa.",
            "Puedes incrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 0; i < 10; i += 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i += 2` aumenta el valor de `i` en 2 en cada iteración.",
            "Ejemplo donde el incremento es controlado manualmente:\n\tfor (let numero = 0; numero < 20; numero += 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo incrementa en pasos de 5.",
            "Un ciclo for con incremento simple:\n\tfor (let x = 1; x <= 10; x++) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl incremento se hace con `x++`."
        ]
    },
    {
        "tag": "decremento_en_ciclo_for_js",
        "patterns": [
            "como hago para que el ciclo for decremente en js",
            "dame un ejemplo de un ciclo for que vaya en decremento en js",
            "como decremento el valor en un ciclo for en js",
            "dame un for que decremente un contador en js",
            "ejemplo de ciclo for que decremente en cada iteracion"
        ],
        "responses": [
            "Para hacer que un ciclo for decremente, usa el operador `--`. Ejemplo:\n\tfor (let i = 5; i > 0; i--) {\n\t\tconsole.log(`Iteración ${i}`);\n\t}\nAquí, `i--` decrementa el valor de `i` en cada iteración.",
            "Un ciclo que decrementa desde un valor inicial:\n\tfor (let contador = 10; contador >= 1; contador--) {\n\t\tconsole.log(`Contador: ${contador}`);\n\t}\nLa condición controla hasta dónde se decrementa.",
            "Puedes decrementar en pasos diferentes a 1. Ejemplo:\n\tfor (let i = 10; i > 0; i -= 2) {\n\t\tconsole.log(`Valor de i: ${i}`);\n\t}\nAquí, `i -= 2` reduce el valor de `i` en 2 en cada iteración.",
            "Ejemplo donde el decremento es controlado manualmente:\n\tfor (let numero = 50; numero >= 0; numero -= 5) {\n\t\tconsole.log(`Número: ${numero}`);\n\t}\nEl ciclo decrementa en pasos de 5.",
            "Un ciclo for con decremento simple:\n\tfor (let x = 3; x > 0; x--) {\n\t\tconsole.log(`x: ${x}`);\n\t}\nEl decremento se realiza con `x--`."
        ]
    },
    {
        "tag": "uso_break_en_ciclo_js",
        "patterns": [
            "como usar break en un ciclo for en js",
            "dame un ejemplo de break en un ciclo en javascript",
            "como funciona el break en un ciclo for en js",
            "como detener un ciclo con break en javascript"
        ],
        "responses": [
            "El `break` se utiliza para salir de un ciclo antes de que termine. Ejemplo con un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}",
            "Puedes usar `break` para salir del ciclo cuando se cumpla una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(num);\n\t}",
            "Un ejemplo con `break` para detener el ciclo cuando un número sea mayor que 10:\n\tfor (let i = 0; i <= 20; i++) {\n\t\tif (i > 10) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t}"
        ]
    },
    {
        "tag": "uso_continue_en_ciclo_js",
        "patterns": [
            "como usar continue en un ciclo for en js",
            "dame un ejemplo de continue en un ciclo en javascript",
            "como funciona el continue en un ciclo en js",
            "como saltar una iteracion con continue en javascript"
        ],
        "responses": [
            "El `continue` se utiliza para saltarse una iteración del ciclo y pasar a la siguiente. Ejemplo en un ciclo `for`:\n\tfor (let i = 0; i < 10; i++) {\n\t\tif (i === 5) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}",
            "Puedes usar `continue` para saltar una iteración si se cumple una condición:\n\tlet numeros = [1, 2, 3, 4, 5, 6, 7];\n\tfor (let num of numeros) {\n\t\tif (num === 4) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(num);\n\t}",
            "Un ejemplo con `continue` para omitir números impares:\n\tfor (let i = 0; i <= 10; i++) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t}"
        ]
    },
    {
        "tag": "declaracion_de_arrays_en_js",
        "patterns": [
            "como se declara un array en js",
            "dame ejemplos de declaracion de arrays en js",
            "como crear un array en javascript",
            "dame un ejemplo de un array en js",
            "ejemplo de declaracion de arrays en js"
        ],
        "responses": [
            "Un array se puede declarar usando corchetes:\n\tconst numeros [] = [1, 2, 3, 4, 5];\n\tconsole.log(numeros);",
            "También puedes usar la sintaxis genérica para declarar un array:\n\tconst nombres: Array<string> = ['Juan', 'Maria', 'Luis'];\n\tconsole.log(nombres);",
            "Declarar un array vacío y llenarlo luego:\n\tconst datos [] = [];\n\tdatos.push('valor1');\n\tdatos.push('valor2');\n\tconsole.log(datos);"
        ]
    },
    {
        "tag": "acceso_a_elementos_array_con_for_js",
        "patterns": [
            "como acceder a elementos de un array con un ciclo for en tjs",
            "dame ejemplos de recorrer un array con un for en js",
            "como usar un ciclo for para obtener elementos de un array en javascript",
            "dame un ejemplo de acceso a arrays con un for en js",
            "como iterar sobre un array usando for en js"
        ],
        "responses": [
            "Puedes usar un ciclo for para acceder a los elementos de un array:\n\tconst numeros: number[] = [10, 20, 30, 40];\n\tfor (let i = 0; i < numeros.length; i++) {\n\t\tconsole.log(`Elemento en índice ${i}: ${numeros[i]}`);\n\t}",
            "Ejemplo básico de iteración con un for:\n\tconst frutas: string[] = ['manzana', 'naranja', 'platano'];\n\tfor (let i = 0; i < frutas.length; i++) {\n\t\tconsole.log(frutas[i]);\n\t}"
        ]
    },
    {
        "tag": "declaracion_y_uso_basico_tuplas_js",
        "patterns": [
            "como se declara una tupla en js",
            "dame ejemplos de como usar tuplas en js",
            "como crear una tupla en javascript",
            "dame un ejemplo de una tupla en js",
            "ejemplo basico de tupla en js"
        ],
        "responses": [
            "Una tupla en JavaScript se declara especificando los tipos en un arreglo:\n\tconst tupla  = ['Juan', 25];\n\tconsole.log(tupla);",
            "Puedes usar una tupla para representar datos relacionados:\n\tconst coordenadas = [40.7128, -74.0060];\n\tconsole.log(`Latitud: ${coordenadas[0]}, Longitud: ${coordenadas[1]}`);",
            "Ejemplo con tipos mixtos:\n\tconst persona = ['Ana', 30, true];\n\tconsole.log(`Nombre: ${persona[0]}, Edad: ${persona[1]}, Activo: ${persona[2]}`);"
        ]
    },
    {
        "tag": "estructura_basica_if_normal_js",
        "patterns": [
            "como funciona un if en js",
            "dame ejemplos de un if en js",
            "como usar un if en javascript",
            "dame un ejemplo de una estructura if en js",
            "como se estructura un if en js"
        ],
        "responses": [
            "La estructura básica de un `if` en JavaScript es:\n\tif (condicion) {\n\t\t// código a ejecutar si la condición es verdadera\n\t}\nEjemplo:\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
            "Un ejemplo sencillo de un `if`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
            "Otro ejemplo donde se utiliza una comparación:\n\tlet temperatura = 30;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t}",
            "Puedes comprobar condiciones lógicas en el `if`:\n\tlet edad = 20;\n\tif (edad >= 18) {\n\t\tconsole.log('Acceso permitido');\n\t}",
            "Ejemplo de un `if` simple:\n\tlet numero = 4;\n\tif (numero % 2 === 0) {\n\t\tconsole.log('Es un número par');\n\t}"
        ]
    },
    {
        "tag": "condicionales_compuestas_and_if_js",
        "patterns": [
            "como colocar varias condiciones en un if en js",
            "dame ejemplos de un if con varias condiciones en js",
            "como usar el operador and en un if en javascript",
            "como combinar condiciones dentro de un if en js"
        ],
        "responses": [
            "Puedes usar el operador `&&` para combinar condiciones dentro de un `if`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t}",
            "Ejemplo de múltiples condiciones con `&&`:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t}",
            "Puedes combinar más de una condición usando `&&`:\n\tlet temperatura = 30;\n\tlet humedad = 80;\n\tif (temperatura > 25 && humedad > 70) {\n\t\tconsole.log('Hace calor y está húmedo');\n\t}"
        ]
    },
    {
        "tag": "condicionales_negacion_if_js",
        "patterns": [
            "como usar negacion dentro de un if en js",
            "dame ejemplos de como usar el operador not en un if en javascript",
            "como negar una condicion en un if en js",
            "como poner una condicion falsa en un if en javascript"
        ],
        "responses": [
            "Puedes usar el operador `!` para negar una condición dentro de un `if`:\n\tlet estaLloviendo = false;\n\tif (!estaLloviendo) {\n\t\tconsole.log('No está lloviendo');\n\t}",
            "Negar una condición en un `if`:\n\tlet esMayorDeEdad = false;\n\tif (!esMayorDeEdad) {\n\t\tconsole.log('No eres mayor de edad');\n\t}",
            "El operador `!` puede usarse para verificar si una condición es falsa:\n\tlet tieneLicencia = false;\n\tif (!tieneLicencia) {\n\t\tconsole.log('No tienes licencia');\n\t}"
        ]
    },
    {
        "tag": "condicionales_comparativas_if_js",
        "patterns": [
            "como comparar numeros dentro de un if en js",
            "como usar comparaciones numericas en un if en javascript",
            "dame ejemplos de comparaciones numericas en un if en js",
            "como evaluar condiciones numericas en un if en javascript"
        ],
        "responses": [
            "Puedes comparar números usando operadores como `>`, `<`, `===`, etc.:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t}",
            "Comparación numérica en un `if`:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t}",
            "Uso de `===` para comparar valores numéricos:\n\tlet valor = 100;\n\tif (valor === 100) {\n\t\tconsole.log('El valor es 100');\n\t}",
            "Comparar si un número es menor o igual a un valor:\n\tlet temperatura = 18;\n\tif (temperatura <= 20) {\n\t\tconsole.log('La temperatura es baja');\n\t}"
        ]
    },
    {
        "tag": "estructura_basica_if_else_js",
        "patterns": [
            "como funciona un if else en js",
            "dame ejemplos de un if else en js",
            "como usar un if else en javascript",
            "dame un ejemplo de una estructura if else en js",
            "como se estructura un if else en js"
        ],
        "responses": [
            "La estructura básica de un `if-else` es:\n\tif (condicion) {\n\t\t// código si la condición es verdadera\n\t} else {\n\t\t// código si la condición es falsa\n\t}\nEjemplo:\n\tlet edad = 18;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else {\n\t\tconsole.log('Eres menor de edad');\n\t}",
            "Un ejemplo de uso de `if-else`:\n\tlet numero = 10;\n\tif (numero > 5) {\n\t\tconsole.log('El número es mayor que 5');\n\t} else {\n\t\tconsole.log('El número es 5 o menor');\n\t}",
            "Puedes utilizar `else` para manejar la parte falsa de la condición:\n\tlet temperatura = 20;\n\tif (temperatura > 25) {\n\t\tconsole.log('Hace calor');\n\t} else {\n\t\tconsole.log('Hace fresco');\n\t}"
        ]
    },
    {
        "tag": "condicionales_complejas_if_else_js",
        "patterns": [
            "como poner condiciones complejas en un if else en js",
            "dame ejemplos de if else con condiciones multiples en js",
            "como usar operadores logicos en un if else en javascript",
            "como combinar condiciones con if else en js"
        ],
        "responses": [
            "Puedes combinar varias condiciones con operadores lógicos dentro del `if-else`:\n\tlet numero = 10;\n\tif (numero > 5 && numero < 15) {\n\t\tconsole.log('El número está entre 5 y 15');\n\t} else {\n\t\tconsole.log('El número no está entre 5 y 15');\n\t}",
            "Ejemplo de `if-else` con condiciones lógicas:\n\tlet edad = 25;\n\tlet tieneLicencia = true;\n\tif (edad >= 18 && tieneLicencia) {\n\t\tconsole.log('Acceso permitido');\n\t} else {\n\t\tconsole.log('Acceso denegado');\n\t}",
            "Si la primera condición es falsa, puedes comprobar otras condiciones:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}"
        ]
    },
    {
        "tag": "uso_else_if_js",
        "patterns": [
            "como usar un else if en js",
            "dame ejemplos de else if en javascript",
            "como funciona el else if en un if en js",
            "dame un ejemplo de uso de else if en un if en js"
        ],
        "responses": [
            "Puedes usar `else if` para comprobar condiciones adicionales si la primera es falsa:\n\tlet hora = 9;\n\tif (hora >= 12) {\n\t\tconsole.log('Es tarde');\n\t} else if (hora >= 6) {\n\t\tconsole.log('Es mañana');\n\t} else {\n\t\tconsole.log('Es de noche');\n\t}",
            "Ejemplo de `else if` para comparar más de una condición:\n\tlet numero = 5;\n\tif (numero > 10) {\n\t\tconsole.log('El número es mayor a 10');\n\t} else if (numero === 5) {\n\t\tconsole.log('El número es 5');\n\t} else {\n\t\tconsole.log('El número es menor a 5');\n\t}",
            "Usando `else if` para crear un bloque de condiciones más específico:\n\tlet edad = 25;\n\tif (edad >= 18) {\n\t\tconsole.log('Eres adulto');\n\t} else if (edad >= 13) {\n\t\tconsole.log('Eres un adolescente');\n\t} else {\n\t\tconsole.log('Eres un niño');\n\t}"
        ]
    },
    {
        "tag": "estructura_basica_while_js",
        "patterns": [
            "como se usa un ciclo while en js",
            "dame un ejemplo de un ciclo while en javascript",
            "como funciona el ciclo while en js",
            "como se estructura un ciclo while en javascript"
        ],
        "responses": [
            "La estructura básica de un ciclo `while` es la siguiente:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}\nEste ciclo continuará ejecutándose mientras que la condición sea verdadera.",
            "Ejemplo básico de un ciclo `while`:\n\tlet numero = 0;\n\twhile (numero < 5) {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
            "Un ciclo `while` continuará hasta que la condición sea falsa:\n\tlet contador = 0;\n\twhile (contador < 3) {\n\t\tconsole.log('Contando:', contador);\n\t\tcontador++;\n\t}"
        ]
    },
    {
        "tag": "condiciones_en_while_js",
        "patterns": [
            "como poner una condicion dentro de un ciclo while en js",
            "dame ejemplos de condiciones dentro de un ciclo while en js",
            "como usar condicionales en un while en javascript",
            "como evaluar condiciones en un ciclo while en js"
        ],
        "responses": [
            "Puedes poner una condición dentro del `while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
            "Condición dentro de un ciclo `while` para salir después de 5 iteraciones:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
            "Puedes usar una condición lógica compleja dentro del `while`:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t}"
        ]
    },
    {
        "tag": "uso_break_en_while_js",
        "patterns": [
            "como usar break en un ciclo while en js",
            "dame un ejemplo de break en un ciclo while en javascript",
            "como detener un ciclo while con break en js",
            "como salir de un ciclo while en javascript"
        ],
        "responses": [
            "Puedes usar `break` para salir de un ciclo `while` cuando se cumpla una condición:\n\tlet i = 0;\n\twhile (i < 10) {\n\t\tif (i === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
            "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 1;\n\twhile (numero <= 10) {\n\t\tif (numero === 7) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
            "Un ejemplo de cómo salir de un ciclo `while` con `break`:\n\tlet contador = 0;\n\twhile (contador < 10) {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t}"
        ]
    },
    {
        "tag": "uso_continue_en_while_js",
        "patterns": [
            "como usar continue en un ciclo while en js",
            "dame un ejemplo de continue en un ciclo while en javascript",
            "como saltar una iteracion con continue en while en js",
            "como funciona el continue en un ciclo while en javascript"
        ],
        "responses": [
            "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `while`:\n\tlet i = 0;\n\twhile (i < 5) {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}",
            "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\twhile (numero < 10) {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t}",
            "Si deseas omitir los números impares dentro de un ciclo `while`, puedes usar `continue`:\n\tlet i = 0;\n\twhile (i <= 10) {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t}"
        ]
    },
    {
        "tag": "estructura_basica_do_while_js",
        "patterns": [
            "como se usa un ciclo do while en js",
            "dame un ejemplo de un ciclo do while en javascript",
            "como funciona el ciclo do while en js",
            "como se estructura un ciclo do while en javascript"
        ],
        "responses": [
            "La estructura básica de un ciclo `do-while` es la siguiente:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);\nEl ciclo ejecuta el código dentro del bloque `do` al menos una vez, y luego evalúa la condición del `while`.",
            "Ejemplo básico de un ciclo `do-while`:\n\tlet numero = 0;\n\tdo {\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 3);",
            "Un ciclo `do-while` asegura que el bloque de código se ejecute al menos una vez, incluso si la condición es falsa desde el principio:\n\tlet contador = 0;\n\tdo {\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador > 3);"
        ]
    },
    {
        "tag": "condiciones_en_do_while_js",
        "patterns": [
            "como poner una condicion dentro de un ciclo do while en js",
            "dame ejemplos de condiciones dentro de un ciclo do while en js",
            "como usar condicionales en un do while en javascript",
            "como evaluar condiciones en un ciclo do while en js"
        ],
        "responses": [
            "Puedes poner una condición dentro del `do-while` para continuar iterando mientras sea verdadera:\n\tlet i = 0;\n\tdo {\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
            "Ejemplo de cómo poner una condición en un ciclo `do-while` para evaluar si el número es par:\n\tlet numero = 1;\n\tdo {\n\t\tif (numero % 2 === 0) {\n\t\t\tconsole.log(numero + ' es par');\n\t\t}\n\t\tnumero++;\n\t} while (numero <= 10);",
            "Puedes usar una condición para salir del ciclo con `break` si se cumple alguna condición:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 5) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
        ]
    },
    {
        "tag": "uso_break_en_do_while_js",
        "patterns": [
            "como usar break en un ciclo do while en js",
            "dame un ejemplo de break en un ciclo do while en javascript",
            "como detener un ciclo do while con break en js",
            "como salir de un ciclo do while en javascript"
        ],
        "responses": [
            "Puedes usar `break` para salir de un ciclo `do-while` cuando se cumpla una condición:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
            "Usa `break` para salir del ciclo antes de que termine:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero === 2) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
            "Un ejemplo de cómo salir de un ciclo `do-while` con `break`:\n\tlet contador = 0;\n\tdo {\n\t\tif (contador === 4) {\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(contador);\n\t\tcontador++;\n\t} while (contador < 10);"
        ]
    },
    {
        "tag": "uso_continue_en_do_while_js",
        "patterns": [
            "como usar continue en un ciclo do while en js",
            "dame un ejemplo de continue en un ciclo do while en javascript",
            "como saltar una iteracion con continue en do while en js",
            "como funciona el continue en un ciclo do while en javascript"
        ],
        "responses": [
            "Puedes usar `continue` para saltar la iteración actual y continuar con la siguiente en un ciclo `do-while`:\n\tlet i = 0;\n\tdo {\n\t\tif (i === 3) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i < 5);",
            "Ejemplo de cómo usar `continue` para omitir una iteración:\n\tlet numero = 0;\n\tdo {\n\t\tif (numero % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(numero);\n\t\tnumero++;\n\t} while (numero < 10);",
            "Si deseas omitir números impares dentro de un ciclo `do-while`, puedes usar `continue`:\n\tlet i = 0;\n\tdo {\n\t\tif (i % 2 !== 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconsole.log(i);\n\t\ti++;\n\t} while (i <= 10);"
        ]
    },
    {
        "tag": "estructura_basica_switch_js",
        "patterns": [
            "como usar un switch en js",
            "dame un ejemplo de switch en javascript",
            "como funciona el switch en js",
            "como se estructura un switch en javascript"
        ],
        "responses": [
            "La estructura básica de un `switch` es la siguiente:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Miércoles');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
            "Ejemplo básico de un `switch`:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
            "Un `switch` en JavaScript evalúa una expresión y compara su valor con las condiciones (`case`), si coincide ejecuta ese bloque de código:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
        ]
    },
    {
        "tag": "uso_break_en_switch_js",
        "patterns": [
            "como usar break en un switch en js",
            "dame un ejemplo de break en un switch en javascript",
            "como salir de un switch con break en js",
            "como terminar un caso en switch en javascript",
            "para que se usa el break en un switch en js"
        ],
        "responses": [
            "Dentro de un `switch`, el `break` se usa para salir de la estructura después de ejecutar un bloque de código para un `case`:\n\tlet dia = 2;\n\tswitch (dia) {\n\t\tcase 1:\n\t\t\tconsole.log('Lunes');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Martes');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Día no válido');\n\t}",
            "Un `break` evita que el `switch` siga evaluando casos después de encontrar el primero que coincide:\n\tlet mes = 3;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tconsole.log('Marzo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
            "El `break` es fundamental en un `switch` para evitar la ejecución del siguiente `case` sin importar que la condición no coincida:\n\tlet color = 'rojo';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
        ]
    },
    {
        "tag": "uso_default_en_switch_js",
        "patterns": [
            "como usar default en un switch en js",
            "dame un ejemplo de default en un switch en javascript",
            "como manejar valores no esperados en switch con default en js",
            "como usar el caso default en switch en javascript"
        ],
        "responses": [
            "El `default` en un `switch` maneja cualquier valor que no coincida con ninguno de los `case`. Ejemplo:\n\tlet mes = 10;\n\tswitch (mes) {\n\t\tcase 1:\n\t\t\tconsole.log('Enero');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Febrero');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Mes no válido');\n\t}",
            "Usar `default` permite manejar cualquier caso no previsto. Ejemplo:\n\tlet numero = 7;\n\tswitch (numero) {\n\t\tcase 1:\n\t\t\tconsole.log('Uno');\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tconsole.log('Dos');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Número no reconocido');\n\t}",
            "El `default` es útil para manejar cualquier entrada inesperada que no coincida con un `case` específico:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'rojo':\n\t\t\tconsole.log('Color rojo seleccionado');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color azul seleccionado');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color no reconocido');\n\t}"
        ]
    },
    {
        "tag": "multiples_casos_en_switch_js",
        "patterns": [
            "como manejar multiples casos en un switch en js",
            "dame un ejemplo de switch con varios casos en javascript",
            "como agrupar varios casos en un switch en js",
            "como usar varios casos en un switch en javascript"
        ],
        "responses": [
            "Puedes manejar múltiples casos en un `switch` agrupándolos sin usar `break` entre ellos:\n\tlet fruta = 'manzana';\n\tswitch (fruta) {\n\t\tcase 'manzana':\n\t\tcase 'pera':\n\t\t\tconsole.log('Es una fruta');\n\t\t\tbreak;\n\t\tcase 'zanahoria':\n\t\t\tconsole.log('Es un vegetal');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('No se reconoció la entrada');\n\t}",
            "Agrupar varios casos es útil si deseas ejecutar el mismo código para varias opciones:\n\tlet numero = 3;\n\tswitch (numero) {\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\t\tconsole.log('Número 1, 2 o 3');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Otro número');\n\t}",
            "Ejemplo de cómo agrupar múltiples `case` para ejecutar la misma acción:\n\tlet color = 'verde';\n\tswitch (color) {\n\t\tcase 'verde':\n\t\tcase 'amarillo':\n\t\t\tconsole.log('Color cálido');\n\t\t\tbreak;\n\t\tcase 'azul':\n\t\t\tconsole.log('Color frío');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
        ]
    },
    {
        "tag": "declaracion_basica_funcion_js",
        "patterns": [
            "como declarar una funcion en javascript",
            "dame un ejemplo de una funcion en js",
            "como crear una funcion en javascript",
            "cual es la sintaxis para declarar una funcion en js"
        ],
        "responses": [
            "La sintaxis básica para declarar una función en JavaScript es la siguiente:\n\tfunction saludo() {\n\t\tconsole.log('Hola, mundo');\n\t}",
            "Un ejemplo de una función básica en JavaScript:\n\tfunction calcularSuma(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
            "Para declarar una función en JavaScript, simplemente utiliza la palabra clave `function`:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola ' + nombre);\n\t}"
        ]
    },
    {
        "tag": "declaracion_funcion_con_parametros_js",
        "patterns": [
            "como declarar una funcion con parametros en js",
            "dame un ejemplo de una funcion con parametros en javascript",
            "como pasar parametros a una funcion en js",
            "como crear una funcion con parametros en javascript"
        ],
        "responses": [
            "Para declarar una función con parámetros en JavaScript, se colocan los parámetros entre paréntesis después del nombre de la función:\n\tfunction saludar(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
            "Ejemplo de una función con parámetros:\n\tfunction multiplicar(a: number, b: number): number {\n\t\treturn a * b;\n\t}",
            "Los parámetros se definen entre paréntesis en la declaración de la función:\n\tfunction mostrarMensaje(mensaje: string): void {\n\t\tconsole.log(mensaje);\n\t}"
        ]
    },
    {
        "tag": "funciones_con_tipado_de_retorno_js",
        "patterns": [
            "como declarar una funcion con tipo de retorno en js",
            "dame un ejemplo de funcion con tipo de retorno en javascript",
            "como especificar el tipo de retorno de una funcion en js",
            "como devolver un valor de una funcion en javascript"
        ],
        "responses": [
            "Para especificar el tipo de retorno de una función en JavaScript, se coloca el tipo después de los paréntesis:\n\tfunction sumar(a: number, b: number): number {\n\t\treturn a + b;\n\t}",
            "Ejemplo de función con tipo de retorno:\n\tfunction obtenerNombre(): string {\n\t\treturn 'Juan';\n\t}",
            "En JavaScript, puedes especificar el tipo de retorno de la siguiente manera:\n\tfunction esPositivo(numero: number): boolean {\n\t\treturn numero > 0;\n\t}"
        ]
    },
    {
        "tag": "funciones_con_valores_por_defecto_js",
        "patterns": [
            "como declarar una funcion con valores por defecto en js",
            "dame un ejemplo de funcion con parametros por defecto en javascript",
            "como poner valores por defecto en una funcion en js",
            "como asignar un valor por defecto a un parametro en javascript"
        ],
        "responses": [
            "Puedes asignar valores por defecto a los parámetros de la siguiente manera:\n\tfunction saludar(nombre: string = 'Juan'): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t}",
            "Ejemplo de función con valores por defecto:\n\tfunction calcularPrecio(precio: number, descuento: number = 0): number {\n\t\treturn precio - (precio * descuento);\n\t}",
            "Si un parámetro no se pasa, se utilizará el valor por defecto asignado:\n\tfunction mostrarDetalles(producto: string = 'Producto A'): void {\n\t\tconsole.log('Detalles del ' + producto);\n\t}"
        ]
    },
    {
        "tag": "funciones_anonimas_js",
        "patterns": [
            "como declarar una funcion anonima en js",
            "dame un ejemplo de una funcion anonima en javascript",
            "como usar funciones anonimas en js",
            "que es una funcion anonima en javascript"
        ],
        "responses": [
            "Una función anónima en JavaScript se declara sin nombre:\n\tlet suma = function(a: number, b: number): number {\n\t\treturn a + b;\n\t};",
            "Ejemplo de función anónima asignada a una variable:\n\tlet saludo = function(nombre: string): void {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
            "Una función anónima es útil cuando necesitas pasar una función como argumento o asignarla a una variable:\n\tlet multiplicar = function(a: number, b: number): number {\n\t\treturn a * b;\n\t};"
        ]
    },
    {
        "tag": "funciones_flecha_js",
        "patterns": [
            "como usar una funcion flecha en js",
            "dame un ejemplo de una funcion flecha en javascript",
            "como declarar una funcion flecha en js",
            "que son las funciones flecha en javascript"
        ],
        "responses": [
            "Las funciones flecha en javascript tienen una sintaxis más corta. Ejemplo:\n\tlet suma = (a: number, b: number): number => {\n\t\treturn a + b;\n\t};",
            "Un ejemplo de función flecha en javascript:\n\tlet saludo = (nombre: string): void => {\n\t\tconsole.log('Hola, ' + nombre);\n\t};",
            "Las funciones flecha son útiles cuando deseas una función más concisa:\n\tlet multiplicar = (a: number, b: number): number => a * b;"
        ]
    },
    {
        "tag": "funciones_recursivas_js",
        "patterns": [
            "como declarar una funcion recursiva en js",
            "dame un ejemplo de funcion recursiva en javascript",
            "como hacer que una funcion se llame a si misma en js",
            "como crear una funcion recursiva en javascript"
        ],
        "responses": [
            "Una función recursiva es aquella que se llama a sí misma. Ejemplo:\n\tfunction factorial(n: number): number {\n\t\tif (n === 0) return 1;\n\t\treturn n * factorial(n - 1);\n\t}",
            "Ejemplo de una función recursiva para calcular la suma de los números del 1 al `n`:\n\tfunction sumaRecursiva(n: number): number {\n\t\tif (n === 1) return 1;\n\t\treturn n + sumaRecursiva(n - 1);\n\t}",
            "Una función recursiva puede ser útil para resolver problemas complejos que se pueden dividir en subproblemas más simples:\n\tfunction fibonacci(n: number): number {\n\t\tif (n <= 1) return n;\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2);\n\t}"
        ]
    },
    {
        "tag": "declaracion_objeto_js",
        "patterns": [
            "como declarar un objeto en javascript",
            "dame un ejemplo de objeto en js",
            "como crear un objeto en javascript",
            "cual es la sintaxis para declarar un objeto en js"
        ],
        "responses": [
            "En JavaScript, puedes declarar un objeto de la siguiente manera:\n\tlet persona = { nombre: 'Juan', edad: 25 };",
            "Ejemplo básico de un objeto:\n\tlet libro = { titulo: 'JavaScript para principiantes', autor: 'Juan Pérez', anio: 2021 };",
            "La sintaxis para declarar un objeto es la siguiente:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };"
        ]
    },
    {
        "tag": "tipado_objeto_js",
        "patterns": [
            "como tipar un objeto en javascript",
            "dame un ejemplo de un objeto tipado en js",
            "como usar tipos en un objeto en javascript",
            "como declarar un objeto con tipos en js"
        ],
        "responses": [
            "Para tipar un objeto en JavaScript, puedes usar una interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
            "Puedes tipar un objeto de la siguiente manera:\n\tlet coche: { marca: string; modelo: string; anio: number } = { marca: 'Toyota', modelo: 'Corolla', anio: 2022 };",
            "Un ejemplo de tipado usando interfaces:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet miLibro: Libro = { titulo: 'JavaScript para todos', autor: 'Pedro' };"
        ]
    },
    {
        "tag": "propiedades_opcionales_objeto_js",
        "patterns": [
            "como declarar propiedades opcionales en un objeto en js",
            "dame un ejemplo de un objeto con propiedades opcionales en javascript",
            "como hacer que una propiedad de un objeto sea opcional en js",
            "como declarar una propiedad opcional en un objeto en javascript"
        ],
        "responses": [
            "Puedes declarar propiedades opcionales usando `?` en la interfaz o tipo:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan' };",
            "Ejemplo de propiedad opcional:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tanio?: number;\n\t}\n\tlet coche: Coche = { marca: 'Toyota', modelo: 'Corolla' };",
            "Al declarar un objeto con propiedades opcionales:\n\tinterface Usuario {\n\t\tnombre: string;\n\t\tedad?: number;\n\t\temail?: string;\n\t}\n\tlet usuario: Usuario = { nombre: 'Ana' };"
        ]
    },
    {
        "tag": "metodos_objeto_js",
        "patterns": [
            "como agregar metodos a un objeto en javascript",
            "dame un ejemplo de un objeto con metodos en js",
            "como declarar un metodo dentro de un objeto en js",
            "como hacer que un objeto tenga metodos en javascript"
        ],
        "responses": [
            "Puedes agregar métodos dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
            "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
            "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "acceso_propiedades_objeto_js",
        "patterns": [
            "como acceder a una propiedad de un objeto en javascript",
            "dame un ejemplo de acceso a propiedades de un objeto en js",
            "como obtener el valor de una propiedad de un objeto en javascript",
            "como leer propiedades de un objeto en js"
        ],
        "responses": [
            "Puedes acceder a las propiedades de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tconsole.log(persona.nombre);",
            "Ejemplo de acceso a propiedades:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tconsole.log(coche.marca);",
            "También puedes usar la notación de corchetes para acceder a las propiedades:\n\tlet libro = { titulo: 'JavaScript', autor: 'Juan' };\n\tconsole.log(libro['titulo']);"
        ]
    },
    {
        "tag": "modificacion_propiedades_objeto_js",
        "patterns": [
            "como modificar una propiedad de un objeto en javascript",
            "dame un ejemplo de modificar propiedades en un objeto en js",
            "como cambiar el valor de una propiedad de un objeto en javascript",
            "como actualizar propiedades de un objeto en js"
        ],
        "responses": [
            "Puedes modificar una propiedad de un objeto utilizando la notación de punto:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tpersona.edad = 30;",
            "Ejemplo de modificación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tcoche.modelo = 'Camry';",
            "Para cambiar el valor de una propiedad puedes hacer:\n\tlet libro = { titulo: 'JavaScript', autor: 'Juan' };\n\tlibro.titulo = 'JavaScript avanzado';"
        ]
    },
    {
        "tag": "eliminar_propiedad_objeto_js",
        "patterns": [
            "como eliminar una propiedad de un objeto en javascript",
            "dame un ejemplo de eliminar una propiedad en un objeto en js",
            "como borrar una propiedad de un objeto en javascript",
            "como quitar una propiedad de un objeto en js"
        ],
        "responses": [
            "Puedes eliminar una propiedad de un objeto utilizando el operador `delete`:\n\tlet persona = { nombre: 'Juan', edad: 25 };\n\tdelete persona.edad;",
            "Ejemplo de eliminación de una propiedad:\n\tlet coche = { marca: 'Toyota', modelo: 'Corolla' };\n\tdelete coche.modelo;",
            "Usa el operador `delete` para eliminar propiedades:\n\tlet libro = { titulo: 'JavaScript', autor: 'Juan' };\n\tdelete libro.autor;"
        ]
    },
    {
        "tag": "propiedades_solo_lectura_objeto_js",
        "patterns": [
            "como declarar propiedades de solo lectura en un objeto en javascript",
            "dame un ejemplo de un objeto con propiedades readonly en js",
            "como hacer que una propiedad sea de solo lectura en javascript",
            "como declarar un objeto con propiedades readonly en js"
        ],
        "responses": [
            "Puedes declarar propiedades de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = { nombre: 'Juan', edad: 25 };",
            "Ejemplo de objeto con propiedades de solo lectura:\n\tlet coche: { readonly marca: string; modelo: string } = { marca: 'Toyota', modelo: 'Corolla' };",
            "La palabra clave `readonly` asegura que una propiedad no pueda ser modificada:\n\tlet libro: { readonly titulo: string; autor: string } = { titulo: 'JavaScript', autor: 'Juan' };"
        ]
    },
    {
        "tag": "declaracion_metodos_objeto_js",
        "patterns": [
            "como declarar un metodo dentro de un objeto en javascript",
            "dame un ejemplo de un objeto con metodo en javascript",
            "como agregar un metodo a un objeto en js",
            "como hacer que un objeto tenga un metodo en javascript"
        ],
        "responses": [
            "Puedes declarar un método dentro de un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
            "Ejemplo de un objeto con un método:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
            "Puedes declarar métodos dentro de un objeto utilizando funciones:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "metodos_flecha_objeto_js",
        "patterns": [
            "como declarar un metodo de flecha en un objeto en javascript",
            "dame un ejemplo de metodo de flecha en un objeto en javascript",
            "como usar metodos de flecha en objetos en javascript",
            "como hacer que un objeto tenga un metodo de flecha en js"
        ],
        "responses": [
            "Puedes usar una función flecha como método de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: () => {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
            "Ejemplo de método de flecha:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: () => {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
            "Los métodos de flecha no tienen su propio `this`, por lo que se puede usar en situaciones como esta:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: () => {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "metodos_parametros_objeto_js",
        "patterns": [
            "como declarar un metodo con parametros en un objeto en javascript",
            "dame un ejemplo de metodo con parametros en un objeto en javascript",
            "como pasar parametros a un metodo dentro de un objeto en javascript",
            "como hacer que un metodo reciba parametros en un objeto en js"
        ],
        "responses": [
            "Puedes agregar parámetros a un método en un objeto de esta manera:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tcambiarNombre: function(nuevoNombre) {\n\t\t\tthis.nombre = nuevoNombre;\n\t\t}\n\t};",
            "Ejemplo de un método con parámetros:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tcambiarModelo: function(nuevoModelo) {\n\t\t\tthis.modelo = nuevoModelo;\n\t\t}\n\t};",
            "Puedes definir un método con parámetros de esta forma:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\tactualizarTitulo: function(nuevoTitulo) {\n\t\t\tthis.titulo = nuevoTitulo;\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "metodos_solo_lectura_objeto_js",
        "patterns": [
            "como declarar un metodo de solo lectura en un objeto en javascript",
            "dame un ejemplo de metodo solo lectura en un objeto en javascript",
            "como hacer que un metodo sea de solo lectura en un objeto en javascript",
            "como declarar un metodo readonly en un objeto en js"
        ],
        "responses": [
            "Para hacer que un método sea de solo lectura puedes utilizar `readonly` en el método:\n\tlet persona = {\n\t\treadonly nombre: string;\n\t\tedad: number,\n\t\tgetNombre: function() {\n\t\t\treturn this.nombre;\n\t\t}\n\t};",
            "Ejemplo de método de solo lectura:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tgetMarca: function() {\n\t\t\treturn this.marca;\n\t\t}\n\t};",
            "Puedes declarar un método de solo lectura así:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tgetTitulo: function() {\n\t\t\treturn this.titulo;\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "metodos_asincronos_objeto_js",
        "patterns": [
            "como declarar un metodo asincrono en un objeto en javascript",
            "dame un ejemplo de metodo asincrono en un objeto en javascript",
            "como usar async y await en un metodo dentro de un objeto en javascript",
            "como hacer un metodo asincrono dentro de un objeto en js"
        ],
        "responses": [
            "Puedes declarar un método asíncrono en un objeto utilizando `async` y `await`:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tasync obtenerNombre() {\n\t\t\tlet resultado = await fetch('url');\n\t\t\treturn resultado.json();\n\t\t}\n\t};",
            "Ejemplo de un método asincrono:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tasync obtenerModelo() {\n\t\t\tlet respuesta = await fetch('url');\n\t\t\treturn respuesta.json();\n\t\t}\n\t};",
            "Puedes utilizar `async` y `await` para manejar tareas asincrónicas en un método:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tasync obtenerDetalles() {\n\t\t\tlet detalles = await fetch('url');\n\t\t\treturn detalles.json();\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "metodos_staticos_objeto_js",
        "patterns": [
            "como declarar un metodo estatico en un objeto en javascript",
            "dame un ejemplo de metodo estatico en un objeto en javascript",
            "como usar metodos staticos en objetos en javascript",
            "como declarar un metodo estatico en js"
        ],
        "responses": [
            "Puedes declarar un método estático utilizando `static`:\n\tclass Persona {\n\t\tstatic saludar() {\n\t\t\tconsole.log('Hola');\n\t\t}\n\t}\n\tPersona.saludar();",
            "Ejemplo de un método estático:\n\tclass Coche {\n\t\tstatic mostrarInfo() {\n\t\t\tconsole.log('Información del coche');\n\t\t}\n\t}\n\tCoche.mostrarInfo();",
            "Métodos estáticos se pueden declarar en una clase como este ejemplo:\n\tclass Libro {\n\t\tstatic mostrarTitulo() {\n\t\t\tconsole.log('Título del libro');\n\t\t}\n\t}\n\tLibro.mostrarTitulo();"
        ]
    },
    {
        "tag": "metodos_this_objeto_js",
        "patterns": [
            "como usar this dentro de un metodo en js",
            "dame un ejemplo de un metodo con this en un objeto en javascript",
            "como hacer que un metodo acceda a propiedades usando this en javascript",
            "como funciona this dentro de un metodo en javascript"
        ],
        "responses": [
            "Dentro de un método, `this` hace referencia al objeto actual:\n\tlet persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tmostrarEdad: function() {\n\t\t\tconsole.log(this.edad);\n\t\t}\n\t};",
            "Ejemplo de uso de `this`:\n\tlet coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarMarca: function() {\n\t\t\tconsole.log(this.marca);\n\t\t}\n\t};",
            "Cuando usas `this`, accedes a las propiedades del objeto al que pertenece el método:\n\tlet libro = {\n\t\ttitulo: 'JavaScript',\n\t\tmostrarTitulo: function() {\n\t\t\tconsole.log(this.titulo);\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "declaracion_basica_interface_js",
        "patterns": [
            "como declarar una interface en javascript",
            "dame un ejemplo de como declarar una interface en js",
            "como se declara una interface en javascript",
            "ensename un ejemplo de una interface en javascript"
        ],
        "responses": [
            "Puedes declarar una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
            "Ejemplo básico de una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
            "Una interface se declara así:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan'\n\t};"
        ]
    },
    {
        "tag": "extension_interfaces_js",
        "patterns": [
            "como extender una interface en javascript",
            "dame un ejemplo de extension de interface en javascript",
            "como hacer que una interface herede otra en js",
            "puedes extender una interface en javascript"
        ],
        "responses": [
            "Puedes extender una interface utilizando `extends`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tinterface Empleado extends Persona {\n\t\tpuesto: string;\n\t}\n\tlet empleado: Empleado = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tpuesto: 'Desarrollador'\n\t};",
            "Ejemplo de extensión de interfaces:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tinterface Deportivo extends Coche {\n\t\tvelocidadMaxima: number;\n\t}\n\tlet cocheDeportivo: Deportivo = {\n\t\tmarca: 'Ferrari',\n\t\tmodelo: 'F8',\n\t\tvelocidadMaxima: 340\n\t};",
            "Una interface puede extender a otra para agregar más propiedades:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tinterface Ebook extends Libro {\n\t\ttamanoMB: number;\n\t}\n\tlet ebook: Ebook = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\ttamanoMB: 10\n\t};"
        ]
    },
    {
        "tag": "interfaces_metodos_js",
        "patterns": [
            "como declarar un metodo en una interface en javascript",
            "dame un ejemplo de una interface con metodo en javascript",
            "como agregar metodos a una interface en js",
            "se pueden declarar metodos en una interface en javascript"
        ],
        "responses": [
            "Puedes declarar métodos dentro de una interface de esta manera:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t\tsaludar(): void;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25,\n\t\tsaludar: function() {\n\t\t\tconsole.log('Hola, soy ' + this.nombre);\n\t\t}\n\t};",
            "Ejemplo de una interface con método:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tmostrarInfo(): void;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla',\n\t\tmostrarInfo: function() {\n\t\t\tconsole.log(this.marca + ' ' + this.modelo);\n\t\t}\n\t};",
            "Puedes declarar una interface con un método como este:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\timprimirInfo(): void;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan',\n\t\timprimirInfo: function() {\n\t\t\tconsole.log(this.titulo + ' por ' + this.autor);\n\t\t}\n\t};"
        ]
    },
    {
        "tag": "interfaces_propiedades_opcionales_js",
        "patterns": [
            "como declarar propiedades opcionales en una interface en javascript",
            "dame un ejemplo de propiedades opcionales en una interface en javascript",
            "como hacer que una propiedad sea opcional en una interface en js",
            "se pueden hacer propiedades opcionales en una interface en javascript"
        ],
        "responses": [
            "Puedes hacer que una propiedad sea opcional usando el signo `?`:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad?: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan'\n\t};",
            "Ejemplo de propiedad opcional en una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t\tcolor?: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
            "Para declarar propiedades opcionales puedes usar `?`:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t\tfechaPublicacion?: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan'\n\t};"
        ]
    },
    {
        "tag": "interfaces_propiedades_readonly_js",
        "patterns": [
            "como declarar propiedades de solo lectura en una interface en javascript",
            "dame un ejemplo de propiedad readonly en una interface en javascript",
            "como hacer que una propiedad sea readonly en una interface en js",
            "se pueden hacer propiedades readonly en una interface en javascript"
        ],
        "responses": [
            "Puedes hacer que una propiedad sea de solo lectura utilizando `readonly`:\n\tinterface Persona {\n\t\treadonly nombre: string;\n\t\tedad: number;\n\t}\n\tlet persona: Persona = {\n\t\tnombre: 'Juan',\n\t\tedad: 25\n\t};",
            "Ejemplo de propiedad de solo lectura:\n\tinterface Coche {\n\t\treadonly marca: string;\n\t\tmodelo: string;\n\t}\n\tlet coche: Coche = {\n\t\tmarca: 'Toyota',\n\t\tmodelo: 'Corolla'\n\t};",
            "Para declarar propiedades de solo lectura puedes usar `readonly`:\n\tinterface Libro {\n\t\treadonly titulo: string;\n\t\tautor: string;\n\t}\n\tlet libro: Libro = {\n\t\ttitulo: 'JavaScript',\n\t\tautor: 'Juan'\n\t};"
        ]
    },
    {
        "tag": "interfaces_indices_js",
        "patterns": [
            "como declarar indices en una interface en javascript",
            "dame un ejemplo de propiedad con indice en una interface en javascript",
            "como usar indices para propiedades en una interface en js",
            "se pueden declarar propiedades con indice en una interface en javascript"
        ],
        "responses": [
            "Puedes declarar índices utilizando la siguiente sintaxis:\n\tinterface Persona {\n\t\t[nombre: string]: number;\n\t}\n\tlet edades: Persona = {\n\t\t'Juan': 25,\n\t\t'Ana': 30\n\t};",
            "Ejemplo con índice en una interface:\n\tinterface Coche {\n\t\t[modelo: string]: number;\n\t}\n\tlet precios: Coche = {\n\t\t'Corolla': 25000,\n\t\t'Camry': 35000\n\t};",
            "Para usar índices en una interface puedes hacer lo siguiente:\n\tinterface Libro {\n\t\t[autor: string]: string;\n\t}\n\tlet autoresLibros: Libro = {\n\t\t'Juan': 'JavaScript',\n\t\t'Pedro': 'JavaScript'\n\t};"
        ]
    },
    {
        "tag": "interfaces_funciones_js",
        "patterns": [
            "como usar una interface en una funcion en javascript",
            "dame un ejemplo de funcion con interface en javascript",
            "como aplicar una interface a una funcion en js",
            "se pueden utilizar interfaces con funciones en javascript"
        ],
        "responses": [
            "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
            "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
            "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'JavaScript', autor: 'Juan'});"
        ]
    },
    {
        "tag": "interfaces_funciones_js",
        "patterns": [
            "como usar una interface en una funcion en javascript",
            "dame un ejemplo de funcion con interface en javascript",
            "como aplicar una interface a una funcion en js",
            "se pueden utilizar interfaces con funciones en javascript"
        ],
        "responses": [
            "Puedes utilizar una interface para definir los parámetros de una función:\n\tinterface Persona {\n\t\tnombre: string;\n\t\tedad: number;\n\t}\n\tfunction saludar(persona: Persona) {\n\t\tconsole.log('Hola, ' + persona.nombre);\n\t}\n\tsaludar({nombre: 'Juan', edad: 25});",
            "Ejemplo de función con una interface:\n\tinterface Coche {\n\t\tmarca: string;\n\t\tmodelo: string;\n\t}\n\tfunction mostrarCoche(coche: Coche) {\n\t\tconsole.log(coche.marca + ' ' + coche.modelo);\n\t}\n\tmostrarCoche({marca: 'Toyota', modelo: 'Corolla'});",
            "Puedes utilizar interfaces para definir los tipos de las funciones:\n\tinterface Libro {\n\t\ttitulo: string;\n\t\tautor: string;\n\t}\n\tfunction imprimirInfo(libro: Libro) {\n\t\tconsole.log(libro.titulo + ' por ' + libro.autor);\n\t}\n\timprimirInfo({titulo: 'JavaScript', autor: 'Juan'});"
        ]
    },
    {
        "tag": "declaracion_basica_enum_js",
        "patterns": [
            "como declarar un enum en js",
            "dame un ejemplo de un enum en javascript",
            "como se declara un enum en javascript",
            "ensename un ejemplo de un enum en javascript"
        ],
        "responses": [
            "Puedes declarar un enum de esta manera:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
            "Ejemplo básico de un enum:\n\tenum Estado {\n\t\tActivo,\n\t\tInactivo,\n\t\tPendiente\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
            "Un enum en JavaScript se declara así:\n\tenum Color {\n\t\tRojo,\n\t\tVerde,\n\t\tAzul\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
        ]
    },
    {
        "tag": "enum_valores_especificos_js",
        "patterns": [
            "como asignar valores a un enum en javascript",
            "dame un ejemplo de enum con valores especificos en javascript",
            "como asignar un valor a cada elemento en un enum en js",
            "puedes asignar valores a un enum en javascript"
        ],
        "responses": [
            "Puedes asignar valores a los elementos de un enum de esta manera:\n\tenum Direccion {\n\t\tArriba = 1,\n\t\tAbajo = 2,\n\t\tIzquierda = 3,\n\t\tDerecha = 4\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
            "Ejemplo de enum con valores específicos:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
            "Un enum con valores específicos se declara así:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
        ]
    },
    {
        "tag": "enum_cadenas_texto_js",
        "patterns": [
            "como declarar un enum con cadenas de texto en javascript",
            "dame un ejemplo de enum con cadenas en javascript",
            "como asignar cadenas de texto en un enum en js",
            "puedes usar cadenas de texto en un enum en javascript"
        ],
        "responses": [
            "Puedes usar cadenas de texto en un enum así:\n\tenum Direccion {\n\t\tArriba = 'ARRIBA',\n\t\tAbajo = 'ABAJO',\n\t\tIzquierda = 'IZQUIERDA',\n\t\tDerecha = 'DERECHA'\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;",
            "Ejemplo de enum con cadenas de texto:\n\tenum Estado {\n\t\tActivo = 'activo',\n\t\tInactivo = 'inactivo',\n\t\tPendiente = 'pendiente'\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;",
            "Un enum con cadenas de texto se declara de esta manera:\n\tenum Color {\n\t\tRojo = 'rojo',\n\t\tVerde = 'verde',\n\t\tAzul = 'azul'\n\t}\n\tlet colorFavorito: Color = Color.Verde;"
        ]
    },
    {
        "tag": "acceso_valores_enum_js",
        "patterns": [
            "como acceder a un valor de un enum en javascript",
            "dame un ejemplo de acceso a valores de un enum en javascript",
            "como obtener el valor de un enum en js",
            "puedes acceder a los valores de un enum en javascript"
        ],
        "responses": [
            "Puedes acceder a un valor de un enum así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tconsole.log(miDireccion); // 0",
            "Ejemplo de acceso a un valor de un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tconsole.log(estadoUsuario); // 1",
            "Para acceder a un valor de un enum, puedes hacer lo siguiente:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Verde;\n\tconsole.log(colorFavorito); // '#00FF00'"
        ]
    },
    {
        "tag": "iteracion_enum_js",
        "patterns": [
            "como iterar sobre los valores de un enum en javascript",
            "dame un ejemplo de iteracion de un enum en javascript",
            "como recorrer un enum en js",
            "puedes iterar sobre los valores de un enum en javascript"
        ],
        "responses": [
            "Puedes iterar sobre los valores de un enum utilizando `for...in`:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tfor (let direccion in Direccion) {\n\t\tconsole.log(direccion);\n\t}",
            "Ejemplo de iteración sobre un enum:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tfor (let estado in Estado) {\n\t\tconsole.log(estado);\n\t}",
            "Puedes recorrer los valores de un enum de esta manera:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tfor (let color in Color) {\n\t\tconsole.log(color);\n\t}"
        ]
    },
    {
        "tag": "enum_switch_js",
        "patterns": [
            "como usar un enum en un switch en javascript",
            "dame un ejemplo de uso de enum en un switch en javascript",
            "como aplicar un enum en un switch en js",
            "puedes usar enums en un switch en javascript"
        ],
        "responses": [
            "Puedes usar un enum en un switch así:\n\tenum Direccion {\n\t\tArriba,\n\t\tAbajo,\n\t\tIzquierda,\n\t\tDerecha\n\t}\n\tlet miDireccion: Direccion = Direccion.Arriba;\n\tswitch (miDireccion) {\n\t\tcase Direccion.Arriba:\n\t\t\tconsole.log('Vas hacia arriba');\n\t\t\tbreak;\n\t\tcase Direccion.Abajo:\n\t\t\tconsole.log('Vas hacia abajo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Dirección desconocida');\n\t}",
            "Ejemplo de uso de enum en un switch:\n\tenum Estado {\n\t\tActivo = 1,\n\t\tInactivo = 0,\n\t\tPendiente = 2\n\t}\n\tlet estadoUsuario: Estado = Estado.Activo;\n\tswitch (estadoUsuario) {\n\t\tcase Estado.Activo:\n\t\t\tconsole.log('El usuario está activo');\n\t\t\tbreak;\n\t\tcase Estado.Inactivo:\n\t\t\tconsole.log('El usuario está inactivo');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Estado desconocido');\n\t}",
            "Un ejemplo con enum en un switch sería:\n\tenum Color {\n\t\tRojo = '#FF0000',\n\t\tVerde = '#00FF00',\n\t\tAzul = '#0000FF'\n\t}\n\tlet colorFavorito: Color = Color.Rojo;\n\tswitch (colorFavorito) {\n\t\tcase Color.Rojo:\n\t\t\tconsole.log('Color favorito es rojo');\n\t\t\tbreak;\n\t\tcase Color.Verde:\n\t\t\tconsole.log('Color favorito es verde');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log('Color desconocido');\n\t}"
        ]
    },
    {
        "tag": "busqueda_secuencial_paso_a_paso",
        "patterns": [
            "explicame paso a paso la busqueda secuencial en javascript",
            "como funciona la busqueda secuencial paso a paso en js",
            "puedes darme un ejemplo paso a paso de busqueda secuencial",
            "como es el flujo de busqueda secuencial en javascript",
            "quiero entender la busqueda secuencial paso a paso"
        ],
        "responses": [
            "Aquí tienes el algoritmo de búsqueda secuencial explicado paso a paso:\n\n1. **Definimos la función**:\n```javascript\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n```\nEsta función recibe un arreglo y el valor que queremos buscar.\n\n2. **Recorremos el arreglo usando un bucle**:\n```javascript\nfor (let i = 0; i < arreglo.length; i++) {\n```\nIteramos sobre cada elemento del arreglo, usando el índice `i` para acceder a los valores.\n\n3. **Verificamos si el valor actual es el buscado**:\n```javascript\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n```\nComparamos el valor actual con el valor buscado. Si coinciden, devolvemos el índice.\n\n4. **Devolvemos -1 si no encontramos el valor**:\n```javascript\nreturn -1; // Si no se encuentra el valor\n```\nEsto indica que el valor no está en el arreglo.\n\n5. **Ejemplo completo**:\n```javascript\nconst numeros = [4, 2, 7, 9, 5];\nconst resultado = busquedaSecuencial(numeros, 7);\nconsole.log(resultado); // Salida: 2\n```"
        ]
    },
    {
        "tag": "ciclo_for_busqueda_secuencial",
        "patterns": [
            "como se implementa el ciclo for en la busqueda secuencial en js",
            "puedes darme solo el ciclo for del algoritmo de busqueda secuencial en js",
            "como recorre el arreglo la busqueda secuencial en js",
            "quiero ver el bucle de la busqueda secuencial en js",
            "dame la parte del ciclo for de la busqueda secuencialen en js"
        ],
        "responses": [
            "El ciclo for en la búsqueda secuencial recorre el arreglo elemento por elemento:\n\n```javascript\nfor (let i = 0; i < arreglo.length; i++) {\n    // Aquí se evalúan los elementos uno por uno\n}\n```"
        ]
    },
    {
        "tag": "condicional_if_busqueda_secuencial",
        "patterns": [
            "como funciona el condicional if en la busqueda secuencial en js",
            "puedes darme el condicional if del algoritmo de busqueda secuencial en js",
            "como verifica si el valor es el buscado en la busqueda secuencial en js",
            "quiero ver la condicion if de la busqueda secuencial en js",
            "dame la parte del if en la busqueda secuencial en js"
        ],
        "responses": [
            "El condicional if verifica si el valor actual es el buscado:\n\n```javascript\nif (arreglo[i] === valorBuscado) {\n    return i; // Devuelve el índice si lo encuentra\n}\n```"
        ]
    },
    {
        "tag": "retorno_no_encontrado_busqueda_secuencial",
        "patterns": [
            "que pasa si no se encuentra el valor en la busqueda secuencial en js",
            "puedes darme la parte donde no encuentra el valor en js",
            "como retorna -1 en la busqueda secuencial en js",
            "quiero ver la devolucion de -1 en el algoritmo de busqueda secuencial en js",
            "dame la parte donde no encuentra el valor en la busqueda secuencial en js"
        ],
        "responses": [
            "Si el valor no se encuentra, el algoritmo devuelve -1:\n\n```javascript\nreturn -1; // Si no se encuentra el valor\n```"
        ]
    },
    {
        "tag": "definicion_funcion_busqueda_secuencial",
        "patterns": [
            "como se define la funcion en la busqueda secuencial en js",
            "puedes darme solo la parte donde se define la funcion en js",
            "como empieza la busqueda secuencial en js",
            "quiero ver la cabecera de la funcion de busqueda secuencial en js",
            "dame la parte donde se define la funcion en busqueda secuencial en js"
        ],
        "responses": [
            "La función de búsqueda secuencial se define así:\n\n```javascript\nfunction busquedaSecuencial(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n```"
        ]
    },
    {
        "tag": "argumentos_busqueda_secuencial",
        "patterns": [
            "que argumentos recibe la busqueda secuencial en js",
            "puedes explicarme los parametros de la busqueda secuencial en js",
            "como funcionan los argumentos en el algoritmo de busqueda secuencial en js",
            "que parametros necesita la funcion de busqueda secuencial en js",
            "dame los argumentos de la busqueda secuencial en js"
        ],
        "responses": [
            "La función de búsqueda secuencial recibe dos argumentos:\n\n1. **arreglo**: Es el arreglo que será recorrido.\n2. **valorBuscado**: Es el valor que queremos encontrar.\n\nEjemplo:\n```javascript\nbusquedaSecuencial([4, 2, 7, 9], 7);\n```"
        ]
    },
    {
        "tag": "indice_encontrado_busqueda_secuencial",
        "patterns": [
            "como devuelve el indice encontrado en busqueda secuencial en js",
            "puedes darme la parte donde retorna el indice en la busqueda secuencial en js",
            "que hace cuando encuentra el valor buscado en la busqueda secuencial en js",
            "quiero ver como devuelve el indice encontrado en busqueda secuencial en js",
            "dame la parte donde retorna el indice en busqueda secuencial en js"
        ],
        "responses": [
            "Cuando el valor buscado es encontrado, la función devuelve el índice:\n\n```javascript\nreturn i; // Devuelve el índice donde se encontró el valor\n```"
        ]
    },
    {
        "tag": "uso_practico_busqueda_secuencial",
        "patterns": [
            "como uso la busqueda secuencial en un caso practico en js",
            "puedes darme un ejemplo practico de busqueda secuencial en js",
            "que necesito para probar la busqueda secuencial en js",
            "quiero ver como se usa la busqueda secuencial en un programa en js",
            "dame un ejemplo de uso de busqueda secuencial en js"
        ],
        "responses": [
            "Aquí tienes un ejemplo práctico del uso de la búsqueda secuencial:\n\n```javascript\nconst numeros = [1, 3, 5, 7, 9];\nconst valorBuscado = 7;\nconst resultado = busquedaSecuencial(numeros, valorBuscado);\n\nif (resultado !== -1) {\n    console.log(`Valor encontrado en el índice ${resultado}`);\n} else {\n    console.log('Valor no encontrado');\n}\n```\nEsto muestra si el valor fue encontrado y su índice, o indica que no está presente."
        ]
    },
    {
        "tag": "complejidad_busqueda_secuencial",
        "patterns": [
            "cual es la complejidad de la busqueda secuencial",
            "puedes explicarme la eficiencia de la busqueda secuencial",
            "que tan eficiente es el algoritmo de busqueda secuencial",
            "quiero saber la complejidad de busqueda secuencial",
            "dame la complejidad temporal de la busqueda secuencial"
        ],
        "responses": [
            "La complejidad de la búsqueda secuencial es:\n\n- **Mejor caso**: O(1), cuando el valor buscado está en el primer elemento.\n- **Peor caso**: O(n), cuando el valor está al final o no está en el arreglo.\n- **Caso promedio**: O(n/2), que se simplifica a O(n).\n\nEsto la hace poco eficiente para arreglos grandes si el valor buscado no está cerca del inicio."
        ]
    },
    {
        "tag": "busqueda_binaria_js",
        "patterns": [
            "como funciona la busqueda binaria en javascript",
            "que es la busqueda binaria en js",
            "puedes explicarme el algoritmo de busqueda binaria en javascript",
            "dame el codigo del algoritmo de busqueda binaria en js",
            "como implemento la busqueda binaria en javascript"
        ],
        "responses": [
            "La búsqueda binaria es un algoritmo eficiente para encontrar un elemento en un arreglo ordenado. Se divide el rango de búsqueda a la mitad en cada paso. Aquí tienes el código básico en JavaScript:\n\n```javascript\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    let inicio = 0;\n    let fin = arreglo.length - 1;\n\n    while (inicio <= fin) {\n        let medio = Math.floor((inicio + fin) / 2);\n\n        if (arreglo[medio] === valorBuscado) {\n            return medio; // Devuelve el índice si encuentra el valor\n        } else if (arreglo[medio] < valorBuscado) {\n            inicio = medio + 1; // Ajusta el inicio\n        } else {\n            fin = medio - 1; // Ajusta el final\n        }\n    }\n\n    return -1; // Retorna -1 si el valor no está presente\n}\n\n// Ejemplo de uso\nconst numeros = [1, 3, 5, 7, 9];\nconst resultado = busquedaBinaria(numeros, 7);\nconsole.log(resultado); // Salida: 3\n```"
        ]
    },
    {
        "tag": "definicion_funcion_busqueda_binaria_js",
        "patterns": [
            "como se define la funcion en la busqueda binaria en javascript",
            "puedes darme solo la parte donde se define la funcion en busqueda binaria",
            "como empieza la busqueda binaria en js",
            "quiero ver la cabecera de la funcion de busqueda binaria en javascript",
            "dame la parte donde se define la funcion en la busqueda binaria en js"
        ],
        "responses": [
            "La función de búsqueda binaria en JavaScript se define así:\n\n```javascript\nfunction busquedaBinaria(arreglo, valorBuscado) {\n    // Aquí va el cuerpo del algoritmo\n}\n```"
        ]
    },
    {
        "tag": "inicializacion_variables_busqueda_binaria_js",
        "patterns": [
            "como se inicializan las variables en la busqueda binaria en javascript",
            "puedes darme la parte donde se inicializan las variables en busqueda binaria",
            "como se establecen las variables inicio, fin y medio en busqueda binaria",
            "quiero ver la inicializacion de variables en busqueda binaria en js",
            "dame la parte donde se inicializan las variables en la busqueda binaria en js"
        ],
        "responses": [
            "En la búsqueda binaria, las variables se inicializan de la siguiente manera:\n\n```javascript\nlet inicio = 0;\nlet fin = arreglo.length - 1;\nlet medio = Math.floor((inicio + fin) / 2);\n```"
        ]
    },
    {
        "tag": "condicion_bucle_busqueda_binaria_js",
        "patterns": [
            "como se implementa el bucle while en la busqueda binaria en javascript",
            "puedes darme solo la parte del bucle while en busqueda binaria",
            "como funciona el ciclo while en busqueda binaria en js",
            "quiero ver el bucle while de la busqueda binaria en javascript",
            "dame la condicion del bucle en la busqueda binaria en js"
        ],
        "responses": [
            "El bucle while controla la búsqueda dividiendo el rango a la mitad:\n\n```javascript\nwhile (inicio <= fin) {\n    // Aquí va el código para evaluar y ajustar los límites\n}\n```"
        ]
    },
    {
        "tag": "condicional_valor_busqueda_binaria_js",
        "patterns": [
            "como funciona el if en la busqueda binaria en javascript",
            "puedes darme solo la parte del if en busqueda binaria",
            "como compara el valor buscado en busqueda binaria en js",
            "quiero ver la condicion if de la busqueda binaria en javascript",
            "dame la parte del if en la busqueda binaria en js"
        ],
        "responses": [
            "El condicional `if` verifica si el valor buscado es igual al valor en el índice medio:\n\n```javascript\nif (arreglo[medio] === valorBuscado) {\n    return medio; // Devuelve el índice si encuentra el valor\n}\n```"
        ]
    },
    {
        "tag": "ajuste_limites_busqueda_binaria_js",
        "patterns": [
            "como se ajustan los limites en la busqueda binaria en javascript",
            "puedes darme la parte donde se ajustan inicio y fin en busqueda binaria",
            "como se modifican los limites en busqueda binaria en js",
            "quiero ver el ajuste de inicio y fin en busqueda binaria en javascript",
            "dame la parte donde se ajustan los limites en la busqueda binaria en js"
        ],
        "responses": [
            "En la búsqueda binaria, los límites se ajustan dependiendo del valor comparado:\n\n```javascript\nif (arreglo[medio] < valorBuscado) {\n    inicio = medio + 1; // Ajusta el inicio\n} else {\n    fin = medio - 1; // Ajusta el final\n}\n```"
        ]
    },
    {
        "tag": "retorno_no_encontrado_busqueda_binaria_js",
        "patterns": [
            "que pasa si no se encuentra el valor en busqueda binaria en javascript",
            "puedes darme la parte donde no encuentra el valor en busqueda binaria",
            "como retorna -1 en la busqueda binaria en js",
            "quiero ver como indica que no encontro el valor en busqueda binaria en javascript",
            "dame la parte donde no encuentra el valor en la busqueda binaria en js"
        ],
        "responses": [
            "Si el valor no se encuentra, la función devuelve -1:\n\n```javascript\nreturn -1; // Retorna -1 si el valor no está presente\n```"
        ]
    },
    {
        "tag": "complejidad_busqueda_binaria_js",
        "patterns": [
            "cual es la complejidad de la busqueda binaria en javascript",
            "puedes explicarme la eficiencia de la busqueda binaria en js",
            "que tan eficiente es el algoritmo de busqueda binaria en javascript",
            "quiero saber la complejidad de busqueda binaria en js",
            "dame la complejidad temporal de la busqueda binaria en javascript"
        ],
        "responses": [
            "La complejidad de la búsqueda binaria es:\n\n- **Mejor caso**: O(1), cuando el valor está en el medio.\n- **Peor caso**: O(log n), cuando el rango de búsqueda se divide hasta que queda un solo elemento.\n\nEsto la hace mucho más eficiente que la búsqueda secuencial para arreglos grandes."
        ]
    },
    {
        "tag": "ordenamiento_burbuja_js",
        "patterns": [
            "como funciona el ordenamiento por burbuja en javascript",
            "que es el algoritmo de burbuja en js",
            "puedes explicarme el algoritmo de ordenamiento burbuja en javascript",
            "dame el codigo del algoritmo de burbuja en js",
            "como implemento el algoritmo de burbuja en javascript"
        ],
        "responses": [
            "El ordenamiento por burbuja es un algoritmo que compara elementos adyacentes en un arreglo y los intercambia si están en el orden incorrecto. Esto se repite hasta que el arreglo esté completamente ordenado. Aquí tienes el código en JavaScript:\n\n```javascript\nfunction ordenamientoBurbuja(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Intercambio de elementos\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n// Ejemplo de uso\nconst numeros = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(ordenamientoBurbuja(numeros));\n// Salida: [11, 12, 22, 25, 34, 64, 90]\n```"
        ]
    },
    {
        "tag": "definicion_funcion_ordenamiento_burbuja_js",
        "patterns": [
            "como se define la funcion en el ordenamiento burbuja en javascript",
            "puedes darme solo la parte donde se define la funcion en el algoritmo de burbuja",
            "como empieza el ordenamiento burbuja en js",
            "quiero ver la cabecera de la funcion de ordenamiento burbuja en javascript",
            "dame la parte donde se define la funcion en el algoritmo de burbuja en js"
        ],
        "responses": [
            "La función del ordenamiento burbuja en JavaScript se define así:\n\n```javascript\nfunction ordenamientoBurbuja(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n```"
        ]
    },
    {
        "tag": "inicializacion_variable_n_ordenamiento_burbuja_js",
        "patterns": [
            "como se inicializa la variable n en el ordenamiento burbuja en javascript",
            "puedes darme la parte donde se inicializa n en el algoritmo de burbuja",
            "como se establece el tamano del arreglo en el algoritmo de burbuja en js",
            "quiero ver como se inicializa n en ordenamiento burbuja en javascript",
            "dame la parte donde se inicializa n en el algoritmo de burbuja en js"
        ],
        "responses": [
            "La variable `n` se inicializa con la longitud del arreglo:\n\n```javascript\nlet n = arr.length;\n```"
        ]
    },
    {
        "tag": "estructura_bucle_anidado_burbuja_js",
        "patterns": [
            "como funcionan los bucles en el ordenamiento burbuja en javascript",
            "puedes darme la parte del bucle en el algoritmo de burbuja",
            "como son los ciclos en el algoritmo de burbuja en js",
            "quiero ver el bucle anidado del ordenamiento burbuja en javascript",
            "dame la parte de los ciclos en el algoritmo de burbuja en js"
        ],
        "responses": [
            "El algoritmo utiliza un bucle anidado para recorrer el arreglo:\n\n```javascript\nfor (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n        // Comparación e intercambio aquí\n    }\n}\n```"
        ]
    },
    {
        "tag": "condicion_comparacion_burbuja_js",
        "patterns": [
            "como se comparan los elementos en el ordenamiento burbuja en javascript",
            "puedes darme solo la parte donde se comparan los elementos en el algoritmo de burbuja",
            "como funciona la condicion del if en el algoritmo de burbuja en js",
            "quiero ver la comparacion entre elementos en el ordenamiento burbuja en javascript",
            "dame la parte del if en el algoritmo de burbuja en js"
        ],
        "responses": [
            "La condición `if` verifica si el elemento actual es mayor que el siguiente:\n\n```javascript\nif (arr[j] > arr[j + 1]) {\n    // Intercambio de elementos\n}\n```"
        ]
    },
    {
        "tag": "intercambio_elementos_burbuja_js",
        "patterns": [
            "como se intercambian los elementos en el ordenamiento burbuja en javascript",
            "puedes darme solo la parte del intercambio en el algoritmo de burbuja",
            "como se hace el swap en el algoritmo de burbuja en js",
            "quiero ver como se intercambian los elementos en el ordenamiento burbuja en javascript",
            "dame la parte del intercambio en el algoritmo de burbuja en js"
        ],
        "responses": [
            "El intercambio de elementos se realiza con una variable temporal:\n\n```javascript\nlet temp = arr[j];\narr[j] = arr[j + 1];\narr[j + 1] = temp;\n```"
        ]
    },
    {
        "tag": "complejidad_ordenamiento_burbuja_js",
        "patterns": [
            "cual es la complejidad del ordenamiento burbuja en javascript",
            "puedes explicarme la eficiencia del algoritmo de burbuja en js",
            "que tan eficiente es el algoritmo de burbuja en javascript",
            "quiero saber la complejidad del ordenamiento burbuja en js",
            "dame la complejidad temporal del algoritmo de burbuja en javascript"
        ],
        "responses": [
            "La complejidad del ordenamiento burbuja es:\n\n- **Mejor caso**: O(n), si el arreglo ya está ordenado (con optimización).\n- **Peor caso**: O(n²), cuando el arreglo está en orden inverso.\n- **Caso promedio**: O(n²), debido al doble bucle.\n\nEsto hace que el algoritmo no sea eficiente para grandes volúmenes de datos."
        ]
    }, 
    {
        "tag": "quick_sort_js",
        "patterns": [
            "como funciona el quick sort en javascript",
            "que es el algoritmo de quick sort en js",
            "puedes explicarme el algoritmo de quick sort en javascript",
            "dame el codigo del quick sort en js",
            "como implemento el quick sort en javascript"
        ],
        "responses": [
            "El Quick Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en subarreglos usando un elemento como pivote, colocando los elementos menores a la izquierda y los mayores a la derecha. Luego aplica recursividad para ordenar las partes. Aquí tienes el código completo en JavaScript:\n\n```javascript\nfunction quickSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const pivot = arr[arr.length - 1];\n    const left = [];\n    const right = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\n// Ejemplo de uso\nconst numeros = [34, 7, 23, 32, 5, 62];\nconsole.log(quickSort(numeros));\n// Salida: [5, 7, 23, 32, 34, 62]\n```\n"
        ]
    },
    {
        "tag": "definicion_funcion_quick_sort_js",
        "patterns": [
            "como se define la funcion en el quick sort en javascript",
            "puedes darme solo la parte donde se define la funcion en el quick sort",
            "como empieza el quick sort en js",
            "quiero ver la cabecera de la funcion de quick sort en javascript",
            "dame la parte donde se define la funcion en el quick sort en js"
        ],
        "responses": [
            "La definición de la función Quick Sort en JavaScript es esta:\n\n```javascript\nfunction quickSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n```\n"
        ]
    },
    {
        "tag": "condicion_base_quick_sort_js",
        "patterns": [
            "cual es la condicion base en el quick sort en javascript",
            "puedes darme la parte de la condicion base en el quick sort",
            "como termina la recursion en el quick sort en js",
            "quiero ver la condicion base del quick sort en javascript",
            "dame la parte donde se establece la condicion base en el quick sort en js"
        ],
        "responses": [
            "La condición base del Quick Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n```javascript\nif (arr.length <= 1) {\n    return arr;\n}\n```\n"
        ]
    },
    {
        "tag": "particionamiento_quick_sort_js",
        "patterns": [
            "como se realiza el particionamiento en el quick sort en javascript",
            "puedes darme solo la parte del particionamiento en el quick sort",
            "como se dividen los elementos en el quick sort en js",
            "quiero ver como se particiona el arreglo en el quick sort en javascript",
            "dame la parte del particionamiento en el quick sort en js"
        ],
        "responses": [
            "El particionamiento del Quick Sort divide el arreglo en dos subarreglos con base en un pivote:\n\n```javascript\nconst pivot = arr[arr.length - 1];\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n```\n"
        ]
    },
    {
        "tag": "combinacion_subarreglos_quick_sort_js",
        "patterns": [
            "como se combinan los subarreglos en el quick sort en javascript",
            "puedes darme solo la parte de la combinacion en el quick sort",
            "como se unen los elementos en el quick sort en js",
            "quiero ver como se combinan los subarreglos en el quick sort en javascript",
            "dame la parte de la combinacion en el quick sort en js"
        ],
        "responses": [
            "La combinación de los subarreglos con el pivote se realiza así:\n\n```javascript\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n```\n"
        ]
    },
    {
        "tag": "complejidad_quick_sort_js",
        "patterns": [
            "cual es la complejidad del quick sort en javascript",
            "puedes explicarme la eficiencia del quick sort en js",
            "que tan eficiente es el quick sort en javascript",
            "quiero saber la complejidad del quick sort en js",
            "dame la complejidad temporal del quick sort en javascript"
        ],
        "responses": [
            "La complejidad del Quick Sort es:\n\n- **Mejor caso**: O(n log n), cuando los pivotes dividen el arreglo de manera equilibrada.\n- **Peor caso**: O(n²), cuando el pivote es el elemento más grande o más pequeño en cada partición.\n- **Caso promedio**: O(n log n), debido a la naturaleza recursiva del algoritmo."
        ]
    },
    {
        "tag": "seleccion_pivote_quick_sort_js",
        "patterns": [
            "como se selecciona el pivote en el quick sort en javascript",
            "puedes darme solo la parte donde se elige el pivote en el quick sort",
            "como funciona el pivote en el quick sort en js",
            "quiero ver como se define el pivote en el quick sort en javascript",
            "dame la parte del pivote en el quick sort en js"
        ],
        "responses": [
            "El pivote se selecciona como el último elemento del arreglo:\n\n```javascript\nconst pivot = arr[arr.length - 1];\n```\n"
        ]
    },
    {
        "tag": "llenado_subarreglos_quick_sort_js",
        "patterns": [
            "como se llenan los subarreglos en el quick sort en javascript",
            "puedes darme solo la parte donde se distribuyen los elementos en el quick sort",
            "como se separan los elementos en el quick sort en js",
            "quiero ver como se llenan los subarreglos en el quick sort en javascript",
            "dame la parte de los subarreglos en el quick sort en js"
        ],
        "responses": [
            "Los elementos se separan en los subarreglos izquierdo y derecho en base al pivote:\n\n```javascript\nconst left = [];\nconst right = [];\nfor (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < pivot) {\n        left.push(arr[i]);\n    } else {\n        right.push(arr[i]);\n    }\n}\n```\n"
        ]
    },
    {
        "tag": "recursion_quick_sort_js",
        "patterns": [
            "como funciona la recursion en el quick sort en javascript",
            "puedes darme la parte donde se aplica la recursion en el quick sort",
            "como se llaman los subarreglos recursivamente en el quick sort en js",
            "quiero ver la recursion del quick sort en javascript",
            "dame la parte de la recursion en el quick sort en js"
        ],
        "responses": [
            "La recursión se aplica al ordenar los subarreglos izquierdo y derecho:\n\n```javascript\nreturn [...quickSort(left), pivot, ...quickSort(right)];\n```\n"
        ]
    },
    {
        "tag": "merge_sort_js",
        "patterns": [
            "como funciona el merge sort en javascript",
            "que es el algoritmo de merge sort en js",
            "puedes explicarme el algoritmo de merge sort en javascript",
            "dame el codigo del merge sort en js",
            "como implemento el merge sort en javascript"
        ],
        "responses": [
            "El Merge Sort es un algoritmo de ordenamiento que utiliza el enfoque de dividir y conquistar. Divide el arreglo en partes más pequeñas, las ordena y luego las combina. Aquí tienes el código completo en JavaScript:\n\n```javascript\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    const result = [];\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n    return [...result, ...left, ...right];\n}\n\n// Ejemplo de uso\nconst numeros = [38, 27, 43, 3, 9, 82, 10];\nconsole.log(mergeSort(numeros));\n// Salida: [3, 9, 10, 27, 38, 43, 82]\n```\n"
        ]
    },
    {
        "tag": "definicion_funcion_merge_sort_js",
        "patterns": [
            "como se define la funcion en el merge sort en javascript",
            "puedes darme solo la parte donde se define la funcion en el merge sort",
            "como empieza el merge sort en js",
            "quiero ver la cabecera de la funcion de merge sort en javascript",
            "dame la parte donde se define la funcion en el merge sort en js"
        ],
        "responses": [
            "La función principal del Merge Sort se define así:\n\n```javascript\nfunction mergeSort(arr) {\n    // Aquí va el cuerpo del algoritmo\n}\n```\n"
        ]
    },
    {
        "tag": "condicion_base_merge_sort_js",
        "patterns": [
            "cual es la condicion base en el merge sort en javascript",
            "puedes darme la parte de la condicion base en el merge sort",
            "como termina la recursion en el merge sort en js",
            "quiero ver la condicion base del merge sort en javascript",
            "dame la parte donde se establece la condicion base en el merge sort en js"
        ],
        "responses": [
            "La condición base del Merge Sort verifica si el arreglo tiene uno o ningún elemento, para detener la recursión:\n\n```javascript\nif (arr.length <= 1) {\n    return arr;\n}\n```\n"
        ]
    },
    {
        "tag": "division_arreglo_merge_sort_js",
        "patterns": [
            "como se divide el arreglo en el merge sort en javascript",
            "puedes darme la parte donde se divide el arreglo en el merge sort",
            "como funciona la division en el merge sort en js",
            "quiero ver como se divide el arreglo en el merge sort en javascript",
            "dame la parte de la division en el merge sort en js"
        ],
        "responses": [
            "El arreglo se divide en mitades utilizando el índice medio:\n\n```javascript\nconst mid = Math.floor(arr.length / 2);\nconst left = arr.slice(0, mid);\nconst right = arr.slice(mid);\n```\n"
        ]
    },
    {
        "tag": "recursion_merge_sort_js",
        "patterns": [
            "como funciona la recursion en el merge sort en javascript",
            "puedes darme la parte donde se aplica la recursion en el merge sort",
            "como se llaman las mitades recursivamente en el merge sort en js",
            "quiero ver la recursion del merge sort en javascript",
            "dame la parte de la recursion en el merge sort en js"
        ],
        "responses": [
            "La recursión se aplica al ordenar las mitades izquierda y derecha:\n\n```javascript\nreturn merge(mergeSort(left), mergeSort(right));\n```\n"
        ]
    },
    {
        "tag": "definicion_funcion_merge_js",
        "patterns": [
            "como se define la funcion merge en el merge sort en javascript",
            "puedes darme solo la parte donde se define la funcion merge en el merge sort",
            "como empieza la funcion merge en js",
            "quiero ver la cabecera de la funcion merge en javascript",
            "dame la parte donde se define la funcion merge en el merge sort en js"
        ],
        "responses": [
            "La función merge combina dos subarreglos ordenados en uno solo:\n\n```javascript\nfunction merge(left, right) {\n    // Aquí va el cuerpo de la función merge\n}\n```\n"
        ]
    },
    {
        "tag": "comparacion_merge_js",
        "patterns": [
            "como se comparan los elementos en el merge sort en javascript",
            "puedes darme la parte donde se comparan los elementos en el merge sort",
            "como funciona la comparacion en el merge sort en js",
            "quiero ver la comparacion de los elementos en el merge sort en javascript",
            "dame la parte de la comparacion en el merge sort en js"
        ],
        "responses": [
            "Los elementos se comparan para determinar cuál agregar al resultado:\n\n```javascript\nif (left[0] < right[0]) {\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n```\n"
        ]
    },
    {
        "tag": "combinar_restos_merge_js",
        "patterns": [
            "como se combinan los restos en el merge sort en javascript",
            "puedes darme la parte donde se combinan los elementos restantes en el merge sort",
            "como se manejan los restos en el merge sort en js",
            "quiero ver como se combinan los restos en el merge sort en javascript",
            "dame la parte de la combinacion de restos en el merge sort en js"
        ],
        "responses": [
            "Los elementos restantes de las mitades se combinan al resultado final:\n\n```javascript\nreturn [...result, ...left, ...right];\n```\n"
        ]
    },
    {
        "tag": "complejidad_merge_sort_js",
        "patterns": [
            "cual es la complejidad del merge sort en javascript",
            "puedes explicarme la eficiencia del merge sort en js",
            "que tan eficiente es el merge sort en javascript",
            "quiero saber la complejidad del merge sort en js",
            "dame la complejidad temporal del merge sort en javascript"
        ],
        "responses": [
            "La complejidad del Merge Sort es:\n\n- **Mejor caso**: O(n log n), siempre, ya que divide y combina eficientemente.\n- **Peor caso**: O(n log n), ya que el algoritmo sigue siendo eficiente.\n- **Caso promedio**: O(n log n), independientemente de cómo estén ordenados los datos inicialmente."
        ]
    },
    {
        "tag": "fibonacci_js",
        "patterns": [
            "como funciona el algoritmo de fibonacci en javascript",
            "que es el algoritmo de fibonacci en js",
            "puedes explicarme como generar fibonacci en javascript",
            "dame el codigo del fibonacci en js",
            "como implemento la serie de fibonacci en javascript"
        ],
        "responses": [
            "El algoritmo de Fibonacci genera una secuencia donde cada número es la suma de los dos anteriores. Aquí tienes el código básico para calcular la serie de Fibonacci hasta un número n:\n\n```javascript\nfunction fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Ejemplo de uso\nconsole.log(fibonacci(10)); // Salida: 55 (décimo número de Fibonacci)\n```\n"
        ]
    },
    {
        "tag": "definicion_funcion_fibonacci_js",
        "patterns": [
            "como se define la funcion de fibonacci en javascript",
            "puedes darme la parte donde se define la funcion fibonacci",
            "como empieza el algoritmo de fibonacci en js",
            "quiero ver la cabecera de la funcion fibonacci en javascript",
            "dame la parte donde se define la funcion fibonacci en js"
        ],
        "responses": [
            "La función de Fibonacci se define así:\n\n```javascript\nfunction fibonacci(n) {\n    // Aquí va el cuerpo del algoritmo\n}\n```\n"
        ]
    },
    {
        "tag": "condicion_base_fibonacci_js",
        "patterns": [
            "cual es la condicion base en el algoritmo de fibonacci en javascript",
            "puedes darme la condicion base del fibonacci en js",
            "como se detiene la recursion en fibonacci en js",
            "quiero ver la condicion base de fibonacci en javascript",
            "dame la parte de la condicion base en fibonacci en js"
        ],
        "responses": [
            "La condición base del algoritmo de Fibonacci es:\n\n```javascript\nif (n <= 1) {\n    return n;\n}\n```\nEsto asegura que el cálculo termine cuando n sea 0 o 1."
        ]
    },
    {
        "tag": "recursion_fibonacci_js",
        "patterns": [
            "como funciona la recursion en el fibonacci en javascript",
            "puedes darme la parte donde se aplica la recursion en fibonacci",
            "como se llaman las funciones recursivas en fibonacci en js",
            "quiero ver la recursion del fibonacci en javascript",
            "dame la parte de la recursion en fibonacci en js"
        ],
        "responses": [
            "La recursión en Fibonacci se realiza llamando a la función con valores decrecientes:\n\n```javascript\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n```\nEsto calcula la suma de los dos números anteriores en la serie."
        ]
    },
    {
        "tag": "fibonacci_iterativo_js",
        "patterns": [
            "como implemento fibonacci de manera iterativa en javascript",
            "puedes darme una version iterativa del algoritmo de fibonacci",
            "como funciona el fibonacci iterativo en js",
            "quiero ver el codigo de fibonacci iterativo en javascript",
            "dame una implementacion iterativa de fibonacci en js"
        ],
        "responses": [
            "Aquí tienes una versión iterativa del algoritmo de Fibonacci, que es más eficiente en términos de memoria y rendimiento:\n\n```javascript\nfunction fibonacciIterativo(n) {\n    if (n <= 1) {\n        return n;\n    }\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciIterativo(10)); // Salida: 55\n```\n"
        ]
    },
    {
        "tag": "almacenamiento_fibonacci_js",
        "patterns": [
            "como uso almacenamiento para optimizar fibonacci en javascript",
            "puedes darme una version con almacenamiento de fibonacci en js",
            "como funciona el memoization en fibonacci en javascript",
            "quiero ver una implementacion optimizada de fibonacci con memoization en js",
            "dame un algoritmo optimizado de fibonacci con almacenamiento en javascript"
        ],
        "responses": [
            "El almacenamiento (memoization) se utiliza para guardar cálculos previos y mejorar la eficiencia del algoritmo. Aquí tienes una implementación optimizada de Fibonacci con memoization:\n\n```javascript\nfunction fibonacciMemoization(n, memo = {}) {\n    if (n in memo) {\n        return memo[n];\n    }\n    if (n <= 1) {\n        return n;\n    }\n    memo[n] = fibonacciMemoization(n - 1, memo) + fibonacciMemoization(n - 2, memo);\n    return memo[n];\n}\n\n// Ejemplo de uso\nconsole.log(fibonacciMemoization(10)); // Salida: 55\n```\n"
        ]
    },
    {
        "tag": "complejidad_fibonacci_recursivo_js",
        "patterns": [
            "cual es la complejidad del fibonacci recursivo en javascript",
            "puedes explicarme la eficiencia del fibonacci recursivo en js",
            "que tan eficiente es el fibonacci recursivo en javascript",
            "quiero saber la complejidad del fibonacci recursivo en js",
            "dame la complejidad temporal del fibonacci recursivo en javascript"
        ],
        "responses": [
            "La complejidad del algoritmo recursivo de Fibonacci es:\n\n- **Complejidad temporal**: O(2^n), ya que cada llamada genera dos llamadas adicionales.\n- **Complejidad espacial**: O(n), debido a la profundidad de la pila de llamadas.\nEsto lo hace ineficiente para valores grandes de n."
        ]
    },
    {
        "tag": "complejidad_fibonacci_memoization_js",
        "patterns": [
            "cual es la complejidad del fibonacci con memoization en javascript",
            "puedes explicarme la eficiencia del fibonacci optimizado con memoization en js",
            "que tan eficiente es el fibonacci con memoization en javascript",
            "quiero saber la complejidad del fibonacci con memoization en js",
            "dame la complejidad temporal del fibonacci optimizado en javascript"
        ],
        "responses": [
            "La complejidad del algoritmo de Fibonacci con memoization es:\n\n- **Complejidad temporal**: O(n), ya que cada número en la serie se calcula solo una vez.\n- **Complejidad espacial**: O(n), debido al almacenamiento en el objeto memo.\nEsto lo hace altamente eficiente comparado con la versión recursiva estándar."
        ]
    },
    {
        "tag": "busqueda_en_profundidad_js",
        "patterns": [
            "como funciona la busqueda en profundidad en javascript",
            "que es el algoritmo de busqueda en profundidad en js",
            "puedes explicarme el dfs en javascript",
            "dame el codigo de busqueda en profundidad en js",
            "como implemento la busqueda en profundidad en javascript"
        ],
        "responses": [
            "La búsqueda en profundidad (DFS) es un algoritmo que explora tanto como sea posible por un camino antes de retroceder. Aquí tienes una implementación básica en JavaScript:\n\n```javascript\nfunction dfs(graph, start, visited = new Set()) {\n    console.log(start);\n    visited.add(start);\n\n    for (const neighbor of graph[start]) {\n        if (!visited.has(neighbor)) {\n            dfs(graph, neighbor, visited);\n        }\n    }\n}\n\n// Ejemplo de uso\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\ndfs(graph, 'A');\n```\nEste código imprimirá los nodos visitados en el orden DFS."
        ]
    },
    {
        "tag": "definicion_funcion_dfs_js",
        "patterns": [
            "como se define la funcion de busqueda en profundidad en javascript",
            "puedes darme la cabecera de la funcion dfs",
            "como empieza el dfs en js",
            "quiero ver la definicion de la funcion dfs en javascript",
            "dame la parte donde se define la funcion de busqueda en profundidad en js"
        ],
        "responses": [
            "La función principal de DFS en JavaScript se define así:\n\n```javascript\nfunction dfs(graph, start, visited = new Set()) {\n    // Cuerpo del algoritmo aquí\n}\n```\n"
        ]
    },
    {
        "tag": "marcar_nodo_visitado_dfs_js",
        "patterns": [
            "como se marca un nodo como visitado en dfs en javascript",
            "puedes darme la parte donde se marcan los nodos visitados en dfs",
            "como se registra un nodo visitado en el dfs en js",
            "quiero ver como se marcan los nodos en busqueda en profundidad en javascript",
            "dame la parte donde se registra un nodo como visitado en dfs en js"
        ],
        "responses": [
            "Un nodo se marca como visitado agregándolo a un conjunto:\n\n```javascript\nvisited.add(start);\n```\nEsto evita visitar el mismo nodo más de una vez."
        ]
    },
    {
        "tag": "recorrer_vecinos_dfs_js",
        "patterns": [
            "como se recorren los vecinos en dfs en javascript",
            "puedes darme la parte donde se recorren los nodos adyacentes en dfs",
            "como funciona el recorrido de vecinos en busqueda en profundidad en js",
            "quiero ver el codigo para recorrer los vecinos en dfs en javascript",
            "dame la parte donde se recorren los vecinos en dfs en js"
        ],
        "responses": [
            "El recorrido de vecinos se realiza con un bucle for:\n\n```javascript\nfor (const neighbor of graph[start]) {\n    if (!visited.has(neighbor)) {\n        dfs(graph, neighbor, visited);\n    }\n}\n```\nEsto garantiza que todos los nodos adyacentes sean explorados."
        ]
    },
    {
        "tag": "estructura_grafo_dfs_js",
        "patterns": [
            "como se define el grafo para dfs en javascript",
            "puedes mostrarme como se estructura el grafo en dfs",
            "como funciona la estructura de datos para el grafo en dfs en js",
            "quiero ver como se representa el grafo para busqueda en profundidad en javascript",
            "dame un ejemplo de grafo para dfs en js"
        ],
        "responses": [
            "Un grafo para DFS se representa típicamente como un objeto donde las claves son nodos y los valores son listas de nodos adyacentes. Ejemplo:\n\n```javascript\nconst graph = {\n    A: ['B', 'C'],\n    B: ['D', 'E'],\n    C: ['F'],\n    D: [],\n    E: ['F'],\n    F: []\n};\n```\nEsto permite representar la conectividad entre los nodos."
        ]
    },
    {
        "tag": "dfs_iterativo_js",
        "patterns": [
            "como se implementa dfs iterativo en javascript",
            "puedes mostrarme una version iterativa del dfs en js",
            "como funciona el dfs iterativo en javascript",
            "quiero ver el codigo de dfs iterativo en javascript",
            "dame una implementacion iterativa de dfs en js"
        ],
        "responses": [
            "Aquí tienes una implementación iterativa del DFS utilizando una pila:\n\n```javascript\nfunction dfsIterativo(graph, start) {\n    const stack = [start];\n    const visited = new Set();\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n\n        if (!visited.has(node)) {\n            console.log(node);\n            visited.add(node);\n            for (const neighbor of graph[node]) {\n                stack.push(neighbor);\n            }\n        }\n    }\n}\n\n// Ejemplo de uso\ndfsIterativo(graph, 'A');\n```\nEsto utiliza una pila en lugar de la recursión para controlar el flujo del algoritmo."
        ]
    },
    {
        "tag": "complejidad_dfs_js",
        "patterns": [
            "cual es la complejidad del dfs en javascript",
            "puedes explicarme la eficiencia del dfs en js",
            "que tan eficiente es el dfs en javascript",
            "quiero saber la complejidad del dfs en js",
            "dame la complejidad temporal del dfs en javascript"
        ],
        "responses": [
            "La complejidad del algoritmo DFS es:\n\n- **Complejidad temporal**: O(V + E), donde V es el número de vértices y E es el número de aristas.\n- **Complejidad espacial**: O(V), debido al almacenamiento de los nodos visitados y la pila de llamadas (en la versión recursiva) o la pila explícita (en la versión iterativa).\nEsto lo hace eficiente para explorar grafos con muchos nodos y aristas."
        ]
    },
    {
        "tag": "inicializacion_pila_dfs_iterativo_js",
        "patterns": [
            "como se inicializa la pila en dfs iterativo en javascript",
            "puedes mostrarme la parte donde se crea la pila en dfs iterativo",
            "como empieza la pila en dfs iterativo en js",
            "quiero ver la inicializacion de la pila en dfs iterativo en javascript",
            "dame la parte donde se inicializa la pila en dfs iterativo en js"
        ],
        "responses": [
            "En la implementación iterativa de DFS, la pila se inicializa con el nodo inicial:\n\n```javascript\nconst stack = [start];\n```\nEsto establece el punto de partida para explorar el grafo."
        ]
    },
    {
        "tag": "verificacion_nodo_no_visitado_dfs_js",
        "patterns": [
            "como se verifica que un nodo no ha sido visitado en dfs en javascript",
            "puedes mostrarme como se asegura que un nodo no sea visitado dos veces en dfs",
            "como se comprueba si un nodo ha sido visitado en busqueda en profundidad en js",
            "quiero ver como se verifica el estado de un nodo en dfs en javascript",
            "dame la parte donde se verifica si un nodo ya fue visitado en dfs en js"
        ],
        "responses": [
            "Para garantizar que un nodo no sea visitado dos veces, se utiliza la función `has` del conjunto de nodos visitados:\n\n```javascript\nif (!visited.has(node)) {\n    // Procesar el nodo\n}\n```\nEsto asegura que cada nodo se procese una sola vez."
        ]
    },
    {
        "tag": "agregar_vecinos_pila_dfs_js",
        "patterns": [
            "como se agregan los vecinos a la pila en dfs en javascript",
            "puedes mostrarme la parte donde se añaden los nodos vecinos en dfs iterativo",
            "como funciona el agregado de vecinos en dfs en js",
            "quiero ver como se añaden los vecinos a la pila en busqueda en profundidad en javascript",
            "dame la parte donde se añaden los nodos vecinos a la pila en dfs en js"
        ],
        "responses": [
            "En la versión iterativa de DFS, los vecinos del nodo actual se agregan a la pila con el bucle:\n\n```javascript\nfor (const neighbor of graph[node]) {\n    stack.push(neighbor);\n}\n```\nEsto asegura que los nodos conectados sean explorados en futuras iteraciones."
        ]
    },
    {
        "tag": "impresion_nodos_visitados_dfs_js",
        "patterns": [
            "como se imprimen los nodos visitados en dfs en javascript",
            "puedes mostrarme como se registran los nodos visitados en dfs",
            "como se manejan los nodos procesados en busqueda en profundidad en js",
            "quiero ver como se imprimen los nodos visitados en dfs en javascript",
            "dame la parte donde se imprimen los nodos en dfs en js"
        ],
        "responses": [
            "Los nodos visitados se imprimen utilizando la función `console.log` justo después de ser marcados como visitados:\n\n```javascript\nconsole.log(node);\n```\nEsto registra cada nodo visitado en el orden de exploración."
        ]
    },
    {
        "tag": "uso_set_nodos_visitados_dfs_js",
        "patterns": [
            "por que se usa un set para nodos visitados en dfs en javascript",
            "puedes mostrarme como se utiliza el set en dfs",
            "como funciona el set para nodos en busqueda en profundidad en js",
            "quiero entender el uso del set en dfs en javascript",
            "dame la parte donde se explica el uso del set para nodos visitados en dfs en js"
        ],
        "responses": [
            "El `Set` se utiliza para almacenar los nodos visitados porque permite comprobar si un nodo ya fue visitado de manera eficiente:\n\n```javascript\nvisited.add(node);\nif (!visited.has(neighbor)) {\n    // Procesar el vecino\n}\n```\nEsta estructura tiene operaciones de inserción y verificación en tiempo constante."
        ]
    },
    {
        "tag": "heap_sort_js",
        "patterns": [
            "que es el algoritmo de heap sort en javascript",
            "como funciona el heap sort en js",
            "puedes explicarme el heap sort en javascript",
            "dame el codigo completo del algoritmo heap sort en js",
            "como implemento el heap sort en javascript"
        ],
        "responses": [
            "El algoritmo de Heap Sort es un algoritmo de ordenamiento que utiliza la estructura de datos de un heap (montículo). Primero construye un heap máximo a partir del arreglo, luego intercambia el primer elemento (el máximo) con el último, reduce el tamaño del heap y aplica heapify nuevamente. Aquí tienes el código completo en JavaScript:\n\n```javascript\nfunction heapSort(arr) {\n\tlet n = arr.length;\n\n\t// Construir un heap máximo\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n\t\theapify(arr, n, i);\n\t}\n\n\t// Extraer elementos del heap uno por uno\n\tfor (let i = n - 1; i > 0; i--) {\n\t\t// Mover el máximo actual al final\n\t\t[arr[0], arr[i]] = [arr[i], arr[0]];\n\n\t\t// Aplicar heapify al heap reducido\n\t\theapify(arr, i, 0);\n\t}\n\n\treturn arr;\n}\n\nfunction heapify(arr, n, i) {\n\tlet largest = i;\n\tconst left = 2 * i + 1;\n\tconst right = 2 * i + 2;\n\n\t// Si el hijo izquierdo es más grande que el nodo raíz\n\tif (left < n && arr[left] > arr[largest]) {\n\t\tlargest = left;\n\t}\n\n\t// Si el hijo derecho es más grande que el nodo raíz\n\tif (right < n && arr[right] > arr[largest]) {\n\t\tlargest = right;\n\t}\n\n\t// Si el nodo raíz no es el más grande\n\tif (largest !== i) {\n\t\t[arr[i], arr[largest]] = [arr[largest], arr[i]];\n\t\theapify(arr, n, largest);\n\t}\n}\n\n// Ejemplo de uso\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n```"
        ]
    },
    {
        "tag": "construccion_heap_maximo_js",
        "patterns": [
            "como se construye el heap maximo en heap sort en javascript",
            "puedes mostrarme la parte donde se crea el heap maximo",
            "como se inicializa el heap maximo en js",
            "quiero ver la construccion del heap maximo en heap sort en javascript",
            "dame la parte donde se construye el heap maximo en heap sort en js"
        ],
        "responses": [
            "El heap máximo se construye aplicando la función `heapify` desde la mitad del arreglo hacia atrás:\n\n```javascript\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n```"
        ]
    },
    {
        "tag": "extraccion_maximo_heap_sort_js",
        "patterns": [
            "como se extrae el elemento maximo en heap sort en javascript",
            "puedes mostrarme la parte donde se intercambia el primer elemento con el ultimo",
            "como se hace el intercambio en heap sort en js",
            "quiero ver la extraccion del maximo en heap sort en javascript",
            "dame la parte del intercambio en heap sort en js"
        ],
        "responses": [
            "En Heap Sort, el máximo (primer elemento) se intercambia con el último:\n\n```javascript\n[arr[0], arr[i]] = [arr[i], arr[0]];\n```\nEsto mueve el elemento más grande al final del arreglo ordenado."
        ]
    },
    {
        "tag": "complejidad_heap_sort_js",
        "patterns": [
            "cual es la complejidad del heap sort en javascript",
            "puedes explicarme la eficiencia del heap sort",
            "que tan eficiente es el heap sort en js",
            "quiero saber la complejidad temporal del heap sort en javascript",
            "dame la complejidad del heap sort en js"
        ],
        "responses": [
            "La complejidad del Heap Sort es:\n\n- **Mejor caso**: O(n log n)\n- **Peor caso**: O(n log n)\n- **Caso promedio**: O(n log n)\n\nEsto lo hace eficiente y estable en términos de complejidad."
        ]
    },
    {
        "tag": "definicion_funcion_heap_sort_js",
        "patterns": [
            "como se define la funcion principal en heap sort en javascript",
            "puedes darme la cabecera de la funcion heap sort",
            "como empieza la funcion heap sort en js",
            "quiero ver la cabecera de la funcion de heap sort en javascript",
            "dame el fragmento donde se define la funcion principal de heap sort en js"
        ],
        "responses": [
            "La definición de la función principal de Heap Sort es la siguiente:\n\n```javascript\nfunction heapSort(arr) {\n\t// Aquí empieza el cuerpo del algoritmo\n}\n```"
        ]
    },
    {
        "tag": "iteracion_heap_maximo_js",
        "patterns": [
            "como se itera para construir el heap maximo en heap sort",
            "puedes darme el fragmento donde se itera para construir el heap maximo en js",
            "quiero ver el bucle para construir el heap maximo en heap sort",
            "como se hace la iteracion para construir el heap maximo en javascript",
            "dame la parte donde se construye el heap maximo en heap sort en js"
        ],
        "responses": [
            "La iteración para construir el Heap máximo en el algoritmo Heap Sort es la siguiente:\n\n```javascript\nfor (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n\theapify(arr, arr.length, i);\n}\n```"
        ]
    },
    {
        "tag": "intercambio_elementos_heap_sort_js",
        "patterns": [
            "como se intercambian los elementos en heap sort",
            "puedes darme el código para intercambiar elementos en heap sort",
            "quiero ver cómo se hace el intercambio de elementos en heap sort",
            "dame el fragmento donde se intercambian elementos en heap sort en javascript",
            "como se intercambian los elementos en heap sort en js"
        ],
        "responses": [
            "El intercambio de elementos en Heap Sort se realiza de la siguiente manera:\n\n```javascript\n[arr[0], arr[i]] = [arr[i], arr[0]];\n```"
        ]
    },
    {
        "tag": "ejemplo_heap_sort_js",
        "patterns": [
            "puedes darme un ejemplo de uso del heap sort en javascript",
            "quiero ver un ejemplo completo de heap sort en js",
            "como se utiliza el heap sort en un arreglo de ejemplo",
            "dame un ejemplo práctico de heap sort en javascript",
            "como se usa el algoritmo heap sort en js"
        ],
        "responses": [
            "Aquí tienes un ejemplo de uso del Heap Sort en JavaScript:\n\n```javascript\nconst numeros = [12, 11, 13, 5, 6, 7];\nconsole.log(heapSort(numeros));\n// Salida: [5, 6, 7, 11, 12, 13]\n```"
        ]
    },
    {
        "tag": "tamano_arreglo_heap_sort_js",
        "patterns": [
            "como se obtiene el tamaño del arreglo en heap sort",
            "puedes mostrarme el fragmento donde se obtiene el tamaño del arreglo en heap sort",
            "como se define la variable que guarda el tamaño del arreglo en heap sort",
            "quiero ver cómo se maneja el tamaño del arreglo en heap sort en javascript",
            "dame la parte donde se obtiene el tamaño del arreglo en heap sort en js"
        ],
        "responses": [
            "El tamaño del arreglo se obtiene así:\n\n```javascript\nlet n = arr.length;\n```"
        ]
    }
]
